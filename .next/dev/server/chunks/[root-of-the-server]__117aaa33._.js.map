{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///Users/tonyidiculla/Developer/furfield/ff-plat-6600/src/proxy.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\n// Define protected routes\nconst protectedRoutes = ['/'];\nconst publicRoutes = ['/api/health', '/healthcheck'];\n\n// Simple in-memory cache for token verification (valid for 30 seconds)\nconst tokenCache = new Map<string, { valid: boolean; expires: number }>();\n\nasync function verifyToken(token: string): Promise<boolean> {\n  // Check cache first\n  const cached = tokenCache.get(token);\n  if (cached && cached.expires > Date.now()) {\n    console.log('[Platform Middleware] Using cached token verification');\n    return cached.valid;\n  }\n\n  try {\n    // Verify token with ff-auth service (the single source of truth)\n    const response = await fetch('http://localhost:6800/api/auth/verify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n    \n    const isValid = response.ok;\n    \n    // Cache the result for 30 seconds\n    tokenCache.set(token, {\n      valid: isValid,\n      expires: Date.now() + 30000,\n    });\n    \n    return isValid;\n  } catch (error) {\n    console.error('[Platform Middleware] Token verification failed:', error);\n    return false;\n  }\n}\n\nexport async function proxy(request: NextRequest) {\n  const { pathname, searchParams } = request.nextUrl;\n  \n  console.log('[Platform Proxy] Request:', pathname);\n  \n  // Allow public routes (health checks, etc.)\n  const isPublicRoute = publicRoutes.some(route => pathname.startsWith(route));\n  if (isPublicRoute) {\n    console.log('[Platform Middleware] Public route, allowing access');\n    return NextResponse.next();\n  }\n  \n  // Check for authentication token in cookies OR URL query parameter\n  let token = request.cookies.get('furfield_token')?.value;\n  const tokenFromUrl = searchParams.get('token');\n  \n  // If token in URL but not in cookie, use URL token and set cookie\n  if (!token && tokenFromUrl) {\n    token = tokenFromUrl;\n    console.log('[Platform Middleware] Token found in URL, will set cookie');\n  }\n  \n  console.log('[Platform Middleware] Token found:', !!token);\n  \n  if (!token) {\n    console.log('[Platform Middleware] No token found, redirecting to auth');\n    // No token - redirect to ff-auth\n    const loginUrl = new URL('http://localhost:6800/login');\n    loginUrl.searchParams.set('returnUrl', request.url);\n    return NextResponse.redirect(loginUrl);\n  }\n  \n  // Verify token\n  const isValid = await verifyToken(token);\n  console.log('[Platform Middleware] Token valid:', isValid);\n  \n  if (!isValid) {\n    console.log('[Platform Middleware] Invalid token, redirecting to auth');\n    // Invalid token - clear cookies and redirect to ff-auth\n    const loginUrl = new URL('http://localhost:6800/login');\n    loginUrl.searchParams.set('returnUrl', request.url);\n    const response = NextResponse.redirect(loginUrl);\n    response.cookies.delete('furfield_token');\n    response.cookies.delete('furfield_user');\n    return response;\n  }\n  \n  console.log('[Platform Proxy] Token valid, allowing access');\n  \n  // If token was from URL, set it as cookie and redirect to clean URL\n  if (tokenFromUrl) {\n    console.log('[Platform Proxy] Token from URL, setting cookie and redirecting');\n    const response = NextResponse.redirect(new URL(pathname, request.url));\n    response.cookies.set('furfield_token', token, {\n      path: '/',\n      maxAge: 7 * 24 * 60 * 60,\n      httpOnly: false,\n      sameSite: 'lax',\n      secure: false,\n    });\n    console.log('[Platform Proxy] Cookie set, redirecting to:', pathname);\n    return response;\n  }\n  \n  console.log('[Platform Proxy] Token from cookie, allowing access');\n  // Valid token - allow access\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.png$|.*\\\\.jpg$|.*\\\\.jpeg$|.*\\\\.svg$).*)',\n  ],\n};\n"],"names":[],"mappings":";;;;;;AAAA;;AAGA,0BAA0B;AAC1B,MAAM,kBAAkB;IAAC;CAAI;AAC7B,MAAM,eAAe;IAAC;IAAe;CAAe;AAEpD,uEAAuE;AACvE,MAAM,aAAa,IAAI;AAEvB,eAAe,YAAY,KAAa;IACtC,oBAAoB;IACpB,MAAM,SAAS,WAAW,GAAG,CAAC;IAC9B,IAAI,UAAU,OAAO,OAAO,GAAG,KAAK,GAAG,IAAI;QACzC,QAAQ,GAAG,CAAC;QACZ,OAAO,OAAO,KAAK;IACrB;IAEA,IAAI;QACF,iEAAiE;QACjE,MAAM,WAAW,MAAM,MAAM,yCAAyC;YACpE,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB,CAAC,OAAO,EAAE,OAAO;YACpC;QACF;QAEA,MAAM,UAAU,SAAS,EAAE;QAE3B,kCAAkC;QAClC,WAAW,GAAG,CAAC,OAAO;YACpB,OAAO;YACP,SAAS,KAAK,GAAG,KAAK;QACxB;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oDAAoD;QAClE,OAAO;IACT;AACF;AAEO,eAAe,MAAM,OAAoB;IAC9C,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,QAAQ,OAAO;IAElD,QAAQ,GAAG,CAAC,6BAA6B;IAEzC,4CAA4C;IAC5C,MAAM,gBAAgB,aAAa,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC;IACrE,IAAI,eAAe;QACjB,QAAQ,GAAG,CAAC;QACZ,OAAO,8IAAY,CAAC,IAAI;IAC1B;IAEA,mEAAmE;IACnE,IAAI,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,mBAAmB;IACnD,MAAM,eAAe,aAAa,GAAG,CAAC;IAEtC,kEAAkE;IAClE,IAAI,CAAC,SAAS,cAAc;QAC1B,QAAQ;QACR,QAAQ,GAAG,CAAC;IACd;IAEA,QAAQ,GAAG,CAAC,sCAAsC,CAAC,CAAC;IAEpD,IAAI,CAAC,OAAO;QACV,QAAQ,GAAG,CAAC;QACZ,iCAAiC;QACjC,MAAM,WAAW,IAAI,IAAI;QACzB,SAAS,YAAY,CAAC,GAAG,CAAC,aAAa,QAAQ,GAAG;QAClD,OAAO,8IAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,eAAe;IACf,MAAM,UAAU,MAAM,YAAY;IAClC,QAAQ,GAAG,CAAC,sCAAsC;IAElD,IAAI,CAAC,SAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,wDAAwD;QACxD,MAAM,WAAW,IAAI,IAAI;QACzB,SAAS,YAAY,CAAC,GAAG,CAAC,aAAa,QAAQ,GAAG;QAClD,MAAM,WAAW,8IAAY,CAAC,QAAQ,CAAC;QACvC,SAAS,OAAO,CAAC,MAAM,CAAC;QACxB,SAAS,OAAO,CAAC,MAAM,CAAC;QACxB,OAAO;IACT;IAEA,QAAQ,GAAG,CAAC;IAEZ,oEAAoE;IACpE,IAAI,cAAc;QAChB,QAAQ,GAAG,CAAC;QACZ,MAAM,WAAW,8IAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;QACpE,SAAS,OAAO,CAAC,GAAG,CAAC,kBAAkB,OAAO;YAC5C,MAAM;YACN,QAAQ,IAAI,KAAK,KAAK;YACtB,UAAU;YACV,UAAU;YACV,QAAQ;QACV;QACA,QAAQ,GAAG,CAAC,gDAAgD;QAC5D,OAAO;IACT;IAEA,QAAQ,GAAG,CAAC;IACZ,6BAA6B;IAC7B,OAAO,8IAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH","debugId":null}}]
}
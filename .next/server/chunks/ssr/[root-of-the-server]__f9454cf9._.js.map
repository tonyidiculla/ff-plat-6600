{"version":3,"sources":["turbopack:///[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs","turbopack:///[project]/node_modules/next/src/shared/lib/utils/warn-once.ts","turbopack:///[project]/node_modules/next/src/shared/lib/image-blur-svg.ts","turbopack:///[project]/node_modules/next/src/shared/lib/image-config.ts","turbopack:///[project]/node_modules/next/src/shared/lib/get-img-props.ts","turbopack:///[project]/node_modules/next/src/shared/lib/side-effect.tsx","turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/vendored/contexts/head-manager-context.ts","turbopack:///[project]/node_modules/next/src/shared/lib/head.tsx","turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/vendored/contexts/image-config-context.ts","turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/vendored/contexts/router-context.ts","turbopack:///[project]/node_modules/next/src/shared/lib/find-closest-quality.ts","turbopack:///[project]/node_modules/next/src/shared/lib/image-loader.ts","turbopack:///[project]/node_modules/next/src/client/use-merged-ref.ts","turbopack:///[project]/node_modules/next/src/client/image-component.tsx","turbopack:///[project]/node_modules/next/src/shared/lib/image-external.tsx","turbopack:///[project]/node_modules/next/image.js","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/querystring.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/format-url.ts","turbopack:///[project]/node_modules/next/src/shared/lib/utils.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/parse-path.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/add-path-prefix.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/remove-trailing-slash.ts","turbopack:///[project]/node_modules/next/src/client/normalize-trailing-slash.ts","turbopack:///[project]/node_modules/next/src/client/add-base-path.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/html-bots.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/is-bot.ts","turbopack:///[project]/node_modules/next/src/client/components/app-router-utils.ts","turbopack:///[project]/node_modules/next/src/client/components/segment-cache-impl/cache-key.ts","turbopack:///[project]/node_modules/next/src/shared/lib/app-router-types.ts","turbopack:///[project]/node_modules/next/src/client/components/match-segments.ts","turbopack:///[project]/node_modules/next/src/client/components/app-router-headers.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/router-reducer-types.ts","turbopack:///[project]/node_modules/next/src/shared/lib/is-thenable.ts","turbopack:///[project]/node_modules/next/src/client/components/use-action-queue.ts","turbopack:///[project]/node_modules/next/src/client/app-call-server.ts","turbopack:///[project]/node_modules/next/src/client/app-find-source-map-url.ts","turbopack:///[project]/node_modules/next/src/shared/lib/segment-cache/segment-value-encoding.ts","turbopack:///[project]/node_modules/next/src/client/route-params.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/create-href-from-url.ts","turbopack:///[project]/node_modules/next/src/client/flight-data-helpers.ts","turbopack:///[project]/node_modules/next/src/client/app-build-id.ts","turbopack:///[project]/node_modules/next/src/shared/lib/hash.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/cache-busting-search-param.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/set-cache-busting-search-param.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/fetch-server-response.ts","turbopack:///[project]/node_modules/next/src/client/components/segment-cache-impl/tuple-map.ts","turbopack:///[project]/node_modules/next/src/client/components/segment-cache-impl/lru.ts","turbopack:///[project]/node_modules/next/src/shared/lib/page-path/ensure-leading-slash.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/app-paths.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/interception-routes.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/compute-changed-path.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/handle-mutable.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/reducers/navigate-reducer.ts","turbopack:///[project]/node_modules/next/src/shared/lib/segment-cache/output-export-prefetch-encoding.ts","turbopack:///[project]/node_modules/next/src/client/components/segment-cache-impl/cache.ts","turbopack:///[project]/node_modules/next/src/client/components/segment-cache-impl/scheduler.ts","turbopack:///[project]/node_modules/next/src/client/components/segment-cache-impl/prefetch.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/create-router-cache-key.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/is-navigating-to-new-root-layout.ts","turbopack:///[project]/node_modules/next/src/client/components/router-reducer/ppr-navigations.ts","turbopack:///[project]/node_modules/next/src/client/components/segment-cache-impl/navigation.ts","turbopack:///[project]/node_modules/next/src/client/components/segment-cache.ts","turbopack:///[project]/node_modules/next/src/client/components/links.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/path-has-prefix.ts","turbopack:///[project]/node_modules/next/src/client/has-base-path.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/is-local-url.ts","turbopack:///[project]/node_modules/next/src/shared/lib/utils/error-once.ts","turbopack:///[project]/node_modules/next/src/client/app-dir/link.tsx","turbopack:///[project]/components/ui/card.tsx","turbopack:///[project]/components/ui/button.tsx","turbopack:///[project]/components/ui/standardized-header.tsx","turbopack:///[project]/components/FurfieldLogo.tsx","turbopack:///[project]/lib/supabase/client.ts"],"sourcesContent":["\"use strict\";\n\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\nexports._ = _interop_require_default;\n","let warnOnce = (_: string) => {}\nif (process.env.NODE_ENV !== 'production') {\n  const warnings = new Set<string>()\n  warnOnce = (msg: string) => {\n    if (!warnings.has(msg)) {\n      console.warn(msg)\n    }\n    warnings.add(msg)\n  }\n}\n\nexport { warnOnce }\n","/**\n * A shared function, used on both client and server, to generate a SVG blur placeholder.\n */\nexport function getImageBlurSvg({\n  widthInt,\n  heightInt,\n  blurWidth,\n  blurHeight,\n  blurDataURL,\n  objectFit,\n}: {\n  widthInt?: number\n  heightInt?: number\n  blurWidth?: number\n  blurHeight?: number\n  blurDataURL: string\n  objectFit?: string\n}): string {\n  const std = 20\n  const svgWidth = blurWidth ? blurWidth * 40 : widthInt\n  const svgHeight = blurHeight ? blurHeight * 40 : heightInt\n\n  const viewBox =\n    svgWidth && svgHeight ? `viewBox='0 0 ${svgWidth} ${svgHeight}'` : ''\n  const preserveAspectRatio = viewBox\n    ? 'none'\n    : objectFit === 'contain'\n      ? 'xMidYMid'\n      : objectFit === 'cover'\n        ? 'xMidYMid slice'\n        : 'none'\n\n  return `%3Csvg xmlns='http://www.w3.org/2000/svg' ${viewBox}%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='${std}'/%3E%3CfeColorMatrix values='1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 100 -1' result='s'/%3E%3CfeFlood x='0' y='0' width='100%25' height='100%25'/%3E%3CfeComposite operator='out' in='s'/%3E%3CfeComposite in2='SourceGraphic'/%3E%3CfeGaussianBlur stdDeviation='${std}'/%3E%3C/filter%3E%3Cimage width='100%25' height='100%25' x='0' y='0' preserveAspectRatio='${preserveAspectRatio}' style='filter: url(%23b);' href='${blurDataURL}'/%3E%3C/svg%3E`\n}\n","export const VALID_LOADERS = [\n  'default',\n  'imgix',\n  'cloudinary',\n  'akamai',\n  'custom',\n] as const\n\nexport type LoaderValue = (typeof VALID_LOADERS)[number]\n\nexport type ImageLoaderProps = {\n  src: string\n  width: number\n  quality?: number\n}\n\nexport type ImageLoaderPropsWithConfig = ImageLoaderProps & {\n  config: Readonly<ImageConfig>\n}\n\nexport type LocalPattern = {\n  /**\n   * Can be literal or wildcard.\n   * Single `*` matches a single path segment.\n   * Double `**` matches any number of path segments.\n   */\n  pathname?: string\n\n  /**\n   * Can be literal query string such as `?v=1` or\n   * empty string meaning no query string.\n   */\n  search?: string\n}\n\nexport type RemotePattern = {\n  /**\n   * Must be `http` or `https`.\n   */\n  protocol?: 'http' | 'https'\n\n  /**\n   * Can be literal or wildcard.\n   * Single `*` matches a single subdomain.\n   * Double `**` matches any number of subdomains.\n   */\n  hostname: string\n\n  /**\n   * Can be literal port such as `8080` or empty string\n   * meaning no port.\n   */\n  port?: string\n\n  /**\n   * Can be literal or wildcard.\n   * Single `*` matches a single path segment.\n   * Double `**` matches any number of path segments.\n   */\n  pathname?: string\n\n  /**\n   * Can be literal query string such as `?v=1` or\n   * empty string meaning no query string.\n   */\n  search?: string\n}\n\ntype ImageFormat = 'image/avif' | 'image/webp'\n\n/**\n * Image configurations\n *\n * @see [Image configuration options](https://nextjs.org/docs/api-reference/next/image#configuration-options)\n */\nexport type ImageConfigComplete = {\n  /** @see [Device sizes documentation](https://nextjs.org/docs/api-reference/next/image#device-sizes) */\n  deviceSizes: number[]\n\n  /** @see [Image sizing documentation](https://nextjs.org/docs/app/building-your-application/optimizing/images#image-sizing) */\n  imageSizes: number[]\n\n  /** @see [Image loaders configuration](https://nextjs.org/docs/api-reference/next/legacy/image#loader) */\n  loader: LoaderValue\n\n  /** @see [Image loader configuration](https://nextjs.org/docs/app/api-reference/components/image#path) */\n  path: string\n\n  /** @see [Image loader configuration](https://nextjs.org/docs/api-reference/next/image#loader-configuration) */\n  loaderFile: string\n\n  /**\n   * @deprecated Use `remotePatterns` instead.\n   */\n  domains: string[]\n\n  /** @see [Disable static image import configuration](https://nextjs.org/docs/api-reference/next/image#disable-static-imports) */\n  disableStaticImages: boolean\n\n  /** @see [Cache behavior](https://nextjs.org/docs/api-reference/next/image#caching-behavior) */\n  minimumCacheTTL: number\n\n  /** @see [Acceptable formats](https://nextjs.org/docs/api-reference/next/image#acceptable-formats) */\n  formats: ImageFormat[]\n\n  /** @see [Maximum Redirects](https://nextjs.org/docs/api-reference/next/image#maximumredirects) */\n  maximumRedirects: number\n\n  /** @see [Dangerously Allow Local IP](https://nextjs.org/docs/api-reference/next/image#dangerously-allow-local-ip) */\n  dangerouslyAllowLocalIP: boolean\n\n  /** @see [Dangerously Allow SVG](https://nextjs.org/docs/api-reference/next/image#dangerously-allow-svg) */\n  dangerouslyAllowSVG: boolean\n\n  /** @see [Content Security Policy](https://nextjs.org/docs/api-reference/next/image#contentsecuritypolicy) */\n  contentSecurityPolicy: string\n\n  /** @see [Content Disposition Type](https://nextjs.org/docs/api-reference/next/image#contentdispositiontype) */\n  contentDispositionType: 'inline' | 'attachment'\n\n  /** @see [Remote Patterns](https://nextjs.org/docs/api-reference/next/image#remotepatterns) */\n  remotePatterns: Array<URL | RemotePattern>\n\n  /** @see [Local Patterns](https://nextjs.org/docs/api-reference/next/image#localPatterns) */\n  localPatterns: LocalPattern[] | undefined\n\n  /** @see [Qualities](https://nextjs.org/docs/api-reference/next/image#qualities) */\n  qualities: number[] | undefined\n\n  /** @see [Unoptimized](https://nextjs.org/docs/api-reference/next/image#unoptimized) */\n  unoptimized: boolean\n}\n\nexport type ImageConfig = Partial<ImageConfigComplete>\n\nexport const imageConfigDefault: ImageConfigComplete = {\n  deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  imageSizes: [32, 48, 64, 96, 128, 256, 384],\n  path: '/_next/image',\n  loader: 'default',\n  loaderFile: '',\n  /**\n   * @deprecated Use `remotePatterns` instead to protect your application from malicious users.\n   */\n  domains: [],\n  disableStaticImages: false,\n  minimumCacheTTL: 14400, // 4 hours\n  formats: ['image/webp'],\n  maximumRedirects: 3,\n  dangerouslyAllowLocalIP: false,\n  dangerouslyAllowSVG: false,\n  contentSecurityPolicy: `script-src 'none'; frame-src 'none'; sandbox;`,\n  contentDispositionType: 'attachment',\n  localPatterns: undefined, // default: allow all local images\n  remotePatterns: [], // default: allow no remote images\n  qualities: [75],\n  unoptimized: false,\n}\n","import { warnOnce } from './utils/warn-once'\nimport { getImageBlurSvg } from './image-blur-svg'\nimport { imageConfigDefault } from './image-config'\nimport type {\n  ImageConfigComplete,\n  ImageLoaderProps,\n  ImageLoaderPropsWithConfig,\n} from './image-config'\n\nimport type { CSSProperties, JSX } from 'react'\n\nexport interface StaticImageData {\n  src: string\n  height: number\n  width: number\n  blurDataURL?: string\n  blurWidth?: number\n  blurHeight?: number\n}\n\nexport interface StaticRequire {\n  default: StaticImageData\n}\n\nexport type StaticImport = StaticRequire | StaticImageData\n\nexport type ImageProps = Omit<\n  JSX.IntrinsicElements['img'],\n  'src' | 'srcSet' | 'ref' | 'alt' | 'width' | 'height' | 'loading'\n> & {\n  src: string | StaticImport\n  alt: string\n  width?: number | `${number}`\n  height?: number | `${number}`\n  fill?: boolean\n  loader?: ImageLoader\n  quality?: number | `${number}`\n  preload?: boolean\n  /**\n   * @deprecated Use `preload` prop instead.\n   * See https://nextjs.org/docs/app/api-reference/components/image#preload\n   */\n  priority?: boolean\n  loading?: LoadingValue\n  placeholder?: PlaceholderValue\n  blurDataURL?: string\n  unoptimized?: boolean\n  overrideSrc?: string\n  /**\n   * @deprecated Use `onLoad` instead.\n   * @see https://nextjs.org/docs/app/api-reference/components/image#onload\n   */\n  onLoadingComplete?: OnLoadingComplete\n  /**\n   * @deprecated Use `fill` prop instead of `layout=\"fill\"` or change import to `next/legacy/image`.\n   * @see https://nextjs.org/docs/api-reference/next/legacy/image\n   */\n  layout?: string\n  /**\n   * @deprecated Use `style` prop instead.\n   */\n  objectFit?: string\n  /**\n   * @deprecated Use `style` prop instead.\n   */\n  objectPosition?: string\n  /**\n   * @deprecated This prop does not do anything.\n   */\n  lazyBoundary?: string\n  /**\n   * @deprecated This prop does not do anything.\n   */\n  lazyRoot?: string\n}\n\nexport type ImgProps = Omit<ImageProps, 'src' | 'loader'> & {\n  loading: LoadingValue\n  width: number | undefined\n  height: number | undefined\n  style: NonNullable<JSX.IntrinsicElements['img']['style']>\n  sizes: string | undefined\n  srcSet: string | undefined\n  src: string\n}\n\nconst VALID_LOADING_VALUES = ['lazy', 'eager', undefined] as const\n\n// Object-fit values that are not valid background-size values\nconst INVALID_BACKGROUND_SIZE_VALUES = [\n  '-moz-initial',\n  'fill',\n  'none',\n  'scale-down',\n  undefined,\n]\ntype LoadingValue = (typeof VALID_LOADING_VALUES)[number]\ntype ImageConfig = ImageConfigComplete & {\n  allSizes: number[]\n  output?: 'standalone' | 'export'\n}\n\nexport type ImageLoader = (p: ImageLoaderProps) => string\n\n// Do not export - this is an internal type only\n// because `next.config.js` is only meant for the\n// built-in loaders, not for a custom loader() prop.\ntype ImageLoaderWithConfig = (p: ImageLoaderPropsWithConfig) => string\n\nexport type PlaceholderValue = 'blur' | 'empty' | `data:image/${string}`\nexport type OnLoad = React.ReactEventHandler<HTMLImageElement> | undefined\nexport type OnLoadingComplete = (img: HTMLImageElement) => void\n\nexport type PlaceholderStyle = Partial<\n  Pick<\n    CSSProperties,\n    | 'backgroundSize'\n    | 'backgroundPosition'\n    | 'backgroundRepeat'\n    | 'backgroundImage'\n  >\n>\n\nfunction isStaticRequire(\n  src: StaticRequire | StaticImageData\n): src is StaticRequire {\n  return (src as StaticRequire).default !== undefined\n}\n\nfunction isStaticImageData(\n  src: StaticRequire | StaticImageData\n): src is StaticImageData {\n  return (src as StaticImageData).src !== undefined\n}\n\nfunction isStaticImport(src: string | StaticImport): src is StaticImport {\n  return (\n    !!src &&\n    typeof src === 'object' &&\n    (isStaticRequire(src as StaticImport) ||\n      isStaticImageData(src as StaticImport))\n  )\n}\n\nconst allImgs = new Map<\n  string,\n  { src: string; loading: LoadingValue; placeholder: PlaceholderValue }\n>()\nlet perfObserver: PerformanceObserver | undefined\n\nfunction getInt(x: unknown): number | undefined {\n  if (typeof x === 'undefined') {\n    return x\n  }\n  if (typeof x === 'number') {\n    return Number.isFinite(x) ? x : NaN\n  }\n  if (typeof x === 'string' && /^[0-9]+$/.test(x)) {\n    return parseInt(x, 10)\n  }\n  return NaN\n}\n\nfunction getWidths(\n  { deviceSizes, allSizes }: ImageConfig,\n  width: number | undefined,\n  sizes: string | undefined\n): { widths: number[]; kind: 'w' | 'x' } {\n  if (sizes) {\n    // Find all the \"vw\" percent sizes used in the sizes prop\n    const viewportWidthRe = /(^|\\s)(1?\\d?\\d)vw/g\n    const percentSizes = []\n    for (let match; (match = viewportWidthRe.exec(sizes)); match) {\n      percentSizes.push(parseInt(match[2]))\n    }\n    if (percentSizes.length) {\n      const smallestRatio = Math.min(...percentSizes) * 0.01\n      return {\n        widths: allSizes.filter((s) => s >= deviceSizes[0] * smallestRatio),\n        kind: 'w',\n      }\n    }\n    return { widths: allSizes, kind: 'w' }\n  }\n  if (typeof width !== 'number') {\n    return { widths: deviceSizes, kind: 'w' }\n  }\n\n  const widths = [\n    ...new Set(\n      // > This means that most OLED screens that say they are 3x resolution,\n      // > are actually 3x in the green color, but only 1.5x in the red and\n      // > blue colors. Showing a 3x resolution image in the app vs a 2x\n      // > resolution image will be visually the same, though the 3x image\n      // > takes significantly more data. Even true 3x resolution screens are\n      // > wasteful as the human eye cannot see that level of detail without\n      // > something like a magnifying glass.\n      // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html\n      [width, width * 2 /*, width * 3*/].map(\n        (w) => allSizes.find((p) => p >= w) || allSizes[allSizes.length - 1]\n      )\n    ),\n  ]\n  return { widths, kind: 'x' }\n}\n\ntype GenImgAttrsData = {\n  config: ImageConfig\n  src: string\n  unoptimized: boolean\n  loader: ImageLoaderWithConfig\n  width?: number\n  quality?: number\n  sizes?: string\n}\n\ntype GenImgAttrsResult = {\n  src: string\n  srcSet: string | undefined\n  sizes: string | undefined\n}\n\nfunction generateImgAttrs({\n  config,\n  src,\n  unoptimized,\n  width,\n  quality,\n  sizes,\n  loader,\n}: GenImgAttrsData): GenImgAttrsResult {\n  if (unoptimized) {\n    return { src, srcSet: undefined, sizes: undefined }\n  }\n\n  const { widths, kind } = getWidths(config, width, sizes)\n  const last = widths.length - 1\n\n  return {\n    sizes: !sizes && kind === 'w' ? '100vw' : sizes,\n    srcSet: widths\n      .map(\n        (w, i) =>\n          `${loader({ config, src, quality, width: w })} ${\n            kind === 'w' ? w : i + 1\n          }${kind}`\n      )\n      .join(', '),\n\n    // It's intended to keep `src` the last attribute because React updates\n    // attributes in order. If we keep `src` the first one, Safari will\n    // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n    // updated by React. That causes multiple unnecessary requests if `srcSet`\n    // and `sizes` are defined.\n    // This bug cannot be reproduced in Chrome or Firefox.\n    src: loader({ config, src, quality, width: widths[last] }),\n  }\n}\n\n/**\n * A shared function, used on both client and server, to generate the props for <img>.\n */\nexport function getImgProps(\n  {\n    src,\n    sizes,\n    unoptimized = false,\n    priority = false,\n    preload = false,\n    loading,\n    className,\n    quality,\n    width,\n    height,\n    fill = false,\n    style,\n    overrideSrc,\n    onLoad,\n    onLoadingComplete,\n    placeholder = 'empty',\n    blurDataURL,\n    fetchPriority,\n    decoding = 'async',\n    layout,\n    objectFit,\n    objectPosition,\n    lazyBoundary,\n    lazyRoot,\n    ...rest\n  }: ImageProps,\n  _state: {\n    defaultLoader: ImageLoaderWithConfig\n    imgConf: ImageConfigComplete\n    showAltText?: boolean\n    blurComplete?: boolean\n  }\n): {\n  props: ImgProps\n  meta: {\n    unoptimized: boolean\n    preload: boolean\n    placeholder: NonNullable<ImageProps['placeholder']>\n    fill: boolean\n  }\n} {\n  const { imgConf, showAltText, blurComplete, defaultLoader } = _state\n  let config: ImageConfig\n  let c = imgConf || imageConfigDefault\n  if ('allSizes' in c) {\n    config = c as ImageConfig\n  } else {\n    const allSizes = [...c.deviceSizes, ...c.imageSizes].sort((a, b) => a - b)\n    const deviceSizes = c.deviceSizes.sort((a, b) => a - b)\n    const qualities = c.qualities?.sort((a, b) => a - b)\n    config = { ...c, allSizes, deviceSizes, qualities }\n  }\n\n  if (typeof defaultLoader === 'undefined') {\n    throw new Error(\n      'images.loaderFile detected but the file is missing default export.\\nRead more: https://nextjs.org/docs/messages/invalid-images-config'\n    )\n  }\n  let loader: ImageLoaderWithConfig = rest.loader || defaultLoader\n\n  // Remove property so it's not spread on <img> element\n  delete rest.loader\n  delete (rest as any).srcSet\n\n  // This special value indicates that the user\n  // didn't define a \"loader\" prop or \"loader\" config.\n  const isDefaultLoader = '__next_img_default' in loader\n\n  if (isDefaultLoader) {\n    if (config.loader === 'custom') {\n      throw new Error(\n        `Image with src \"${src}\" is missing \"loader\" prop.` +\n          `\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader`\n      )\n    }\n  } else {\n    // The user defined a \"loader\" prop or config.\n    // Since the config object is internal only, we\n    // must not pass it to the user-defined \"loader\".\n    const customImageLoader = loader as ImageLoader\n    loader = (obj) => {\n      const { config: _, ...opts } = obj\n      return customImageLoader(opts)\n    }\n  }\n\n  if (layout) {\n    if (layout === 'fill') {\n      fill = true\n    }\n    const layoutToStyle: Record<string, Record<string, string> | undefined> = {\n      intrinsic: { maxWidth: '100%', height: 'auto' },\n      responsive: { width: '100%', height: 'auto' },\n    }\n    const layoutToSizes: Record<string, string | undefined> = {\n      responsive: '100vw',\n      fill: '100vw',\n    }\n    const layoutStyle = layoutToStyle[layout]\n    if (layoutStyle) {\n      style = { ...style, ...layoutStyle }\n    }\n    const layoutSizes = layoutToSizes[layout]\n    if (layoutSizes && !sizes) {\n      sizes = layoutSizes\n    }\n  }\n\n  let staticSrc = ''\n  let widthInt = getInt(width)\n  let heightInt = getInt(height)\n  let blurWidth: number | undefined\n  let blurHeight: number | undefined\n  if (isStaticImport(src)) {\n    const staticImageData = isStaticRequire(src) ? src.default : src\n\n    if (!staticImageData.src) {\n      throw new Error(\n        `An object should only be passed to the image component src parameter if it comes from a static image import. It must include src. Received ${JSON.stringify(\n          staticImageData\n        )}`\n      )\n    }\n    if (!staticImageData.height || !staticImageData.width) {\n      throw new Error(\n        `An object should only be passed to the image component src parameter if it comes from a static image import. It must include height and width. Received ${JSON.stringify(\n          staticImageData\n        )}`\n      )\n    }\n\n    blurWidth = staticImageData.blurWidth\n    blurHeight = staticImageData.blurHeight\n    blurDataURL = blurDataURL || staticImageData.blurDataURL\n    staticSrc = staticImageData.src\n\n    if (!fill) {\n      if (!widthInt && !heightInt) {\n        widthInt = staticImageData.width\n        heightInt = staticImageData.height\n      } else if (widthInt && !heightInt) {\n        const ratio = widthInt / staticImageData.width\n        heightInt = Math.round(staticImageData.height * ratio)\n      } else if (!widthInt && heightInt) {\n        const ratio = heightInt / staticImageData.height\n        widthInt = Math.round(staticImageData.width * ratio)\n      }\n    }\n  }\n  src = typeof src === 'string' ? src : staticSrc\n\n  let isLazy =\n    !priority &&\n    !preload &&\n    (loading === 'lazy' || typeof loading === 'undefined')\n  if (!src || src.startsWith('data:') || src.startsWith('blob:')) {\n    // https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n    unoptimized = true\n    isLazy = false\n  }\n  if (config.unoptimized) {\n    unoptimized = true\n  }\n  if (\n    isDefaultLoader &&\n    !config.dangerouslyAllowSVG &&\n    src.split('?', 1)[0].endsWith('.svg')\n  ) {\n    // Special case to make svg serve as-is to avoid proxying\n    // through the built-in Image Optimization API.\n    unoptimized = true\n  }\n\n  const qualityInt = getInt(quality)\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (config.output === 'export' && isDefaultLoader && !unoptimized) {\n      throw new Error(\n        `Image Optimization using the default loader is not compatible with \\`{ output: 'export' }\\`.\n  Possible solutions:\n    - Remove \\`{ output: 'export' }\\` and run \"next start\" to run server mode including the Image Optimization API.\n    - Configure \\`{ images: { unoptimized: true } }\\` in \\`next.config.js\\` to disable the Image Optimization API.\n  Read more: https://nextjs.org/docs/messages/export-image-api`\n      )\n    }\n    if (!src) {\n      // React doesn't show the stack trace and there's\n      // no `src` to help identify which image, so we\n      // instead console.error(ref) during mount.\n      unoptimized = true\n    } else {\n      if (fill) {\n        if (width) {\n          throw new Error(\n            `Image with src \"${src}\" has both \"width\" and \"fill\" properties. Only one should be used.`\n          )\n        }\n        if (height) {\n          throw new Error(\n            `Image with src \"${src}\" has both \"height\" and \"fill\" properties. Only one should be used.`\n          )\n        }\n        if (style?.position && style.position !== 'absolute') {\n          throw new Error(\n            `Image with src \"${src}\" has both \"fill\" and \"style.position\" properties. Images with \"fill\" always use position absolute - it cannot be modified.`\n          )\n        }\n        if (style?.width && style.width !== '100%') {\n          throw new Error(\n            `Image with src \"${src}\" has both \"fill\" and \"style.width\" properties. Images with \"fill\" always use width 100% - it cannot be modified.`\n          )\n        }\n        if (style?.height && style.height !== '100%') {\n          throw new Error(\n            `Image with src \"${src}\" has both \"fill\" and \"style.height\" properties. Images with \"fill\" always use height 100% - it cannot be modified.`\n          )\n        }\n      } else {\n        if (typeof widthInt === 'undefined') {\n          throw new Error(\n            `Image with src \"${src}\" is missing required \"width\" property.`\n          )\n        } else if (isNaN(widthInt)) {\n          throw new Error(\n            `Image with src \"${src}\" has invalid \"width\" property. Expected a numeric value in pixels but received \"${width}\".`\n          )\n        }\n        if (typeof heightInt === 'undefined') {\n          throw new Error(\n            `Image with src \"${src}\" is missing required \"height\" property.`\n          )\n        } else if (isNaN(heightInt)) {\n          throw new Error(\n            `Image with src \"${src}\" has invalid \"height\" property. Expected a numeric value in pixels but received \"${height}\".`\n          )\n        }\n        // eslint-disable-next-line no-control-regex\n        if (/^[\\x00-\\x20]/.test(src)) {\n          throw new Error(\n            `Image with src \"${src}\" cannot start with a space or control character. Use src.trimStart() to remove it or encodeURIComponent(src) to keep it.`\n          )\n        }\n        // eslint-disable-next-line no-control-regex\n        if (/[\\x00-\\x20]$/.test(src)) {\n          throw new Error(\n            `Image with src \"${src}\" cannot end with a space or control character. Use src.trimEnd() to remove it or encodeURIComponent(src) to keep it.`\n          )\n        }\n      }\n    }\n    if (!VALID_LOADING_VALUES.includes(loading)) {\n      throw new Error(\n        `Image with src \"${src}\" has invalid \"loading\" property. Provided \"${loading}\" should be one of ${VALID_LOADING_VALUES.map(\n          String\n        ).join(',')}.`\n      )\n    }\n    if (priority && loading === 'lazy') {\n      throw new Error(\n        `Image with src \"${src}\" has both \"priority\" and \"loading='lazy'\" properties. Only one should be used.`\n      )\n    }\n    if (preload && loading === 'lazy') {\n      throw new Error(\n        `Image with src \"${src}\" has both \"preload\" and \"loading='lazy'\" properties. Only one should be used.`\n      )\n    }\n    if (preload && priority) {\n      throw new Error(\n        `Image with src \"${src}\" has both \"preload\" and \"priority\" properties. Only \"preload\" should be used.`\n      )\n    }\n    if (\n      placeholder !== 'empty' &&\n      placeholder !== 'blur' &&\n      !placeholder.startsWith('data:image/')\n    ) {\n      throw new Error(\n        `Image with src \"${src}\" has invalid \"placeholder\" property \"${placeholder}\".`\n      )\n    }\n    if (placeholder !== 'empty') {\n      if (widthInt && heightInt && widthInt * heightInt < 1600) {\n        warnOnce(\n          `Image with src \"${src}\" is smaller than 40x40. Consider removing the \"placeholder\" property to improve performance.`\n        )\n      }\n    }\n    if (\n      qualityInt &&\n      config.qualities &&\n      !config.qualities.includes(qualityInt)\n    ) {\n      warnOnce(\n        `Image with src \"${src}\" is using quality \"${qualityInt}\" which is not configured in images.qualities [${config.qualities.join(', ')}]. Please update your config to [${[...config.qualities, qualityInt].sort().join(', ')}].` +\n          `\\nRead more: https://nextjs.org/docs/messages/next-image-unconfigured-qualities`\n      )\n    }\n    if (placeholder === 'blur' && !blurDataURL) {\n      const VALID_BLUR_EXT = ['jpeg', 'png', 'webp', 'avif'] // should match next-image-loader\n\n      throw new Error(\n        `Image with src \"${src}\" has \"placeholder='blur'\" property but is missing the \"blurDataURL\" property.\n        Possible solutions:\n          - Add a \"blurDataURL\" property, the contents should be a small Data URL to represent the image\n          - Change the \"src\" property to a static import with one of the supported file types: ${VALID_BLUR_EXT.join(\n            ','\n          )} (animated images not supported)\n          - Remove the \"placeholder\" property, effectively no blur effect\n        Read more: https://nextjs.org/docs/messages/placeholder-blur-data-url`\n      )\n    }\n    if ('ref' in rest) {\n      warnOnce(\n        `Image with src \"${src}\" is using unsupported \"ref\" property. Consider using the \"onLoad\" property instead.`\n      )\n    }\n\n    if (!unoptimized && !isDefaultLoader) {\n      const urlStr = loader({\n        config,\n        src,\n        width: widthInt || 400,\n        quality: qualityInt || 75,\n      })\n      let url: URL | undefined\n      try {\n        url = new URL(urlStr)\n      } catch (err) {}\n      if (urlStr === src || (url && url.pathname === src && !url.search)) {\n        warnOnce(\n          `Image with src \"${src}\" has a \"loader\" property that does not implement width. Please implement it or use the \"unoptimized\" property instead.` +\n            `\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader-width`\n        )\n      }\n    }\n\n    if (onLoadingComplete) {\n      warnOnce(\n        `Image with src \"${src}\" is using deprecated \"onLoadingComplete\" property. Please use the \"onLoad\" property instead.`\n      )\n    }\n\n    for (const [legacyKey, legacyValue] of Object.entries({\n      layout,\n      objectFit,\n      objectPosition,\n      lazyBoundary,\n      lazyRoot,\n    })) {\n      if (legacyValue) {\n        warnOnce(\n          `Image with src \"${src}\" has legacy prop \"${legacyKey}\". Did you forget to run the codemod?` +\n            `\\nRead more: https://nextjs.org/docs/messages/next-image-upgrade-to-13`\n        )\n      }\n    }\n\n    if (\n      typeof window !== 'undefined' &&\n      !perfObserver &&\n      window.PerformanceObserver\n    ) {\n      perfObserver = new PerformanceObserver((entryList) => {\n        for (const entry of entryList.getEntries()) {\n          // @ts-ignore - missing \"LargestContentfulPaint\" class with \"element\" prop\n          const imgSrc = entry?.element?.src || ''\n          const lcpImage = allImgs.get(imgSrc)\n          if (\n            lcpImage &&\n            lcpImage.loading === 'lazy' &&\n            lcpImage.placeholder === 'empty' &&\n            !lcpImage.src.startsWith('data:') &&\n            !lcpImage.src.startsWith('blob:')\n          ) {\n            // https://web.dev/lcp/#measure-lcp-in-javascript\n            warnOnce(\n              `Image with src \"${lcpImage.src}\" was detected as the Largest Contentful Paint (LCP). Please add the \\`loading=\"eager\"\\` property if this image is above the fold.` +\n                `\\nRead more: https://nextjs.org/docs/app/api-reference/components/image#loading`\n            )\n          }\n        }\n      })\n      try {\n        perfObserver.observe({\n          type: 'largest-contentful-paint',\n          buffered: true,\n        })\n      } catch (err) {\n        // Log error but don't crash the app\n        console.error(err)\n      }\n    }\n  }\n  const imgStyle = Object.assign(\n    fill\n      ? {\n          position: 'absolute',\n          height: '100%',\n          width: '100%',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          objectFit,\n          objectPosition,\n        }\n      : {},\n    showAltText ? {} : { color: 'transparent' },\n    style\n  )\n\n  const backgroundImage =\n    !blurComplete && placeholder !== 'empty'\n      ? placeholder === 'blur'\n        ? `url(\"data:image/svg+xml;charset=utf-8,${getImageBlurSvg({\n            widthInt,\n            heightInt,\n            blurWidth,\n            blurHeight,\n            blurDataURL: blurDataURL || '', // assume not undefined\n            objectFit: imgStyle.objectFit,\n          })}\")`\n        : `url(\"${placeholder}\")` // assume `data:image/`\n      : null\n\n  const backgroundSize = !INVALID_BACKGROUND_SIZE_VALUES.includes(\n    imgStyle.objectFit\n  )\n    ? imgStyle.objectFit\n    : imgStyle.objectFit === 'fill'\n      ? '100% 100%' // the background-size equivalent of `fill`\n      : 'cover'\n\n  let placeholderStyle: PlaceholderStyle = backgroundImage\n    ? {\n        backgroundSize,\n        backgroundPosition: imgStyle.objectPosition || '50% 50%',\n        backgroundRepeat: 'no-repeat',\n        backgroundImage,\n      }\n    : {}\n\n  if (process.env.NODE_ENV === 'development') {\n    if (\n      placeholderStyle.backgroundImage &&\n      placeholder === 'blur' &&\n      blurDataURL?.startsWith('/')\n    ) {\n      // During `next dev`, we don't want to generate blur placeholders with webpack\n      // because it can delay starting the dev server. Instead, `next-image-loader.js`\n      // will inline a special url to lazily generate the blur placeholder at request time.\n      placeholderStyle.backgroundImage = `url(\"${blurDataURL}\")`\n    }\n  }\n\n  const imgAttributes = generateImgAttrs({\n    config,\n    src,\n    unoptimized,\n    width: widthInt,\n    quality: qualityInt,\n    sizes,\n    loader,\n  })\n\n  const loadingFinal = isLazy ? 'lazy' : loading\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof window !== 'undefined') {\n      let fullUrl: URL\n      try {\n        fullUrl = new URL(imgAttributes.src)\n      } catch (e) {\n        fullUrl = new URL(imgAttributes.src, window.location.href)\n      }\n      allImgs.set(fullUrl.href, { src, loading: loadingFinal, placeholder })\n    }\n  }\n\n  const props: ImgProps = {\n    ...rest,\n    loading: loadingFinal,\n    fetchPriority,\n    width: widthInt,\n    height: heightInt,\n    decoding,\n    className,\n    style: { ...imgStyle, ...placeholderStyle },\n    sizes: imgAttributes.sizes,\n    srcSet: imgAttributes.srcSet,\n    src: overrideSrc || imgAttributes.src,\n  }\n  const meta = { unoptimized, preload: preload || priority, placeholder, fill }\n  return { props, meta }\n}\n","import type React from 'react'\nimport { Children, useEffect, useLayoutEffect, type JSX } from 'react'\n\ntype State = JSX.Element[] | undefined\n\nexport type SideEffectProps = {\n  reduceComponentsToState: (components: Array<React.ReactElement<any>>) => State\n  handleStateChange?: (state: State) => void\n  headManager: any\n  children: React.ReactNode\n}\n\nconst isServer = typeof window === 'undefined'\nconst useClientOnlyLayoutEffect = isServer ? () => {} : useLayoutEffect\nconst useClientOnlyEffect = isServer ? () => {} : useEffect\n\nexport default function SideEffect(props: SideEffectProps) {\n  const { headManager, reduceComponentsToState } = props\n\n  function emitChange() {\n    if (headManager && headManager.mountedInstances) {\n      const headElements = Children.toArray(\n        Array.from(headManager.mountedInstances as Set<React.ReactNode>).filter(\n          Boolean\n        )\n      ) as React.ReactElement[]\n      headManager.updateHead(reduceComponentsToState(headElements))\n    }\n  }\n\n  if (isServer) {\n    headManager?.mountedInstances?.add(props.children)\n    emitChange()\n  }\n\n  useClientOnlyLayoutEffect(() => {\n    headManager?.mountedInstances?.add(props.children)\n    return () => {\n      headManager?.mountedInstances?.delete(props.children)\n    }\n  })\n\n  // We need to call `updateHead` method whenever the `SideEffect` is trigger in all\n  // life-cycles: mount, update, unmount. However, if there are multiple `SideEffect`s\n  // being rendered, we only trigger the method from the last one.\n  // This is ensured by keeping the last unflushed `updateHead` in the `_pendingUpdate`\n  // singleton in the layout effect pass, and actually trigger it in the effect pass.\n  useClientOnlyLayoutEffect(() => {\n    if (headManager) {\n      headManager._pendingUpdate = emitChange\n    }\n    return () => {\n      if (headManager) {\n        headManager._pendingUpdate = emitChange\n      }\n    }\n  })\n\n  useClientOnlyEffect(() => {\n    if (headManager && headManager._pendingUpdate) {\n      headManager._pendingUpdate()\n      headManager._pendingUpdate = null\n    }\n    return () => {\n      if (headManager && headManager._pendingUpdate) {\n        headManager._pendingUpdate()\n        headManager._pendingUpdate = null\n      }\n    }\n  })\n\n  return null\n}\n","module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['contexts'].HeadManagerContext\n","'use client'\n\nimport React, { useContext, type JSX } from 'react'\nimport Effect from './side-effect'\nimport { HeadManagerContext } from './head-manager-context.shared-runtime'\nimport { warnOnce } from './utils/warn-once'\n\nexport function defaultHead(): JSX.Element[] {\n  const head = [\n    <meta charSet=\"utf-8\" key=\"charset\" />,\n    <meta name=\"viewport\" content=\"width=device-width\" key=\"viewport\" />,\n  ]\n  return head\n}\n\nfunction onlyReactElement(\n  list: Array<React.ReactElement<any>>,\n  child: React.ReactElement | number | string\n): Array<React.ReactElement<any>> {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list\n  }\n  // Adds support for React.Fragment\n  if (child.type === React.Fragment) {\n    return list.concat(\n      // @ts-expect-error @types/react does not remove fragments but this could also return ReactPortal[]\n      React.Children.toArray(child.props.children).reduce(\n        // @ts-expect-error @types/react does not remove fragments but this could also return ReactPortal[]\n        (\n          fragmentList: Array<React.ReactElement<any>>,\n          fragmentChild: React.ReactElement | number | string\n        ): Array<React.ReactElement<any>> => {\n          if (\n            typeof fragmentChild === 'string' ||\n            typeof fragmentChild === 'number'\n          ) {\n            return fragmentList\n          }\n          return fragmentList.concat(fragmentChild)\n        },\n        []\n      )\n    )\n  }\n  return list.concat(child)\n}\n\nconst METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp']\n\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\nfunction unique() {\n  const keys = new Set()\n  const tags = new Set()\n  const metaTypes = new Set()\n  const metaCategories: { [metatype: string]: Set<string> } = {}\n\n  return (h: React.ReactElement<any>) => {\n    let isUnique = true\n    let hasKey = false\n\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      hasKey = true\n      const key = h.key.slice(h.key.indexOf('$') + 1)\n      if (keys.has(key)) {\n        isUnique = false\n      } else {\n        keys.add(key)\n      }\n    }\n\n    // eslint-disable-next-line default-case\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          isUnique = false\n        } else {\n          tags.add(h.type)\n        }\n        break\n      case 'meta':\n        for (let i = 0, len = METATYPES.length; i < len; i++) {\n          const metatype = METATYPES[i]\n          if (!h.props.hasOwnProperty(metatype)) continue\n\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              isUnique = false\n            } else {\n              metaTypes.add(metatype)\n            }\n          } else {\n            const category = h.props[metatype]\n            const categories = metaCategories[metatype] || new Set()\n            if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\n              isUnique = false\n            } else {\n              categories.add(category)\n              metaCategories[metatype] = categories\n            }\n          }\n        }\n        break\n    }\n\n    return isUnique\n  }\n}\n\n/**\n *\n * @param headChildrenElements List of children of <Head>\n */\nfunction reduceComponents(\n  headChildrenElements: Array<React.ReactElement<any>>\n) {\n  return headChildrenElements\n    .reduce(onlyReactElement, [])\n    .reverse()\n    .concat(defaultHead().reverse())\n    .filter(unique())\n    .reverse()\n    .map((c: React.ReactElement<any>, i: number) => {\n      const key = c.key || i\n      if (process.env.NODE_ENV === 'development') {\n        // omit JSON-LD structured data snippets from the warning\n        if (c.type === 'script' && c.props['type'] !== 'application/ld+json') {\n          const srcMessage = c.props['src']\n            ? `<script> tag with src=\"${c.props['src']}\"`\n            : `inline <script>`\n          warnOnce(\n            `Do not add <script> tags using next/head (see ${srcMessage}). Use next/script instead. \\nSee more info here: https://nextjs.org/docs/messages/no-script-tags-in-head-component`\n          )\n        } else if (c.type === 'link' && c.props['rel'] === 'stylesheet') {\n          warnOnce(\n            `Do not add stylesheets using next/head (see <link rel=\"stylesheet\"> tag with href=\"${c.props['href']}\"). Use Document instead. \\nSee more info here: https://nextjs.org/docs/messages/no-stylesheets-in-head-component`\n          )\n        }\n      }\n      return React.cloneElement(c, { key })\n    })\n}\n\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */\nfunction Head({ children }: { children: React.ReactNode }) {\n  const headManager = useContext(HeadManagerContext)\n  return (\n    <Effect\n      reduceComponentsToState={reduceComponents}\n      headManager={headManager}\n    >\n      {children}\n    </Effect>\n  )\n}\n\nexport default Head\n","module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['contexts'].ImageConfigContext\n","module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['contexts'].RouterContext\n","import type { NextConfig } from '../../server/config-shared'\n\n/**\n * Find the closest matching `quality` in the list of `config.qualities`\n * @param quality the quality prop passed to the image component\n * @param config the \"images\" configuration from next.config.js\n * @returns the closest matching quality value\n */\nexport function findClosestQuality(\n  quality: number | undefined,\n  config: NextConfig['images'] | undefined\n): number {\n  const q = quality || 75\n  if (!config?.qualities?.length) {\n    return q\n  }\n  return config.qualities.reduce(\n    (prev, cur) => (Math.abs(cur - q) < Math.abs(prev - q) ? cur : prev),\n    0\n  )\n}\n","import type { ImageLoaderPropsWithConfig } from './image-config'\nimport { findClosestQuality } from './find-closest-quality'\n\nfunction defaultLoader({\n  config,\n  src,\n  width,\n  quality,\n}: ImageLoaderPropsWithConfig): string {\n  if (\n    src.startsWith('/') &&\n    src.includes('?') &&\n    config.localPatterns?.length === 1 &&\n    config.localPatterns[0].pathname === '**' &&\n    config.localPatterns[0].search === ''\n  ) {\n    throw new Error(\n      `Image with src \"${src}\" is using a query string which is not configured in images.localPatterns.` +\n        `\\nRead more: https://nextjs.org/docs/messages/next-image-unconfigured-localpatterns`\n    )\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    const missingValues = []\n\n    // these should always be provided but make sure they are\n    if (!src) missingValues.push('src')\n    if (!width) missingValues.push('width')\n\n    if (missingValues.length > 0) {\n      throw new Error(\n        `Next Image Optimization requires ${missingValues.join(\n          ', '\n        )} to be provided. Make sure you pass them as props to the \\`next/image\\` component. Received: ${JSON.stringify(\n          { src, width, quality }\n        )}`\n      )\n    }\n\n    if (src.startsWith('//')) {\n      throw new Error(\n        `Failed to parse src \"${src}\" on \\`next/image\\`, protocol-relative URL (//) must be changed to an absolute URL (http:// or https://)`\n      )\n    }\n\n    if (src.startsWith('/') && config.localPatterns) {\n      if (\n        process.env.NODE_ENV !== 'test' &&\n        // micromatch isn't compatible with edge runtime\n        process.env.NEXT_RUNTIME !== 'edge'\n      ) {\n        // We use dynamic require because this should only error in development\n        const { hasLocalMatch } =\n          require('./match-local-pattern') as typeof import('./match-local-pattern')\n        if (!hasLocalMatch(config.localPatterns, src)) {\n          throw new Error(\n            `Invalid src prop (${src}) on \\`next/image\\` does not match \\`images.localPatterns\\` configured in your \\`next.config.js\\`\\n` +\n              `See more info: https://nextjs.org/docs/messages/next-image-unconfigured-localpatterns`\n          )\n        }\n      }\n    }\n\n    if (!src.startsWith('/') && (config.domains || config.remotePatterns)) {\n      let parsedSrc: URL\n      try {\n        parsedSrc = new URL(src)\n      } catch (err) {\n        console.error(err)\n        throw new Error(\n          `Failed to parse src \"${src}\" on \\`next/image\\`, if using relative image it must start with a leading slash \"/\" or be an absolute URL (http:// or https://)`\n        )\n      }\n\n      if (\n        process.env.NODE_ENV !== 'test' &&\n        // micromatch isn't compatible with edge runtime\n        process.env.NEXT_RUNTIME !== 'edge'\n      ) {\n        // We use dynamic require because this should only error in development\n        const { hasRemoteMatch } =\n          require('./match-remote-pattern') as typeof import('./match-remote-pattern')\n        if (\n          !hasRemoteMatch(config.domains!, config.remotePatterns!, parsedSrc)\n        ) {\n          throw new Error(\n            `Invalid src prop (${src}) on \\`next/image\\`, hostname \"${parsedSrc.hostname}\" is not configured under images in your \\`next.config.js\\`\\n` +\n              `See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host`\n          )\n        }\n      }\n    }\n  }\n\n  const q = findClosestQuality(quality, config)\n\n  return `${config.path}?url=${encodeURIComponent(src)}&w=${width}&q=${q}${\n    src.startsWith('/_next/static/media/') && process.env.NEXT_DEPLOYMENT_ID\n      ? `&dpl=${process.env.NEXT_DEPLOYMENT_ID}`\n      : ''\n  }`\n}\n\n// We use this to determine if the import is the default loader\n// or a custom loader defined by the user in next.config.js\ndefaultLoader.__next_img_default = true\n\nexport default defaultLoader\n","import { useCallback, useRef, type Ref } from 'react'\n\n// This is a compatibility hook to support React 18 and 19 refs.\n// In 19, a cleanup function from refs may be returned.\n// In 18, returning a cleanup function creates a warning.\n// Since we take userspace refs, we don't know ahead of time if a cleanup function will be returned.\n// This implements cleanup functions with the old behavior in 18.\n// We know refs are always called alternating with `null` and then `T`.\n// So a call with `null` means we need to call the previous cleanup functions.\nexport function useMergedRef<TElement>(\n  refA: Ref<TElement>,\n  refB: Ref<TElement>\n): Ref<TElement> {\n  const cleanupA = useRef<(() => void) | null>(null)\n  const cleanupB = useRef<(() => void) | null>(null)\n\n  // NOTE: In theory, we could skip the wrapping if only one of the refs is non-null.\n  // (this happens often if the user doesn't pass a ref to Link/Form/Image)\n  // But this can cause us to leak a cleanup-ref into user code (previously via `<Link legacyBehavior>`),\n  // and the user might pass that ref into ref-merging library that doesn't support cleanup refs\n  // (because it hasn't been updated for React 19)\n  // which can then cause things to blow up, because a cleanup-returning ref gets called with `null`.\n  // So in practice, it's safer to be defensive and always wrap the ref, even on React 19.\n  return useCallback(\n    (current: TElement | null): void => {\n      if (current === null) {\n        const cleanupFnA = cleanupA.current\n        if (cleanupFnA) {\n          cleanupA.current = null\n          cleanupFnA()\n        }\n        const cleanupFnB = cleanupB.current\n        if (cleanupFnB) {\n          cleanupB.current = null\n          cleanupFnB()\n        }\n      } else {\n        if (refA) {\n          cleanupA.current = applyRef(refA, current)\n        }\n        if (refB) {\n          cleanupB.current = applyRef(refB, current)\n        }\n      }\n    },\n    [refA, refB]\n  )\n}\n\nfunction applyRef<TElement>(\n  refA: NonNullable<Ref<TElement>>,\n  current: TElement\n) {\n  if (typeof refA === 'function') {\n    const cleanup = refA(current)\n    if (typeof cleanup === 'function') {\n      return cleanup\n    } else {\n      return () => refA(null)\n    }\n  } else {\n    refA.current = current\n    return () => {\n      refA.current = null\n    }\n  }\n}\n","'use client'\n\nimport React, {\n  useRef,\n  useEffect,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n  forwardRef,\n  use,\n} from 'react'\nimport ReactDOM from 'react-dom'\nimport Head from '../shared/lib/head'\nimport { getImgProps } from '../shared/lib/get-img-props'\nimport type {\n  ImageProps,\n  ImgProps,\n  OnLoad,\n  OnLoadingComplete,\n  PlaceholderValue,\n} from '../shared/lib/get-img-props'\nimport type {\n  ImageConfigComplete,\n  ImageLoaderProps,\n} from '../shared/lib/image-config'\nimport { imageConfigDefault } from '../shared/lib/image-config'\nimport { ImageConfigContext } from '../shared/lib/image-config-context.shared-runtime'\nimport { warnOnce } from '../shared/lib/utils/warn-once'\nimport { RouterContext } from '../shared/lib/router-context.shared-runtime'\n\n// This is replaced by webpack alias\nimport defaultLoader from 'next/dist/shared/lib/image-loader'\nimport { useMergedRef } from './use-merged-ref'\n\n// This is replaced by webpack define plugin\nconst configEnv = process.env.__NEXT_IMAGE_OPTS as any as ImageConfigComplete\n\nif (typeof window === 'undefined') {\n  ;(globalThis as any).__NEXT_IMAGE_IMPORTED = true\n}\n\nexport type { ImageLoaderProps }\nexport type ImageLoader = (p: ImageLoaderProps) => string\n\ntype ImgElementWithDataProp = HTMLImageElement & {\n  'data-loaded-src': string | undefined\n}\n\ntype ImageElementProps = ImgProps & {\n  unoptimized: boolean\n  placeholder: PlaceholderValue\n  onLoadRef: React.MutableRefObject<OnLoad | undefined>\n  onLoadingCompleteRef: React.MutableRefObject<OnLoadingComplete | undefined>\n  setBlurComplete: (b: boolean) => void\n  setShowAltText: (b: boolean) => void\n  sizesInput: string | undefined\n}\n\n// See https://stackoverflow.com/q/39777833/266535 for why we use this ref\n// handler instead of the img's onLoad attribute.\nfunction handleLoading(\n  img: ImgElementWithDataProp,\n  placeholder: PlaceholderValue,\n  onLoadRef: React.MutableRefObject<OnLoad | undefined>,\n  onLoadingCompleteRef: React.MutableRefObject<OnLoadingComplete | undefined>,\n  setBlurComplete: (b: boolean) => void,\n  unoptimized: boolean,\n  sizesInput: string | undefined\n) {\n  const src = img?.src\n  if (!img || img['data-loaded-src'] === src) {\n    return\n  }\n  img['data-loaded-src'] = src\n  const p = 'decode' in img ? img.decode() : Promise.resolve()\n  p.catch(() => {}).then(() => {\n    if (!img.parentElement || !img.isConnected) {\n      // Exit early in case of race condition:\n      // - onload() is called\n      // - decode() is called but incomplete\n      // - unmount is called\n      // - decode() completes\n      return\n    }\n    if (placeholder !== 'empty') {\n      setBlurComplete(true)\n    }\n    if (onLoadRef?.current) {\n      // Since we don't have the SyntheticEvent here,\n      // we must create one with the same shape.\n      // See https://reactjs.org/docs/events.html\n      const event = new Event('load')\n      Object.defineProperty(event, 'target', { writable: false, value: img })\n      let prevented = false\n      let stopped = false\n      onLoadRef.current({\n        ...event,\n        nativeEvent: event,\n        currentTarget: img,\n        target: img,\n        isDefaultPrevented: () => prevented,\n        isPropagationStopped: () => stopped,\n        persist: () => {},\n        preventDefault: () => {\n          prevented = true\n          event.preventDefault()\n        },\n        stopPropagation: () => {\n          stopped = true\n          event.stopPropagation()\n        },\n      })\n    }\n    if (onLoadingCompleteRef?.current) {\n      onLoadingCompleteRef.current(img)\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      const origSrc = new URL(src, 'http://n').searchParams.get('url') || src\n      if (img.getAttribute('data-nimg') === 'fill') {\n        if (!unoptimized && (!sizesInput || sizesInput === '100vw')) {\n          let widthViewportRatio =\n            img.getBoundingClientRect().width / window.innerWidth\n          if (widthViewportRatio < 0.6) {\n            if (sizesInput === '100vw') {\n              warnOnce(\n                `Image with src \"${origSrc}\" has \"fill\" prop and \"sizes\" prop of \"100vw\", but image is not rendered at full viewport width. Please adjust \"sizes\" to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes`\n              )\n            } else {\n              warnOnce(\n                `Image with src \"${origSrc}\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes`\n              )\n            }\n          }\n        }\n        if (img.parentElement) {\n          const { position } = window.getComputedStyle(img.parentElement)\n          const valid = ['absolute', 'fixed', 'relative']\n          if (!valid.includes(position)) {\n            warnOnce(\n              `Image with src \"${origSrc}\" has \"fill\" and parent element with invalid \"position\". Provided \"${position}\" should be one of ${valid\n                .map(String)\n                .join(',')}.`\n            )\n          }\n        }\n        if (img.height === 0) {\n          warnOnce(\n            `Image with src \"${origSrc}\" has \"fill\" and a height value of 0. This is likely because the parent element of the image has not been styled to have a set height.`\n          )\n        }\n      }\n\n      const heightModified =\n        img.height.toString() !== img.getAttribute('height')\n      const widthModified = img.width.toString() !== img.getAttribute('width')\n      if (\n        (heightModified && !widthModified) ||\n        (!heightModified && widthModified)\n      ) {\n        warnOnce(\n          `Image with src \"${origSrc}\" has either width or height modified, but not the other. If you use CSS to change the size of your image, also include the styles 'width: \"auto\"' or 'height: \"auto\"' to maintain the aspect ratio.`\n        )\n      }\n    }\n  })\n}\n\nfunction getDynamicProps(\n  fetchPriority?: string\n): Record<string, string | undefined> {\n  if (Boolean(use)) {\n    // In React 19.0.0 or newer, we must use camelCase\n    // prop to avoid \"Warning: Invalid DOM property\".\n    // See https://github.com/facebook/react/pull/25927\n    return { fetchPriority }\n  }\n  // In React 18.2.0 or older, we must use lowercase prop\n  // to avoid \"Warning: Invalid DOM property\".\n  return { fetchpriority: fetchPriority }\n}\n\nconst ImageElement = forwardRef<HTMLImageElement | null, ImageElementProps>(\n  (\n    {\n      src,\n      srcSet,\n      sizes,\n      height,\n      width,\n      decoding,\n      className,\n      style,\n      fetchPriority,\n      placeholder,\n      loading,\n      unoptimized,\n      fill,\n      onLoadRef,\n      onLoadingCompleteRef,\n      setBlurComplete,\n      setShowAltText,\n      sizesInput,\n      onLoad,\n      onError,\n      ...rest\n    },\n    forwardedRef\n  ) => {\n    const ownRef = useCallback(\n      (img: ImgElementWithDataProp | null) => {\n        if (!img) {\n          return\n        }\n        if (onError) {\n          // If the image has an error before react hydrates, then the error is lost.\n          // The workaround is to wait until the image is mounted which is after hydration,\n          // then we set the src again to trigger the error handler (if there was an error).\n          // eslint-disable-next-line no-self-assign\n          img.src = img.src\n        }\n        if (process.env.NODE_ENV !== 'production') {\n          if (!src) {\n            console.error(`Image is missing required \"src\" property:`, img)\n          }\n          if (img.getAttribute('alt') === null) {\n            console.error(\n              `Image is missing required \"alt\" property. Please add Alternative Text to describe the image for screen readers and search engines.`\n            )\n          }\n        }\n        if (img.complete) {\n          handleLoading(\n            img,\n            placeholder,\n            onLoadRef,\n            onLoadingCompleteRef,\n            setBlurComplete,\n            unoptimized,\n            sizesInput\n          )\n        }\n      },\n      [\n        src,\n        placeholder,\n        onLoadRef,\n        onLoadingCompleteRef,\n        setBlurComplete,\n        onError,\n        unoptimized,\n        sizesInput,\n      ]\n    )\n\n    const ref = useMergedRef(forwardedRef, ownRef)\n\n    return (\n      <img\n        {...rest}\n        {...getDynamicProps(fetchPriority)}\n        // It's intended to keep `loading` before `src` because React updates\n        // props in order which causes Safari/Firefox to not lazy load properly.\n        // See https://github.com/facebook/react/issues/25883\n        loading={loading}\n        width={width}\n        height={height}\n        decoding={decoding}\n        data-nimg={fill ? 'fill' : '1'}\n        className={className}\n        style={style}\n        // It's intended to keep `src` the last attribute because React updates\n        // attributes in order. If we keep `src` the first one, Safari will\n        // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n        // updated by React. That causes multiple unnecessary requests if `srcSet`\n        // and `sizes` are defined.\n        // This bug cannot be reproduced in Chrome or Firefox.\n        sizes={sizes}\n        srcSet={srcSet}\n        src={src}\n        ref={ref}\n        onLoad={(event) => {\n          const img = event.currentTarget as ImgElementWithDataProp\n          handleLoading(\n            img,\n            placeholder,\n            onLoadRef,\n            onLoadingCompleteRef,\n            setBlurComplete,\n            unoptimized,\n            sizesInput\n          )\n        }}\n        onError={(event) => {\n          // if the real image fails to load, this will ensure \"alt\" is visible\n          setShowAltText(true)\n          if (placeholder !== 'empty') {\n            // If the real image fails to load, this will still remove the placeholder.\n            setBlurComplete(true)\n          }\n          if (onError) {\n            onError(event)\n          }\n        }}\n      />\n    )\n  }\n)\n\nfunction ImagePreload({\n  isAppRouter,\n  imgAttributes,\n}: {\n  isAppRouter: boolean\n  imgAttributes: ImgProps\n}) {\n  const opts: ReactDOM.PreloadOptions = {\n    as: 'image',\n    imageSrcSet: imgAttributes.srcSet,\n    imageSizes: imgAttributes.sizes,\n    crossOrigin: imgAttributes.crossOrigin,\n    referrerPolicy: imgAttributes.referrerPolicy,\n    ...getDynamicProps(imgAttributes.fetchPriority),\n  }\n\n  if (isAppRouter && ReactDOM.preload) {\n    ReactDOM.preload(imgAttributes.src, opts)\n    return null\n  }\n\n  return (\n    <Head>\n      <link\n        key={\n          '__nimg-' +\n          imgAttributes.src +\n          imgAttributes.srcSet +\n          imgAttributes.sizes\n        }\n        rel=\"preload\"\n        // Note how we omit the `href` attribute, as it would only be relevant\n        // for browsers that do not support `imagesrcset`, and in those cases\n        // it would cause the incorrect image to be preloaded.\n        //\n        // https://html.spec.whatwg.org/multipage/semantics.html#attr-link-imagesrcset\n        href={imgAttributes.srcSet ? undefined : imgAttributes.src}\n        {...opts}\n      />\n    </Head>\n  )\n}\n\n/**\n * The `Image` component is used to optimize images.\n *\n * Read more: [Next.js docs: `Image`](https://nextjs.org/docs/app/api-reference/components/image)\n */\nexport const Image = forwardRef<HTMLImageElement | null, ImageProps>(\n  (props, forwardedRef) => {\n    const pagesRouter = useContext(RouterContext)\n    // We're in the app directory if there is no pages router.\n    const isAppRouter = !pagesRouter\n\n    const configContext = useContext(ImageConfigContext)\n    const config = useMemo(() => {\n      const c = configEnv || configContext || imageConfigDefault\n\n      const allSizes = [...c.deviceSizes, ...c.imageSizes].sort((a, b) => a - b)\n      const deviceSizes = c.deviceSizes.sort((a, b) => a - b)\n      const qualities = c.qualities?.sort((a, b) => a - b)\n      return {\n        ...c,\n        allSizes,\n        deviceSizes,\n        qualities,\n        // During the SSR, configEnv (__NEXT_IMAGE_OPTS) does not include\n        // security sensitive configs like `localPatterns`, which is needed\n        // during the server render to ensure it's validated. Therefore use\n        // configContext, which holds the config from the server for validation.\n        localPatterns:\n          typeof window === 'undefined'\n            ? configContext?.localPatterns\n            : c.localPatterns,\n      }\n    }, [configContext])\n\n    const { onLoad, onLoadingComplete } = props\n    const onLoadRef = useRef(onLoad)\n\n    useEffect(() => {\n      onLoadRef.current = onLoad\n    }, [onLoad])\n\n    const onLoadingCompleteRef = useRef(onLoadingComplete)\n\n    useEffect(() => {\n      onLoadingCompleteRef.current = onLoadingComplete\n    }, [onLoadingComplete])\n\n    const [blurComplete, setBlurComplete] = useState(false)\n    const [showAltText, setShowAltText] = useState(false)\n    const { props: imgAttributes, meta: imgMeta } = getImgProps(props, {\n      defaultLoader,\n      imgConf: config,\n      blurComplete,\n      showAltText,\n    })\n\n    return (\n      <>\n        {\n          <ImageElement\n            {...imgAttributes}\n            unoptimized={imgMeta.unoptimized}\n            placeholder={imgMeta.placeholder}\n            fill={imgMeta.fill}\n            onLoadRef={onLoadRef}\n            onLoadingCompleteRef={onLoadingCompleteRef}\n            setBlurComplete={setBlurComplete}\n            setShowAltText={setShowAltText}\n            sizesInput={props.sizes}\n            ref={forwardedRef}\n          />\n        }\n        {imgMeta.preload ? (\n          <ImagePreload\n            isAppRouter={isAppRouter}\n            imgAttributes={imgAttributes}\n          />\n        ) : null}\n      </>\n    )\n  }\n)\n","import type { ImageConfigComplete, ImageLoaderProps } from './image-config'\nimport type { ImageProps, ImageLoader, StaticImageData } from './get-img-props'\n\nimport { getImgProps } from './get-img-props'\nimport { Image } from '../../client/image-component'\n\n// This is replaced by webpack alias\nimport defaultLoader from 'next/dist/shared/lib/image-loader'\n\n/**\n * For more advanced use cases, you can call `getImageProps()`\n * to get the props that would be passed to the underlying `<img>` element,\n * and instead pass to them to another component, style, canvas, etc.\n *\n * Read more: [Next.js docs: `getImageProps`](https://nextjs.org/docs/app/api-reference/components/image#getimageprops)\n */\nexport function getImageProps(imgProps: ImageProps) {\n  const { props } = getImgProps(imgProps, {\n    defaultLoader,\n    // This is replaced by webpack define plugin\n    imgConf: process.env.__NEXT_IMAGE_OPTS as any as ImageConfigComplete,\n  })\n  // Normally we don't care about undefined props because we pass to JSX,\n  // but this exported function could be used by the end user for anything\n  // so we delete undefined props to clean it up a little.\n  for (const [key, value] of Object.entries(props)) {\n    if (value === undefined) {\n      delete props[key as keyof typeof props]\n    }\n  }\n  return { props }\n}\n\nexport default Image\n\nexport type { ImageProps, ImageLoaderProps, ImageLoader, StaticImageData }\n","module.exports = require('./dist/shared/lib/image-external')\n","import type { ParsedUrlQuery } from 'querystring'\n\nexport function searchParamsToUrlQuery(\n  searchParams: URLSearchParams\n): ParsedUrlQuery {\n  const query: ParsedUrlQuery = {}\n  for (const [key, value] of searchParams.entries()) {\n    const existing = query[key]\n    if (typeof existing === 'undefined') {\n      query[key] = value\n    } else if (Array.isArray(existing)) {\n      existing.push(value)\n    } else {\n      query[key] = [existing, value]\n    }\n  }\n  return query\n}\n\nfunction stringifyUrlQueryParam(param: unknown): string {\n  if (typeof param === 'string') {\n    return param\n  }\n\n  if (\n    (typeof param === 'number' && !isNaN(param)) ||\n    typeof param === 'boolean'\n  ) {\n    return String(param)\n  } else {\n    return ''\n  }\n}\n\nexport function urlQueryToSearchParams(query: ParsedUrlQuery): URLSearchParams {\n  const searchParams = new URLSearchParams()\n  for (const [key, value] of Object.entries(query)) {\n    if (Array.isArray(value)) {\n      for (const item of value) {\n        searchParams.append(key, stringifyUrlQueryParam(item))\n      }\n    } else {\n      searchParams.set(key, stringifyUrlQueryParam(value))\n    }\n  }\n  return searchParams\n}\n\nexport function assign(\n  target: URLSearchParams,\n  ...searchParamsList: URLSearchParams[]\n): URLSearchParams {\n  for (const searchParams of searchParamsList) {\n    for (const key of searchParams.keys()) {\n      target.delete(key)\n    }\n\n    for (const [key, value] of searchParams.entries()) {\n      target.append(key, value)\n    }\n  }\n\n  return target\n}\n","// Format function modified from nodejs\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport type { UrlObject } from 'url'\nimport type { ParsedUrlQuery } from 'querystring'\nimport * as querystring from './querystring'\n\nconst slashedProtocols = /https?|ftp|gopher|file/\n\nexport function formatUrl(urlObj: UrlObject) {\n  let { auth, hostname } = urlObj\n  let protocol = urlObj.protocol || ''\n  let pathname = urlObj.pathname || ''\n  let hash = urlObj.hash || ''\n  let query = urlObj.query || ''\n  let host: string | false = false\n\n  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : ''\n\n  if (urlObj.host) {\n    host = auth + urlObj.host\n  } else if (hostname) {\n    host = auth + (~hostname.indexOf(':') ? `[${hostname}]` : hostname)\n    if (urlObj.port) {\n      host += ':' + urlObj.port\n    }\n  }\n\n  if (query && typeof query === 'object') {\n    query = String(querystring.urlQueryToSearchParams(query as ParsedUrlQuery))\n  }\n\n  let search = urlObj.search || (query && `?${query}`) || ''\n\n  if (protocol && !protocol.endsWith(':')) protocol += ':'\n\n  if (\n    urlObj.slashes ||\n    ((!protocol || slashedProtocols.test(protocol)) && host !== false)\n  ) {\n    host = '//' + (host || '')\n    if (pathname && pathname[0] !== '/') pathname = '/' + pathname\n  } else if (!host) {\n    host = ''\n  }\n\n  if (hash && hash[0] !== '#') hash = '#' + hash\n  if (search && search[0] !== '?') search = '?' + search\n\n  pathname = pathname.replace(/[?#]/g, encodeURIComponent)\n  search = search.replace('#', '%23')\n\n  return `${protocol}${host}${pathname}${search}${hash}`\n}\n\nexport const urlObjectKeys = [\n  'auth',\n  'hash',\n  'host',\n  'hostname',\n  'href',\n  'path',\n  'pathname',\n  'port',\n  'protocol',\n  'query',\n  'search',\n  'slashes',\n]\n\nexport function formatWithValidation(url: UrlObject): string {\n  if (process.env.NODE_ENV === 'development') {\n    if (url !== null && typeof url === 'object') {\n      Object.keys(url).forEach((key) => {\n        if (!urlObjectKeys.includes(key)) {\n          console.warn(\n            `Unknown key passed via urlObject into url.format: ${key}`\n          )\n        }\n      })\n    }\n  }\n\n  return formatUrl(url)\n}\n","import type { HtmlProps } from './html-context.shared-runtime'\nimport type { ComponentType, JSX } from 'react'\nimport type { DomainLocale } from '../../server/config'\nimport type { Env } from '@next/env'\nimport type { IncomingMessage, ServerResponse } from 'http'\nimport type { NextRouter } from './router/router'\nimport type { ParsedUrlQuery } from 'querystring'\nimport type { PreviewData } from '../../types'\nimport type { COMPILER_NAMES } from './constants'\nimport type fs from 'fs'\n\nexport type NextComponentType<\n  Context extends BaseContext = NextPageContext,\n  InitialProps = {},\n  Props = {},\n> = ComponentType<Props> & {\n  /**\n   * Used for initial page load data population. Data returned from `getInitialProps` is serialized when server rendered.\n   * Make sure to return plain `Object` without using `Date`, `Map`, `Set`.\n   * @param context Context of `page`\n   */\n  getInitialProps?(context: Context): InitialProps | Promise<InitialProps>\n}\n\nexport type DocumentType = NextComponentType<\n  DocumentContext,\n  DocumentInitialProps,\n  DocumentProps\n>\n\nexport type AppType<P = {}> = NextComponentType<\n  AppContextType,\n  P,\n  AppPropsType<any, P>\n>\n\nexport type AppTreeType = ComponentType<\n  AppInitialProps & { [name: string]: any }\n>\n\n/**\n * Web vitals provided to _app.reportWebVitals by Core Web Vitals plugin developed by Google Chrome team.\n * https://nextjs.org/blog/next-9-4#integrated-web-vitals-reporting\n */\nexport const WEB_VITALS = ['CLS', 'FCP', 'FID', 'INP', 'LCP', 'TTFB'] as const\nexport type NextWebVitalsMetric = {\n  id: string\n  startTime: number\n  value: number\n  attribution?: { [key: string]: unknown }\n} & (\n  | {\n      label: 'web-vital'\n      name: (typeof WEB_VITALS)[number]\n    }\n  | {\n      label: 'custom'\n      name:\n        | 'Next.js-hydration'\n        | 'Next.js-route-change-to-render'\n        | 'Next.js-render'\n    }\n)\n\nexport type Enhancer<C> = (Component: C) => C\n\nexport type ComponentsEnhancer =\n  | {\n      enhanceApp?: Enhancer<AppType>\n      enhanceComponent?: Enhancer<NextComponentType>\n    }\n  | Enhancer<NextComponentType>\n\nexport type RenderPageResult = {\n  html: string\n  head?: Array<JSX.Element | null>\n}\n\nexport type RenderPage = (\n  options?: ComponentsEnhancer\n) => DocumentInitialProps | Promise<DocumentInitialProps>\n\nexport type BaseContext = {\n  res?: ServerResponse\n  [k: string]: any\n}\n\nexport type NEXT_DATA = {\n  props: Record<string, any>\n  page: string\n  query: ParsedUrlQuery\n  buildId: string\n  assetPrefix?: string\n  nextExport?: boolean\n  autoExport?: boolean\n  isFallback?: boolean\n  isExperimentalCompile?: boolean\n  dynamicIds?: (string | number)[]\n  err?: Error & {\n    statusCode?: number\n    source?: typeof COMPILER_NAMES.server | typeof COMPILER_NAMES.edgeServer\n  }\n  gsp?: boolean\n  gssp?: boolean\n  customServer?: boolean\n  gip?: boolean\n  appGip?: boolean\n  locale?: string\n  locales?: readonly string[]\n  defaultLocale?: string\n  domainLocales?: readonly DomainLocale[]\n  scriptLoader?: any[]\n  isPreview?: boolean\n  notFoundSrcPage?: string\n}\n\n/**\n * `Next` context\n */\nexport interface NextPageContext {\n  /**\n   * Error object if encountered during rendering\n   */\n  err?: (Error & { statusCode?: number }) | null\n  /**\n   * `HTTP` request object.\n   */\n  req?: IncomingMessage\n  /**\n   * `HTTP` response object.\n   */\n  res?: ServerResponse\n  /**\n   * Path section of `URL`.\n   */\n  pathname: string\n  /**\n   * Query string section of `URL` parsed as an object.\n   */\n  query: ParsedUrlQuery\n  /**\n   * `String` of the actual path including query.\n   */\n  asPath?: string\n  /**\n   * The currently active locale\n   */\n  locale?: string\n  /**\n   * All configured locales\n   */\n  locales?: readonly string[]\n  /**\n   * The configured default locale\n   */\n  defaultLocale?: string\n  /**\n   * `Component` the tree of the App to use if needing to render separately\n   */\n  AppTree: AppTreeType\n}\n\nexport type AppContextType<Router extends NextRouter = NextRouter> = {\n  Component: NextComponentType<NextPageContext>\n  AppTree: AppTreeType\n  ctx: NextPageContext\n  router: Router\n}\n\nexport type AppInitialProps<PageProps = any> = {\n  pageProps: PageProps\n}\n\nexport type AppPropsType<\n  Router extends NextRouter = NextRouter,\n  PageProps = {},\n> = AppInitialProps<PageProps> & {\n  Component: NextComponentType<NextPageContext, any, any>\n  router: Router\n  __N_SSG?: boolean\n  __N_SSP?: boolean\n}\n\nexport type DocumentContext = NextPageContext & {\n  renderPage: RenderPage\n  defaultGetInitialProps(\n    ctx: DocumentContext,\n    options?: { nonce?: string }\n  ): Promise<DocumentInitialProps>\n}\n\nexport type DocumentInitialProps = RenderPageResult & {\n  styles?: React.ReactElement[] | Iterable<React.ReactNode> | JSX.Element\n}\n\nexport type DocumentProps = DocumentInitialProps & HtmlProps\n\n/**\n * Next `API` route request\n */\nexport interface NextApiRequest extends IncomingMessage {\n  /**\n   * Object of `query` values from url\n   */\n  query: Partial<{\n    [key: string]: string | string[]\n  }>\n  /**\n   * Object of `cookies` from header\n   */\n  cookies: Partial<{\n    [key: string]: string\n  }>\n\n  body: any\n\n  env: Env\n\n  draftMode?: boolean\n\n  preview?: boolean\n  /**\n   * Preview data set on the request, if any\n   * */\n  previewData?: PreviewData\n}\n\n/**\n * Send body of response\n */\ntype Send<T> = (body: T) => void\n\n/**\n * Next `API` route response\n */\nexport type NextApiResponse<Data = any> = ServerResponse & {\n  /**\n   * Send data `any` data in response\n   */\n  send: Send<Data>\n  /**\n   * Send data `json` data in response\n   */\n  json: Send<Data>\n  status: (statusCode: number) => NextApiResponse<Data>\n  redirect(url: string): NextApiResponse<Data>\n  redirect(status: number, url: string): NextApiResponse<Data>\n\n  /**\n   * Set draft mode\n   */\n  setDraftMode: (options: { enable: boolean }) => NextApiResponse<Data>\n\n  /**\n   * Set preview data for Next.js' prerender mode\n   */\n  setPreviewData: (\n    data: object | string,\n    options?: {\n      /**\n       * Specifies the number (in seconds) for the preview session to last for.\n       * The given number will be converted to an integer by rounding down.\n       * By default, no maximum age is set and the preview session finishes\n       * when the client shuts down (browser is closed).\n       */\n      maxAge?: number\n      /**\n       * Specifies the path for the preview session to work under. By default,\n       * the path is considered the \"default path\", i.e., any pages under \"/\".\n       */\n      path?: string\n    }\n  ) => NextApiResponse<Data>\n\n  /**\n   * Clear preview data for Next.js' prerender mode\n   */\n  clearPreviewData: (options?: { path?: string }) => NextApiResponse<Data>\n\n  /**\n   * Revalidate a specific page and regenerate it using On-Demand Incremental\n   * Static Regeneration.\n   * The path should be an actual path, not a rewritten path. E.g. for\n   * \"/blog/[slug]\" this should be \"/blog/post-1\".\n   * @link https://nextjs.org/docs/app/building-your-application/data-fetching/incremental-static-regeneration#on-demand-revalidation-with-revalidatepath\n   */\n  revalidate: (\n    urlPath: string,\n    opts?: {\n      unstable_onlyGenerated?: boolean\n    }\n  ) => Promise<void>\n}\n\n/**\n * Next `API` route handler\n */\nexport type NextApiHandler<T = any> = (\n  req: NextApiRequest,\n  res: NextApiResponse<T>\n) => unknown | Promise<unknown>\n\n/**\n * Utils\n */\nexport function execOnce<T extends (...args: any[]) => ReturnType<T>>(\n  fn: T\n): T {\n  let used = false\n  let result: ReturnType<T>\n\n  return ((...args: any[]) => {\n    if (!used) {\n      used = true\n      result = fn(...args)\n    }\n    return result\n  }) as T\n}\n\n// Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\n// Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\nconst ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/\nexport const isAbsoluteUrl = (url: string) => ABSOLUTE_URL_REGEX.test(url)\n\nexport function getLocationOrigin() {\n  const { protocol, hostname, port } = window.location\n  return `${protocol}//${hostname}${port ? ':' + port : ''}`\n}\n\nexport function getURL() {\n  const { href } = window.location\n  const origin = getLocationOrigin()\n  return href.substring(origin.length)\n}\n\nexport function getDisplayName<P>(Component: ComponentType<P>) {\n  return typeof Component === 'string'\n    ? Component\n    : Component.displayName || Component.name || 'Unknown'\n}\n\nexport function isResSent(res: ServerResponse) {\n  return res.finished || res.headersSent\n}\n\nexport function normalizeRepeatedSlashes(url: string) {\n  const urlParts = url.split('?')\n  const urlNoQuery = urlParts[0]\n\n  return (\n    urlNoQuery\n      // first we replace any non-encoded backslashes with forward\n      // then normalize repeated forward slashes\n      .replace(/\\\\/g, '/')\n      .replace(/\\/\\/+/g, '/') +\n    (urlParts[1] ? `?${urlParts.slice(1).join('?')}` : '')\n  )\n}\n\nexport async function loadGetInitialProps<\n  C extends BaseContext,\n  IP = {},\n  P = {},\n>(App: NextComponentType<C, IP, P>, ctx: C): Promise<IP> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (App.prototype?.getInitialProps) {\n      const message = `\"${getDisplayName(\n        App\n      )}.getInitialProps()\" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.`\n      throw new Error(message)\n    }\n  }\n  // when called from _app `ctx` is nested in `ctx`\n  const res = ctx.res || (ctx.ctx && ctx.ctx.res)\n\n  if (!App.getInitialProps) {\n    if (ctx.ctx && ctx.Component) {\n      // @ts-ignore pageProps default\n      return {\n        pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx),\n      }\n    }\n    return {} as IP\n  }\n\n  const props = await App.getInitialProps(ctx)\n\n  if (res && isResSent(res)) {\n    return props\n  }\n\n  if (!props) {\n    const message = `\"${getDisplayName(\n      App\n    )}.getInitialProps()\" should resolve to an object. But found \"${props}\" instead.`\n    throw new Error(message)\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (Object.keys(props).length === 0 && !ctx.ctx) {\n      console.warn(\n        `${getDisplayName(\n          App\n        )} returned an empty object from \\`getInitialProps\\`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps`\n      )\n    }\n  }\n\n  return props\n}\n\nexport const SP = typeof performance !== 'undefined'\nexport const ST =\n  SP &&\n  (['mark', 'measure', 'getEntriesByName'] as const).every(\n    (method) => typeof performance[method] === 'function'\n  )\n\nexport class DecodeError extends Error {}\nexport class NormalizeError extends Error {}\nexport class PageNotFoundError extends Error {\n  code: string\n\n  constructor(page: string) {\n    super()\n    this.code = 'ENOENT'\n    this.name = 'PageNotFoundError'\n    this.message = `Cannot find module for page: ${page}`\n  }\n}\n\nexport class MissingStaticPage extends Error {\n  constructor(page: string, message: string) {\n    super()\n    this.message = `Failed to load static file for page: ${page} ${message}`\n  }\n}\n\nexport class MiddlewareNotFoundError extends Error {\n  code: string\n  constructor() {\n    super()\n    this.code = 'ENOENT'\n    this.message = `Cannot find the middleware module`\n  }\n}\n\nexport interface CacheFs {\n  existsSync: typeof fs.existsSync\n  readFile: typeof fs.promises.readFile\n  readFileSync: typeof fs.readFileSync\n  writeFile(f: string, d: any): Promise<void>\n  mkdir(dir: string): Promise<void | string>\n  stat(f: string): Promise<{ mtime: Date }>\n}\n\nexport function stringifyError(error: Error) {\n  return JSON.stringify({ message: error.message, stack: error.stack })\n}\n","/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */\nexport function parsePath(path: string) {\n  const hashIndex = path.indexOf('#')\n  const queryIndex = path.indexOf('?')\n  const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex)\n\n  if (hasQuery || hashIndex > -1) {\n    return {\n      pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n      query: hasQuery\n        ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined)\n        : '',\n      hash: hashIndex > -1 ? path.slice(hashIndex) : '',\n    }\n  }\n\n  return { pathname: path, query: '', hash: '' }\n}\n","import { parsePath } from './parse-path'\n\n/**\n * Adds the provided prefix to the given path. It first ensures that the path\n * is indeed starting with a slash.\n */\nexport function addPathPrefix(path: string, prefix?: string) {\n  if (!path.startsWith('/') || !prefix) {\n    return path\n  }\n\n  const { pathname, query, hash } = parsePath(path)\n  return `${prefix}${pathname}${query}${hash}`\n}\n","/**\n * Removes the trailing slash for a given route or page path. Preserves the\n * root page. Examples:\n *   - `/foo/bar/` -> `/foo/bar`\n *   - `/foo/bar` -> `/foo/bar`\n *   - `/` -> `/`\n */\nexport function removeTrailingSlash(route: string) {\n  return route.replace(/\\/$/, '') || '/'\n}\n","import { removeTrailingSlash } from '../shared/lib/router/utils/remove-trailing-slash'\nimport { parsePath } from '../shared/lib/router/utils/parse-path'\n\n/**\n * Normalizes the trailing slash of a path according to the `trailingSlash` option\n * in `next.config.js`.\n */\nexport const normalizePathTrailingSlash = (path: string) => {\n  if (!path.startsWith('/') || process.env.__NEXT_MANUAL_TRAILING_SLASH) {\n    return path\n  }\n\n  const { pathname, query, hash } = parsePath(path)\n  if (process.env.__NEXT_TRAILING_SLASH) {\n    if (/\\.[^/]+\\/?$/.test(pathname)) {\n      return `${removeTrailingSlash(pathname)}${query}${hash}`\n    } else if (pathname.endsWith('/')) {\n      return `${pathname}${query}${hash}`\n    } else {\n      return `${pathname}/${query}${hash}`\n    }\n  }\n\n  return `${removeTrailingSlash(pathname)}${query}${hash}`\n}\n","import { addPathPrefix } from '../shared/lib/router/utils/add-path-prefix'\nimport { normalizePathTrailingSlash } from './normalize-trailing-slash'\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nexport function addBasePath(path: string, required?: boolean): string {\n  return normalizePathTrailingSlash(\n    process.env.__NEXT_MANUAL_CLIENT_BASE_PATH && !required\n      ? path\n      : addPathPrefix(path, basePath)\n  )\n}\n","// This regex contains the bots that we need to do a blocking render for and can't safely stream the response\n// due to how they parse the DOM. For example, they might explicitly check for metadata in the `head` tag, so we can't stream metadata tags after the `head` was sent.\n// Note: The pattern [\\w-]+-Google captures all Google crawlers with \"-Google\" suffix (e.g., Mediapartners-Google, AdsBot-Google, Storebot-Google)\n// as well as crawlers starting with \"Google-\" (e.g., Google-PageRenderer, Google-InspectionTool)\nexport const HTML_LIMITED_BOT_UA_RE =\n  /[\\w-]+-Google|Google-[\\w-]+|Chrome-Lighthouse|Slurp|DuckDuckBot|baiduspider|yandex|sogou|bitlybot|tumblr|vkShare|quora link preview|redditbot|ia_archiver|Bingbot|BingPreview|applebot|facebookexternalhit|facebookcatalog|Twitterbot|LinkedInBot|Slackbot|Discordbot|WhatsApp|SkypeUriPreview|Yeti|googleweblight/i\n","import { HTML_LIMITED_BOT_UA_RE } from './html-bots'\n\n// Bot crawler that will spin up a headless browser and execute JS.\n// Only the main Googlebot search crawler executes JavaScript, not other Google crawlers.\n// x-ref: https://developers.google.com/search/docs/crawling-indexing/google-common-crawlers\n// This regex specifically matches \"Googlebot\" but NOT \"Mediapartners-Google\", \"AdsBot-Google\", etc.\nconst HEADLESS_BROWSER_BOT_UA_RE = /Googlebot(?!-)|Googlebot$/i\n\nexport const HTML_LIMITED_BOT_UA_RE_STRING = HTML_LIMITED_BOT_UA_RE.source\n\nexport { HTML_LIMITED_BOT_UA_RE }\n\nfunction isDomBotUA(userAgent: string) {\n  return HEADLESS_BROWSER_BOT_UA_RE.test(userAgent)\n}\n\nfunction isHtmlLimitedBotUA(userAgent: string) {\n  return HTML_LIMITED_BOT_UA_RE.test(userAgent)\n}\n\nexport function isBot(userAgent: string): boolean {\n  return isDomBotUA(userAgent) || isHtmlLimitedBotUA(userAgent)\n}\n\nexport function getBotType(userAgent: string): 'dom' | 'html' | undefined {\n  if (isDomBotUA(userAgent)) {\n    return 'dom'\n  }\n  if (isHtmlLimitedBotUA(userAgent)) {\n    return 'html'\n  }\n  return undefined\n}\n","import { isBot } from '../../shared/lib/router/utils/is-bot'\nimport { addBasePath } from '../add-base-path'\n\nexport function isExternalURL(url: URL) {\n  return url.origin !== window.location.origin\n}\n\n/**\n * Given a link href, constructs the URL that should be prefetched. Returns null\n * in cases where prefetching should be disabled, like external URLs, or\n * during development.\n * @param href The href passed to <Link>, router.prefetch(), or similar\n * @returns A URL object to prefetch, or null if prefetching should be disabled\n */\nexport function createPrefetchURL(href: string): URL | null {\n  // Don't prefetch for bots as they don't navigate.\n  if (isBot(window.navigator.userAgent)) {\n    return null\n  }\n\n  let url: URL\n  try {\n    url = new URL(addBasePath(href), window.location.href)\n  } catch (_) {\n    // TODO: Does this need to throw or can we just console.error instead? Does\n    // anyone rely on this throwing? (Seems unlikely.)\n    throw new Error(\n      `Cannot prefetch '${href}' because it cannot be converted to a URL.`\n    )\n  }\n\n  // Don't prefetch during development (improves compilation performance)\n  if (process.env.NODE_ENV === 'development') {\n    return null\n  }\n\n  // External urls can't be prefetched in the same way.\n  if (isExternalURL(url)) {\n    return null\n  }\n\n  return url\n}\n","// TypeScript trick to simulate opaque types, like in Flow.\ntype Opaque<K, T> = T & { __brand: K }\n\n// Only functions in this module should be allowed to create CacheKeys.\nexport type NormalizedHref = Opaque<'NormalizedHref', string>\nexport type NormalizedSearch = Opaque<'NormalizedSearch', string>\nexport type NormalizedNextUrl = Opaque<'NormalizedNextUrl', string>\n\nexport type RouteCacheKey = Opaque<\n  'RouteCacheKey',\n  {\n    href: NormalizedHref\n    search: NormalizedSearch\n    nextUrl: NormalizedNextUrl | null\n\n    // TODO: Eventually the dynamic params will be added here, too.\n  }\n>\n\nexport function createCacheKey(\n  originalHref: string,\n  nextUrl: string | null\n): RouteCacheKey {\n  // TODO: We should remove the hash from the href and track that separately.\n  // There's no reason to vary route entries by hash.\n  const originalUrl = new URL(originalHref)\n  const cacheKey = {\n    href: originalHref as NormalizedHref,\n    search: originalUrl.search as NormalizedSearch,\n    nextUrl: nextUrl as NormalizedNextUrl | null,\n  } as RouteCacheKey\n  return cacheKey\n}\n","/**\n * App Router types - Client-safe types for the Next.js App Router\n *\n * This file contains type definitions that can be safely imported\n * by both client-side and server-side code without circular dependencies.\n */\nimport type { FetchServerResponseResult } from '../../client/components/router-reducer/fetch-server-response'\nimport type React from 'react'\n\nexport type LoadingModuleData =\n  | [React.JSX.Element, React.ReactNode, React.ReactNode]\n  | null\n\n/** viewport metadata node */\nexport type HeadData = React.ReactNode\n\nexport type ChildSegmentMap = Map<string, CacheNode>\n\n/**\n * Cache node used in app-router / layout-router.\n */\nexport type CacheNode = ReadyCacheNode | LazyCacheNode\n\nexport type LazyCacheNode = {\n  /**\n   * When rsc is null, this is a lazily-initialized cache node.\n   *\n   * If the app attempts to render it, it triggers a lazy data fetch,\n   * postpones the render, and schedules an update to a new tree.\n   *\n   * TODO: This mechanism should not be used when PPR is enabled, though it\n   * currently is in some cases until we've implemented partial\n   * segment fetching.\n   */\n  rsc: null\n\n  /**\n   * A prefetched version of the segment data. See explanation in corresponding\n   * field of ReadyCacheNode (below).\n   *\n   * Since LazyCacheNode mostly only exists in the non-PPR implementation, this\n   * will usually be null, but it could have been cloned from a previous\n   * CacheNode that was created by the PPR implementation. Eventually we want\n   * to migrate everything away from LazyCacheNode entirely.\n   */\n  prefetchRsc: React.ReactNode\n\n  /**\n   * A pending response for the lazy data fetch. If this is not present\n   * during render, it is lazily created.\n   */\n  lazyData: Promise<FetchServerResponseResult> | null\n\n  prefetchHead: HeadData | null\n\n  head: HeadData\n\n  loading: LoadingModuleData | Promise<LoadingModuleData>\n\n  /**\n   * Child parallel routes.\n   */\n  parallelRoutes: Map<string, ChildSegmentMap>\n\n  /**\n   * The timestamp of the navigation that last updated the CacheNode's data. If\n   * a CacheNode is reused from a previous navigation, this value is not\n   * updated. Used to track the staleness of the data.\n   */\n  navigatedAt: number\n}\n\nexport type ReadyCacheNode = {\n  /**\n   * When rsc is not null, it represents the RSC data for the\n   * corresponding segment.\n   *\n   * `null` is a valid React Node but because segment data is always a\n   * <LayoutRouter> component, we can use `null` to represent empty.\n   *\n   * TODO: For additional type safety, update this type to\n   * Exclude<React.ReactNode, null>. Need to update createEmptyCacheNode to\n   * accept rsc as an argument, or just inline the callers.\n   */\n  rsc: React.ReactNode\n\n  /**\n   * Represents a static version of the segment that can be shown immediately,\n   * and may or may not contain dynamic holes. It's prefetched before a\n   * navigation occurs.\n   *\n   * During rendering, we will choose whether to render `rsc` or `prefetchRsc`\n   * with `useDeferredValue`. As with the `rsc` field, a value of `null` means\n   * no value was provided. In this case, the LayoutRouter will go straight to\n   * rendering the `rsc` value; if that one is also missing, it will suspend and\n   * trigger a lazy fetch.\n   */\n  prefetchRsc: React.ReactNode\n\n  /**\n   * There should never be a lazy data request in this case.\n   */\n  lazyData: null\n  prefetchHead: HeadData | null\n\n  head: HeadData\n\n  loading: LoadingModuleData | Promise<LoadingModuleData>\n\n  parallelRoutes: Map<string, ChildSegmentMap>\n\n  navigatedAt: number\n}\n\nexport type DynamicParamTypes =\n  | 'catchall'\n  | 'catchall-intercepted'\n  | 'optional-catchall'\n  | 'dynamic'\n  | 'dynamic-intercepted'\n\nexport type DynamicParamTypesShort = 'c' | 'ci' | 'oc' | 'd' | 'di'\n\nexport type Segment =\n  | string\n  | [\n      // Param name\n      paramName: string,\n      // Param cache key (almost the same as the value, but arrays are\n      // concatenated into strings)\n      // TODO: We should change this to just be the value. Currently we convert\n      // it back to a value when passing to useParams. It only needs to be\n      // a string when converted to a a cache key, but that doesn't mean we\n      // need to store it as that representation.\n      paramCacheKey: string,\n      // Dynamic param type\n      dynamicParamType: DynamicParamTypesShort,\n    ]\n\n/**\n * Router state\n */\nexport type FlightRouterState = [\n  segment: Segment,\n  parallelRoutes: { [parallelRouterKey: string]: FlightRouterState },\n  url?: string | null,\n  /**\n   * \"refresh\" and \"refetch\", despite being similarly named, have different\n   * semantics:\n   * - \"refetch\" is used during a request to inform the server where rendering\n   *   should start from.\n   *\n   * - \"refresh\" is used by the client to mark that a segment should re-fetch the\n   *   data from the server for the current segment. It uses the \"url\" property\n   *   above to determine where to fetch from.\n   *\n   * - \"inside-shared-layout\" is used during a prefetch request to inform the\n   *   server that even if the segment matches, it should be treated as if it's\n   *   within the \"new\" part of a navigation — inside the shared layout. If\n   *   the segment doesn't match, then it has no effect, since it would be\n   *   treated as new regardless. If it does match, though, the server does not\n   *   need to render it, because the client already has it.\n   *\n   * - \"metadata-only\" instructs the server to skip rendering the segments and\n   *   only send the head data.\n   *\n   *   A bit confusing, but that's because it has only one extremely narrow use\n   *   case — during a non-PPR prefetch, the server uses it to find the first\n   *   loading boundary beneath a shared layout.\n   *\n   *   TODO: We should rethink the protocol for dynamic requests. It might not\n   *   make sense for the client to send a FlightRouterState, since this type is\n   *   overloaded with concerns.\n   */\n  refresh?:\n    | 'refetch'\n    | 'refresh'\n    | 'inside-shared-layout'\n    | 'metadata-only'\n    | null,\n  isRootLayout?: boolean,\n  /**\n   * Only present when responding to a tree prefetch request. Indicates whether\n   * there is a loading boundary somewhere in the tree. The client cache uses\n   * this to determine if it can skip the data prefetch request.\n   */\n  hasLoadingBoundary?: HasLoadingBoundary,\n]\n\nexport const enum HasLoadingBoundary {\n  // There is a loading boundary in this particular segment\n  SegmentHasLoadingBoundary = 1,\n  // There is a loading boundary somewhere in the subtree (but not in\n  // this segment)\n  SubtreeHasLoadingBoundary = 2,\n  // There is no loading boundary in this segment or any of its descendants\n  SubtreeHasNoLoadingBoundary = 3,\n}\n\n/**\n * Individual Flight response path\n */\nexport type FlightSegmentPath =\n  // Uses `any` as repeating pattern can't be typed.\n  | any[]\n  // Looks somewhat like this\n  | [\n      segment: Segment,\n      parallelRouterKey: string,\n      segment: Segment,\n      parallelRouterKey: string,\n      segment: Segment,\n      parallelRouterKey: string,\n    ]\n\n/**\n * Represents a tree of segments and the Flight data (i.e. React nodes) that\n * correspond to each one. The tree is isomorphic to the FlightRouterState;\n * however in the future we want to be able to fetch arbitrary partial segments\n * without having to fetch all its children. So this response format will\n * likely change.\n */\nexport type CacheNodeSeedData = [\n  node: React.ReactNode | null,\n  parallelRoutes: {\n    [parallelRouterKey: string]: CacheNodeSeedData | null\n  },\n  loading: LoadingModuleData | Promise<LoadingModuleData>,\n  isPartial: boolean,\n  /** TODO: this doesn't feel like it belongs here, because it's only used during build, in `collectSegmentData` */\n  hasRuntimePrefetch: boolean,\n]\n\nexport type FlightDataSegment = [\n  /* segment of the rendered slice: */ Segment,\n  /* treePatch */ FlightRouterState,\n  /* cacheNodeSeedData */ CacheNodeSeedData | null, // Can be null during prefetch if there's no loading component\n  /* head: viewport */ HeadData,\n  /* isHeadPartial */ boolean,\n]\n\nexport type FlightDataPath =\n  // Uses `any` as repeating pattern can't be typed.\n  | any[]\n  // Looks somewhat like this\n  | [\n      // Holds full path to the segment.\n      ...FlightSegmentPath[],\n      ...FlightDataSegment,\n    ]\n\n/**\n * The Flight response data\n */\nexport type FlightData = Array<FlightDataPath> | string\n\nexport type ActionResult = Promise<any>\n\nexport type InitialRSCPayload = {\n  /** buildId */\n  b: string\n  /** initialCanonicalUrlParts */\n  c: string[]\n  /** initialRenderedSearch */\n  q: string\n  /** couldBeIntercepted */\n  i: boolean\n  /** initialFlightData */\n  f: FlightDataPath[]\n  /** missingSlots */\n  m: Set<string> | undefined\n  /** GlobalError */\n  G: [React.ComponentType<any>, React.ReactNode | undefined]\n  /** postponed */\n  s: boolean\n  /** prerendered */\n  S: boolean\n}\n\n// Response from `createFromFetch` for normal rendering\nexport type NavigationFlightResponse = {\n  /** buildId */\n  b: string\n  /** flightData */\n  f: FlightData\n  /** prerendered */\n  S: boolean\n}\n\n// Response from `createFromFetch` for server actions. Action's flight data can be null\nexport type ActionFlightResponse = {\n  /** actionResult */\n  a: ActionResult\n  /** buildId */\n  b: string\n  /** flightData */\n  f: FlightData\n}\n\nexport type RSCPayload =\n  | InitialRSCPayload\n  | NavigationFlightResponse\n  | ActionFlightResponse\n","import type { Segment } from '../../shared/lib/app-router-types'\n\nexport const matchSegment = (\n  existingSegment: Segment,\n  segment: Segment\n): boolean => {\n  // segment is either Array or string\n  if (typeof existingSegment === 'string') {\n    if (typeof segment === 'string') {\n      // Common case: segment is just a string\n      return existingSegment === segment\n    }\n    return false\n  }\n\n  if (typeof segment === 'string') {\n    return false\n  }\n  return existingSegment[0] === segment[0] && existingSegment[1] === segment[1]\n}\n","export const RSC_HEADER = 'rsc' as const\nexport const ACTION_HEADER = 'next-action' as const\n// TODO: Instead of sending the full router state, we only need to send the\n// segment path. Saves bytes. Then we could also use this field for segment\n// prefetches, which also need to specify a particular segment.\nexport const NEXT_ROUTER_STATE_TREE_HEADER = 'next-router-state-tree' as const\nexport const NEXT_ROUTER_PREFETCH_HEADER = 'next-router-prefetch' as const\n// This contains the path to the segment being prefetched.\n// TODO: If we change next-router-state-tree to be a segment path, we can use\n// that instead. Then next-router-prefetch and next-router-segment-prefetch can\n// be merged into a single enum.\nexport const NEXT_ROUTER_SEGMENT_PREFETCH_HEADER =\n  'next-router-segment-prefetch' as const\nexport const NEXT_HMR_REFRESH_HEADER = 'next-hmr-refresh' as const\nexport const NEXT_HMR_REFRESH_HASH_COOKIE = '__next_hmr_refresh_hash__' as const\nexport const NEXT_URL = 'next-url' as const\nexport const RSC_CONTENT_TYPE_HEADER = 'text/x-component' as const\n\nexport const FLIGHT_HEADERS = [\n  RSC_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_ROUTER_SEGMENT_PREFETCH_HEADER,\n] as const\n\nexport const NEXT_RSC_UNION_QUERY = '_rsc' as const\n\nexport const NEXT_ROUTER_STALE_TIME_HEADER = 'x-nextjs-stale-time' as const\nexport const NEXT_DID_POSTPONE_HEADER = 'x-nextjs-postponed' as const\nexport const NEXT_REWRITTEN_PATH_HEADER = 'x-nextjs-rewritten-path' as const\nexport const NEXT_REWRITTEN_QUERY_HEADER = 'x-nextjs-rewritten-query' as const\nexport const NEXT_IS_PRERENDER_HEADER = 'x-nextjs-prerender' as const\nexport const NEXT_ACTION_NOT_FOUND_HEADER = 'x-nextjs-action-not-found' as const\nexport const NEXT_REQUEST_ID_HEADER = 'x-nextjs-request-id' as const\nexport const NEXT_HTML_REQUEST_ID_HEADER = 'x-nextjs-html-request-id' as const\n","import type { CacheNode } from '../../../shared/lib/app-router-types'\nimport type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../../shared/lib/app-router-types'\nimport type { FetchServerResponseResult } from './fetch-server-response'\n\nexport const ACTION_REFRESH = 'refresh'\nexport const ACTION_NAVIGATE = 'navigate'\nexport const ACTION_RESTORE = 'restore'\nexport const ACTION_SERVER_PATCH = 'server-patch'\nexport const ACTION_HMR_REFRESH = 'hmr-refresh'\nexport const ACTION_SERVER_ACTION = 'server-action'\n\nexport type RouterChangeByServerResponse = ({\n  navigatedAt,\n  previousTree,\n  serverResponse,\n}: {\n  navigatedAt: number\n  previousTree: FlightRouterState\n  serverResponse: FetchServerResponseResult\n}) => void\n\nexport interface Mutable {\n  mpaNavigation?: boolean\n  patchedTree?: FlightRouterState\n  renderedSearch?: string\n  canonicalUrl?: string\n  scrollableSegments?: FlightSegmentPath[]\n  pendingPush?: boolean\n  cache?: CacheNode\n  hashFragment?: string\n  shouldScroll?: boolean\n  preserveCustomHistoryState?: boolean\n  onlyHashChange?: boolean\n  collectedDebugInfo?: Array<unknown>\n}\n\nexport interface ServerActionMutable extends Mutable {\n  inFlightServerAction?: Promise<any> | null\n}\n\n/**\n * Refresh triggers a refresh of the full page data.\n * - fetches the Flight data and fills rsc at the root of the cache.\n * - The router state is updated at the root.\n */\nexport interface RefreshAction {\n  type: typeof ACTION_REFRESH\n  origin: Location['origin']\n}\n\nexport interface HmrRefreshAction {\n  type: typeof ACTION_HMR_REFRESH\n  origin: Location['origin']\n}\n\nexport type ServerActionDispatcher = (\n  args: Omit<\n    ServerActionAction,\n    'type' | 'mutable' | 'navigate' | 'changeByServerResponse' | 'cache'\n  >\n) => void\n\nexport interface ServerActionAction {\n  type: typeof ACTION_SERVER_ACTION\n  actionId: string\n  actionArgs: any[]\n  resolve: (value: any) => void\n  reject: (reason?: any) => void\n  didRevalidate?: boolean\n}\n\n/**\n * Navigate triggers a navigation to the provided url. It supports two types: `push` and `replace`.\n *\n * `navigateType`:\n * - `push` - pushes a new history entry in the browser history\n * - `replace` - replaces the current history entry in the browser history\n *\n * Navigate has multiple cache heuristics:\n * - page was prefetched\n *  - Apply router state tree from prefetch\n *  - Apply Flight data from prefetch to the cache\n *  - If Flight data is a string, it's a redirect and the state is updated to trigger a redirect\n *  - Check if hard navigation is needed\n *    - Hard navigation happens when a dynamic parameter below the common layout changed\n *    - When hard navigation is needed the cache is invalidated below the flightSegmentPath\n *    - The missing cache nodes of the page will be fetched in layout-router and trigger the SERVER_PATCH action\n *  - If hard navigation is not needed\n *    - The cache is reused\n *    - If any cache nodes are missing they'll be fetched in layout-router and trigger the SERVER_PATCH action\n * - page was not prefetched\n *  - The navigate was called from `next/router` (`router.push()` / `router.replace()`) / `next/link` without prefetched data available (e.g. the prefetch didn't come back from the server before clicking the link)\n *    - Flight data is fetched in the reducer (suspends the reducer)\n *    - Router state tree is created based on Flight data\n *    - Cache is filled based on the Flight data\n *\n * Above steps explain 3 cases:\n * - `soft` - Reuses the existing cache and fetches missing nodes in layout-router.\n * - `hard` - Creates a new cache where cache nodes are removed below the common layout and fetches missing nodes in layout-router.\n * - `optimistic` (explicit no prefetch) - Creates a new cache and kicks off the data fetch in the reducer. The data fetch is awaited in the layout-router.\n */\nexport interface NavigateAction {\n  type: typeof ACTION_NAVIGATE\n  url: URL\n  isExternalUrl: boolean\n  locationSearch: Location['search']\n  navigateType: 'push' | 'replace'\n  shouldScroll: boolean\n}\n\n/**\n * Restore applies the provided router state.\n * - Used for `popstate` (back/forward navigation) where a known router state has to be applied.\n * - Also used when syncing the router state with `pushState`/`replaceState` calls.\n * - Router state is applied as-is from the history state, if available.\n * - If the history state does not contain the router state, the existing router state is used.\n * - If any cache node is missing it will be fetched in layout-router during rendering and the server-patch case.\n * - If existing cache nodes match these are used.\n */\nexport interface RestoreAction {\n  type: typeof ACTION_RESTORE\n  url: URL\n  historyState: AppHistoryState | undefined\n}\n\nexport type AppHistoryState = {\n  tree: FlightRouterState\n  renderedSearch: string\n}\n\n/**\n * Server-patch applies the provided Flight data to the cache and router tree.\n * - Only triggered in layout-router.\n * - Creates a new cache and router state with the Flight data applied.\n */\nexport interface ServerPatchAction {\n  type: typeof ACTION_SERVER_PATCH\n  navigatedAt: number\n  serverResponse: FetchServerResponseResult\n  previousTree: FlightRouterState\n}\n\n/**\n * PrefetchKind defines the type of prefetching that should be done.\n * - `auto` - if the page is dynamic, prefetch the page data partially, if static prefetch the page data fully.\n * - `full` - prefetch the page data fully.\n * - `temporary` - a temporary prefetch entry is added to the cache, this is used when prefetch={false} is used in next/link or when you push a route programmatically.\n */\n\nexport enum PrefetchKind {\n  AUTO = 'auto',\n  FULL = 'full',\n  TEMPORARY = 'temporary',\n}\n\n/**\n * Prefetch adds the provided FlightData to the prefetch cache\n * - Creates the router state tree based on the patch in FlightData\n * - Adds the FlightData to the prefetch cache\n * - In ACTION_NAVIGATE the prefetch cache is checked and the router state tree and FlightData are applied.\n */\n\nexport interface PushRef {\n  /**\n   * If the app-router should push a new history entry in app-router's useEffect()\n   */\n  pendingPush: boolean\n  /**\n   * Multi-page navigation through location.href.\n   */\n  mpaNavigation: boolean\n  /**\n   * Skip applying the router state to the browser history state.\n   */\n  preserveCustomHistoryState: boolean\n}\n\nexport type FocusAndScrollRef = {\n  /**\n   * If focus and scroll should be set in the layout-router's useEffect()\n   */\n  apply: boolean\n  /**\n   * The hash fragment that should be scrolled to.\n   */\n  hashFragment: string | null\n  /**\n   * The paths of the segments that should be focused.\n   */\n  segmentPaths: FlightSegmentPath[]\n  /**\n   * If only the URLs hash fragment changed\n   */\n  onlyHashChange: boolean\n}\n\n/**\n * Handles keeping the state of app-router.\n */\nexport type AppRouterState = {\n  /**\n   * The router state, this is written into the history state in app-router using replaceState/pushState.\n   * - Has to be serializable as it is written into the history state.\n   * - Holds which segments and parallel routes are shown on the screen.\n   */\n  tree: FlightRouterState\n  /**\n   * The cache holds React nodes for every segment that is shown on screen as well as previously shown segments.\n   * It also holds in-progress data requests.\n   */\n  cache: CacheNode\n  /**\n   * Decides if the update should create a new history entry and if the navigation has to trigger a browser navigation.\n   */\n  pushRef: PushRef\n  /**\n   * Decides if the update should apply scroll and focus management.\n   */\n  focusAndScrollRef: FocusAndScrollRef\n  /**\n   * The canonical url that is pushed/replaced.\n   * - This is the url you see in the browser.\n   */\n  canonicalUrl: string\n  renderedSearch: string\n  /**\n   * The underlying \"url\" representing the UI state, which is used for intercepting routes.\n   */\n  nextUrl: string | null\n\n  /**\n   * The previous next-url that was used previous to a dynamic navigation.\n   */\n  previousNextUrl: string | null\n\n  debugInfo: Array<unknown> | null\n}\n\nexport type ReadonlyReducerState = Readonly<AppRouterState>\nexport type ReducerState =\n  | (Promise<AppRouterState> & { _debugInfo?: Array<unknown> })\n  | AppRouterState\nexport type ReducerActions = Readonly<\n  | RefreshAction\n  | NavigateAction\n  | RestoreAction\n  | ServerPatchAction\n  | HmrRefreshAction\n  | ServerActionAction\n>\n","/**\n * Check to see if a value is Thenable.\n *\n * @param promise the maybe-thenable value\n * @returns true if the value is thenable\n */\nexport function isThenable<T = unknown>(\n  promise: Promise<T> | T\n): promise is Promise<T> {\n  return (\n    promise !== null &&\n    typeof promise === 'object' &&\n    'then' in promise &&\n    typeof promise.then === 'function'\n  )\n}\n","import type { Dispatch } from 'react'\nimport React, { use, useMemo } from 'react'\nimport { isThenable } from '../../shared/lib/is-thenable'\nimport type { AppRouterActionQueue } from './app-router-instance'\nimport type {\n  AppRouterState,\n  ReducerActions,\n  ReducerState,\n} from './router-reducer/router-reducer-types'\n\n// The app router state lives outside of React, so we can import the dispatch\n// method directly wherever we need it, rather than passing it around via props\n// or context.\nlet dispatch: Dispatch<ReducerActions> | null = null\n\nexport function dispatchAppRouterAction(action: ReducerActions) {\n  if (dispatch === null) {\n    throw new Error(\n      'Internal Next.js error: Router action dispatched before initialization.'\n    )\n  }\n  dispatch(action)\n}\n\nexport function useActionQueue(\n  actionQueue: AppRouterActionQueue\n): AppRouterState {\n  const [state, setState] = React.useState<ReducerState>(actionQueue.state)\n\n  // Because of a known issue that requires to decode Flight streams inside the\n  // render phase, we have to be a bit clever and assign the dispatch method to\n  // a module-level variable upon initialization. The useState hook in this\n  // module only exists to synchronize state that lives outside of React.\n  // Ideally, what we'd do instead is pass the state as a prop to root.render;\n  // this is conceptually how we're modeling the app router state, despite the\n  // weird implementation details.\n  if (process.env.NODE_ENV !== 'production') {\n    const { useAppDevRenderingIndicator } =\n      require('../../next-devtools/userspace/use-app-dev-rendering-indicator') as typeof import('../../next-devtools/userspace/use-app-dev-rendering-indicator')\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const appDevRenderingIndicator = useAppDevRenderingIndicator()\n\n    dispatch = (action: ReducerActions) => {\n      appDevRenderingIndicator(() => {\n        actionQueue.dispatch(action, setState)\n      })\n    }\n  } else {\n    dispatch = (action: ReducerActions) =>\n      actionQueue.dispatch(action, setState)\n  }\n\n  // When navigating to a non-prefetched route, then App Router state will be\n  // blocked until the server responds. We need to transfer the `_debugInfo`\n  // from the underlying Flight response onto the top-level promise that is\n  // passed to React (via `use`) so that the latency is accurately represented\n  // in the React DevTools.\n  const stateWithDebugInfo = useMemo(() => {\n    if (isThenable(state)) {\n      const debugInfo: Array<unknown> = []\n      const promiseWithDebugInfo = Promise.resolve(state).then((asyncState) => {\n        if (asyncState.debugInfo !== null) {\n          debugInfo.push(...asyncState.debugInfo)\n        }\n        return asyncState\n      }) as Promise<AppRouterState> & { _debugInfo?: Array<unknown> }\n      promiseWithDebugInfo._debugInfo = debugInfo\n      return promiseWithDebugInfo\n    }\n    return state\n  }, [state])\n\n  return isThenable(stateWithDebugInfo)\n    ? use(stateWithDebugInfo)\n    : stateWithDebugInfo\n}\n","import { startTransition } from 'react'\nimport { ACTION_SERVER_ACTION } from './components/router-reducer/router-reducer-types'\nimport { dispatchAppRouterAction } from './components/use-action-queue'\n\nexport async function callServer(actionId: string, actionArgs: any[]) {\n  return new Promise((resolve, reject) => {\n    startTransition(() => {\n      dispatchAppRouterAction({\n        type: ACTION_SERVER_ACTION,\n        actionId,\n        actionArgs,\n        resolve,\n        reject,\n      })\n    })\n  })\n}\n","const basePath = process.env.__NEXT_ROUTER_BASEPATH || ''\nconst pathname = `${basePath}/__nextjs_source-map`\n\nexport const findSourceMapURL =\n  process.env.NODE_ENV === 'development'\n    ? function findSourceMapURL(filename: string): string | null {\n        if (filename === '') {\n          return null\n        }\n\n        if (\n          filename.startsWith(document.location.origin) &&\n          filename.includes('/_next/static')\n        ) {\n          // This is a request for a client chunk. This can only happen when\n          // using Turbopack. In this case, since we control how those source\n          // maps are generated, we can safely assume that the sourceMappingURL\n          // is relative to the filename, with an added `.map` extension. The\n          // browser can just request this file, and it gets served through the\n          // normal dev server, without the need to route this through\n          // the `/__nextjs_source-map` dev middleware.\n          return `${filename}.map`\n        }\n\n        const url = new URL(pathname, document.location.origin)\n        url.searchParams.set('filename', filename)\n\n        return url.href\n      }\n    : undefined\n","import { PAGE_SEGMENT_KEY } from '../segment'\nimport type { Segment as FlightRouterStateSegment } from '../app-router-types'\n\n// TypeScript trick to simulate opaque types, like in Flow.\ntype Opaque<K, T> = T & { __brand: K }\n\nexport type SegmentRequestKeyPart = Opaque<'SegmentRequestKeyPart', string>\nexport type SegmentRequestKey = Opaque<'SegmentRequestKey', string>\nexport type SegmentCacheKeyPart = Opaque<'SegmentCacheKeyPart', string>\nexport type SegmentCacheKey = Opaque<'SegmentCacheKey', string>\n\nexport const ROOT_SEGMENT_REQUEST_KEY = '' as SegmentRequestKey\nexport const ROOT_SEGMENT_CACHE_KEY = '' as SegmentCacheKey\n\nexport function createSegmentRequestKeyPart(\n  segment: FlightRouterStateSegment\n): SegmentRequestKeyPart {\n  if (typeof segment === 'string') {\n    if (segment.startsWith(PAGE_SEGMENT_KEY)) {\n      // The Flight Router State type sometimes includes the search params in\n      // the page segment. However, the Segment Cache tracks this as a separate\n      // key. So, we strip the search params here, and then add them back when\n      // the cache entry is turned back into a FlightRouterState. This is an\n      // unfortunate consequence of the FlightRouteState being used both as a\n      // transport type and as a cache key; we'll address this once more of the\n      // Segment Cache implementation has settled.\n      // TODO: We should hoist the search params out of the FlightRouterState\n      // type entirely, This is our plan for dynamic route params, too.\n      return PAGE_SEGMENT_KEY as SegmentRequestKeyPart\n    }\n    const safeName =\n      // TODO: FlightRouterState encodes Not Found routes as \"/_not-found\".\n      // But params typically don't include the leading slash. We should use\n      // a different encoding to avoid this special case.\n      segment === '/_not-found'\n        ? '_not-found'\n        : encodeToFilesystemAndURLSafeString(segment)\n    // Since this is not a dynamic segment, it's fully encoded. It does not\n    // need to be \"hydrated\" with a param value.\n    return safeName as SegmentRequestKeyPart\n  }\n\n  const name = segment[0]\n  const paramType = segment[2]\n  const safeName = encodeToFilesystemAndURLSafeString(name)\n\n  const encodedName = '$' + paramType + '$' + safeName\n  return encodedName as SegmentRequestKeyPart\n}\n\nexport function appendSegmentRequestKeyPart(\n  parentRequestKey: SegmentRequestKey,\n  parallelRouteKey: string,\n  childRequestKeyPart: SegmentRequestKeyPart\n): SegmentRequestKey {\n  // Aside from being filesystem safe, segment keys are also designed so that\n  // each segment and parallel route creates its own subdirectory. Roughly in\n  // the same shape as the source app directory. This is mostly just for easier\n  // debugging (you can open up the build folder and navigate the output); if\n  // we wanted to do we could just use a flat structure.\n\n  // Omit the parallel route key for children, since this is the most\n  // common case. Saves some bytes (and it's what the app directory does).\n  const slotKey =\n    parallelRouteKey === 'children'\n      ? childRequestKeyPart\n      : `@${encodeToFilesystemAndURLSafeString(parallelRouteKey)}/${childRequestKeyPart}`\n  return (parentRequestKey + '/' + slotKey) as SegmentRequestKey\n}\n\nexport function createSegmentCacheKeyPart(\n  requestKeyPart: SegmentRequestKeyPart,\n  segment: FlightRouterStateSegment\n): SegmentCacheKeyPart {\n  if (typeof segment === 'string') {\n    return requestKeyPart as any as SegmentCacheKeyPart\n  }\n  const paramValue = segment[1]\n  const safeValue = encodeToFilesystemAndURLSafeString(paramValue)\n  return (requestKeyPart + '$' + safeValue) as SegmentCacheKeyPart\n}\n\nexport function appendSegmentCacheKeyPart(\n  parentSegmentKey: SegmentCacheKey,\n  parallelRouteKey: string,\n  childCacheKeyPart: SegmentCacheKeyPart\n): SegmentCacheKey {\n  const slotKey =\n    parallelRouteKey === 'children'\n      ? childCacheKeyPart\n      : `@${encodeToFilesystemAndURLSafeString(parallelRouteKey)}/${childCacheKeyPart}`\n  return (parentSegmentKey + '/' + slotKey) as SegmentCacheKey\n}\n\n// Define a regex pattern to match the most common characters found in a route\n// param. It excludes anything that might not be cross-platform filesystem\n// compatible, like |. It does not need to be precise because the fallback is to\n// just base64url-encode the whole parameter, which is fine; we just don't do it\n// by default for compactness, and for easier debugging.\nconst simpleParamValueRegex = /^[a-zA-Z0-9\\-_@]+$/\n\nfunction encodeToFilesystemAndURLSafeString(value: string) {\n  if (simpleParamValueRegex.test(value)) {\n    return value\n  }\n  // If there are any unsafe characters, base64url-encode the entire value.\n  // We also add a ! prefix so it doesn't collide with the simple case.\n  const base64url = btoa(value)\n    .replace(/\\+/g, '-') // Replace '+' with '-'\n    .replace(/\\//g, '_') // Replace '/' with '_'\n    .replace(/=+$/, '') // Remove trailing '='\n  return '!' + base64url\n}\n\nexport function convertSegmentPathToStaticExportFilename(\n  segmentPath: string\n): string {\n  return `__next${segmentPath.replace(/\\//g, '.')}.txt`\n}\n","import type { DynamicParamTypesShort } from '../shared/lib/app-router-types'\nimport {\n  addSearchParamsIfPageSegment,\n  DEFAULT_SEGMENT_KEY,\n  PAGE_SEGMENT_KEY,\n} from '../shared/lib/segment'\nimport { ROOT_SEGMENT_REQUEST_KEY } from '../shared/lib/segment-cache/segment-value-encoding'\nimport {\n  NEXT_REWRITTEN_PATH_HEADER,\n  NEXT_REWRITTEN_QUERY_HEADER,\n  NEXT_RSC_UNION_QUERY,\n} from './components/app-router-headers'\nimport type { NormalizedSearch } from './components/segment-cache'\nimport type { RSCResponse } from './components/router-reducer/fetch-server-response'\nimport type { ParsedUrlQuery } from 'querystring'\n\nexport type RouteParamValue = string | Array<string> | null\n\nexport type RouteParam = {\n  name: string\n  value: RouteParamValue\n  type: DynamicParamTypesShort\n}\n\nexport function getRenderedSearch(\n  response: RSCResponse<unknown> | Response\n): NormalizedSearch {\n  // If the server performed a rewrite, the search params used to render the\n  // page will be different from the params in the request URL. In this case,\n  // the response will include a header that gives the rewritten search query.\n  const rewrittenQuery = response.headers.get(NEXT_REWRITTEN_QUERY_HEADER)\n  if (rewrittenQuery !== null) {\n    return (\n      rewrittenQuery === '' ? '' : '?' + rewrittenQuery\n    ) as NormalizedSearch\n  }\n  // If the header is not present, there was no rewrite, so we use the search\n  // query of the response URL.\n  return urlToUrlWithoutFlightMarker(new URL(response.url))\n    .search as NormalizedSearch\n}\n\nexport function getRenderedPathname(\n  response: RSCResponse<unknown> | Response\n): string {\n  // If the server performed a rewrite, the pathname used to render the\n  // page will be different from the pathname in the request URL. In this case,\n  // the response will include a header that gives the rewritten pathname.\n  const rewrittenPath = response.headers.get(NEXT_REWRITTEN_PATH_HEADER)\n  return (\n    rewrittenPath ?? urlToUrlWithoutFlightMarker(new URL(response.url)).pathname\n  )\n}\n\nexport function parseDynamicParamFromURLPart(\n  paramType: DynamicParamTypesShort,\n  pathnameParts: Array<string>,\n  partIndex: number\n): RouteParamValue {\n  // This needs to match the behavior in get-dynamic-param.ts.\n  switch (paramType) {\n    // Catchalls\n    case 'c':\n    case 'ci': {\n      // Catchalls receive all the remaining URL parts. If there are no\n      // remaining pathname parts, return an empty array.\n      return partIndex < pathnameParts.length\n        ? pathnameParts.slice(partIndex).map((s) => encodeURIComponent(s))\n        : []\n    }\n    // Optional catchalls\n    case 'oc': {\n      // Optional catchalls receive all the remaining URL parts, unless this is\n      // the end of the pathname, in which case they return null.\n      return partIndex < pathnameParts.length\n        ? pathnameParts.slice(partIndex).map((s) => encodeURIComponent(s))\n        : null\n    }\n    // Dynamic\n    case 'd':\n    case 'di': {\n      if (partIndex >= pathnameParts.length) {\n        // The route tree expected there to be more parts in the URL than there\n        // actually are. This could happen if the x-nextjs-rewritten-path header\n        // is incorrectly set, or potentially due to bug in Next.js. TODO:\n        // Should this be a hard error? During a prefetch, we can just abort.\n        // During a client navigation, we could trigger a hard refresh. But if\n        // it happens during initial render, we don't really have any\n        // recovery options.\n        return ''\n      }\n      return encodeURIComponent(pathnameParts[partIndex])\n    }\n    default:\n      paramType satisfies never\n      return ''\n  }\n}\n\nexport function doesStaticSegmentAppearInURL(segment: string): boolean {\n  // This is not a parameterized segment; however, we need to determine\n  // whether or not this segment appears in the URL. For example, this route\n  // groups do not appear in the URL, so they should be skipped. Any other\n  // special cases must be handled here.\n  // TODO: Consider encoding this directly into the router tree instead of\n  // inferring it on the client based on the segment type. Something like\n  // a `doesAppearInURL` flag in FlightRouterState.\n  if (\n    segment === ROOT_SEGMENT_REQUEST_KEY ||\n    // For some reason, the loader tree sometimes includes extra __PAGE__\n    // \"layouts\" when part of a parallel route. But it's not a leaf node.\n    // Otherwise, we wouldn't need this special case because pages are\n    // always leaf nodes.\n    // TODO: Investigate why the loader produces these fake page segments.\n    segment.startsWith(PAGE_SEGMENT_KEY) ||\n    // Route groups.\n    (segment[0] === '(' && segment.endsWith(')')) ||\n    segment === DEFAULT_SEGMENT_KEY ||\n    segment === '/_not-found'\n  ) {\n    return false\n  } else {\n    // All other segment types appear in the URL\n    return true\n  }\n}\n\nexport function getCacheKeyForDynamicParam(\n  paramValue: RouteParamValue,\n  renderedSearch: NormalizedSearch\n): string {\n  // This needs to match the logic in get-dynamic-param.ts, until we're able to\n  // unify the various implementations so that these are always computed on\n  // the client.\n  if (typeof paramValue === 'string') {\n    // TODO: Refactor or remove this helper function to accept a string rather\n    // than the whole segment type. Also we can probably just append the\n    // search string instead of turning it into JSON.\n    const pageSegmentWithSearchParams = addSearchParamsIfPageSegment(\n      paramValue,\n      Object.fromEntries(new URLSearchParams(renderedSearch))\n    ) as string\n    return pageSegmentWithSearchParams\n  } else if (paramValue === null) {\n    return ''\n  } else {\n    return paramValue.join('/')\n  }\n}\n\nexport function urlToUrlWithoutFlightMarker(url: URL): URL {\n  const urlWithoutFlightParameters = new URL(url)\n  urlWithoutFlightParameters.searchParams.delete(NEXT_RSC_UNION_QUERY)\n  if (process.env.NODE_ENV === 'production') {\n    if (\n      process.env.__NEXT_CONFIG_OUTPUT === 'export' &&\n      urlWithoutFlightParameters.pathname.endsWith('.txt')\n    ) {\n      const { pathname } = urlWithoutFlightParameters\n      const length = pathname.endsWith('/index.txt') ? 10 : 4\n      // Slice off `/index.txt` or `.txt` from the end of the pathname\n      urlWithoutFlightParameters.pathname = pathname.slice(0, -length)\n    }\n  }\n  return urlWithoutFlightParameters\n}\n\nexport function getParamValueFromCacheKey(\n  paramCacheKey: string,\n  paramType: DynamicParamTypesShort\n) {\n  // Turn the cache key string sent by the server (as part of FlightRouterState)\n  // into a value that can be passed to `useParams` and client components.\n  const isCatchAll = paramType === 'c' || paramType === 'oc'\n  if (isCatchAll) {\n    // Catch-all param keys are a concatenation of the path segments.\n    // See equivalent logic in `getSelectedParams`.\n    // TODO: We should just pass the array directly, rather than concatenate\n    // it to a string and then split it back to an array. It needs to be an\n    // array in some places, like when passing a key React, but we can convert\n    // it at runtime in those places.\n    return paramCacheKey.split('/')\n  }\n  return paramCacheKey\n}\n\nexport function urlSearchParamsToParsedUrlQuery(\n  searchParams: URLSearchParams\n): ParsedUrlQuery {\n  // Converts a URLSearchParams object to the same type used by the server when\n  // creating search params props, i.e. the type returned by Node's\n  // \"querystring\" module.\n  const result: ParsedUrlQuery = {}\n  for (const [key, value] of searchParams.entries()) {\n    if (result[key] === undefined) {\n      result[key] = value\n    } else if (Array.isArray(result[key])) {\n      result[key].push(value)\n    } else {\n      result[key] = [result[key], value]\n    }\n  }\n  return result\n}\n","export function createHrefFromUrl(\n  url: Pick<URL, 'pathname' | 'search' | 'hash'>,\n  includeHash: boolean = true\n): string {\n  return url.pathname + url.search + (includeHash ? url.hash : '')\n}\n","import type {\n  CacheNodeSeedData,\n  FlightData,\n  FlightDataPath,\n  FlightRouterState,\n  FlightSegmentPath,\n  Segment,\n  HeadData,\n  InitialRSCPayload,\n} from '../shared/lib/app-router-types'\nimport { PAGE_SEGMENT_KEY } from '../shared/lib/segment'\nimport type { NormalizedSearch } from './components/segment-cache'\nimport {\n  getCacheKeyForDynamicParam,\n  parseDynamicParamFromURLPart,\n  doesStaticSegmentAppearInURL,\n  getRenderedPathname,\n  getRenderedSearch,\n} from './route-params'\nimport { createHrefFromUrl } from './components/router-reducer/create-href-from-url'\n\nexport type NormalizedFlightData = {\n  /**\n   * The full `FlightSegmentPath` inclusive of the final `Segment`\n   */\n  segmentPath: FlightSegmentPath\n  /**\n   * The `FlightSegmentPath` exclusive of the final `Segment`\n   */\n  pathToSegment: FlightSegmentPath\n  segment: Segment\n  tree: FlightRouterState\n  seedData: CacheNodeSeedData | null\n  head: HeadData\n  isHeadPartial: boolean\n  isRootRender: boolean\n}\n\n// TODO: We should only have to export `normalizeFlightData`, however because the initial flight data\n// that gets passed to `createInitialRouterState` doesn't conform to the `FlightDataPath` type (it's missing the root segment)\n// we're currently exporting it so we can use it directly. This should be fixed as part of the unification of\n// the different ways we express `FlightSegmentPath`.\nexport function getFlightDataPartsFromPath(\n  flightDataPath: FlightDataPath\n): NormalizedFlightData {\n  // Pick the last 4 items from the `FlightDataPath` to get the [tree, seedData, viewport, isHeadPartial].\n  const flightDataPathLength = 4\n  // tree, seedData, and head are *always* the last three items in the `FlightDataPath`.\n  const [tree, seedData, head, isHeadPartial] =\n    flightDataPath.slice(-flightDataPathLength)\n  // The `FlightSegmentPath` is everything except the last three items. For a root render, it won't be present.\n  const segmentPath = flightDataPath.slice(0, -flightDataPathLength)\n\n  return {\n    // TODO: Unify these two segment path helpers. We are inconsistently pushing an empty segment (\"\")\n    // to the start of the segment path in some places which makes it hard to use solely the segment path.\n    // Look for \"// TODO-APP: remove ''\" in the codebase.\n    pathToSegment: segmentPath.slice(0, -1),\n    segmentPath,\n    // if the `FlightDataPath` corresponds with the root, there'll be no segment path,\n    // in which case we default to ''.\n    segment: segmentPath[segmentPath.length - 1] ?? '',\n    tree,\n    seedData,\n    head,\n    isHeadPartial,\n    isRootRender: flightDataPath.length === flightDataPathLength,\n  }\n}\n\nexport function createInitialRSCPayloadFromFallbackPrerender(\n  response: Response,\n  fallbackInitialRSCPayload: InitialRSCPayload\n): InitialRSCPayload {\n  // This is a static fallback page. In order to hydrate the page, we need to\n  // parse the client params from the URL, but to account for the possibility\n  // that the page was rewritten, we need to check the response headers\n  // for x-nextjs-rewritten-path or x-nextjs-rewritten-query headers. Since\n  // we can't access the headers of the initial document response, the client\n  // performs a fetch request to the current location. Since it's possible that\n  // the fetch request will be dynamically rewritten to a different path than\n  // the initial document, this fetch request delivers _all_ the hydration data\n  // for the page; it was not inlined into the document, like it normally\n  // would be.\n  //\n  // TODO: Consider treating the case where fetch is rewritten to a different\n  // path from the document as a special deopt case. We should optimistically\n  // assume this won't happen, inline the data into the document, and perform\n  // a minimal request (like a HEAD or range request) to verify that the\n  // response matches. Tricky to get right because we need to account for\n  // all the different deployment environments we support, like output:\n  // \"export\" mode, where we currently don't assume that custom response\n  // headers are present.\n\n  // Patch the Flight data sent by the server with the correct params parsed\n  // from the URL + response object.\n  const renderedPathname = getRenderedPathname(response)\n  const renderedSearch = getRenderedSearch(response)\n  const canonicalUrl = createHrefFromUrl(new URL(location.href))\n  const originalFlightDataPath = fallbackInitialRSCPayload.f[0]\n  const originalFlightRouterState = originalFlightDataPath[0]\n  return {\n    b: fallbackInitialRSCPayload.b,\n    c: canonicalUrl.split('/'),\n    q: renderedSearch,\n    i: fallbackInitialRSCPayload.i,\n    f: [\n      [\n        fillInFallbackFlightRouterState(\n          originalFlightRouterState,\n          renderedPathname,\n          renderedSearch as NormalizedSearch\n        ),\n        originalFlightDataPath[1],\n        originalFlightDataPath[2],\n        originalFlightDataPath[2],\n      ],\n    ],\n    m: fallbackInitialRSCPayload.m,\n    G: fallbackInitialRSCPayload.G,\n    s: fallbackInitialRSCPayload.s,\n    S: fallbackInitialRSCPayload.S,\n  }\n}\n\nfunction fillInFallbackFlightRouterState(\n  flightRouterState: FlightRouterState,\n  renderedPathname: string,\n  renderedSearch: NormalizedSearch\n): FlightRouterState {\n  const pathnameParts = renderedPathname.split('/').filter((p) => p !== '')\n  const index = 0\n  return fillInFallbackFlightRouterStateImpl(\n    flightRouterState,\n    renderedSearch,\n    pathnameParts,\n    index\n  )\n}\n\nfunction fillInFallbackFlightRouterStateImpl(\n  flightRouterState: FlightRouterState,\n  renderedSearch: NormalizedSearch,\n  pathnameParts: Array<string>,\n  pathnamePartsIndex: number\n): FlightRouterState {\n  const originalSegment = flightRouterState[0]\n  let newSegment: Segment\n  let doesAppearInURL: boolean\n  if (typeof originalSegment === 'string') {\n    newSegment = originalSegment\n    doesAppearInURL = doesStaticSegmentAppearInURL(originalSegment)\n  } else {\n    const paramName = originalSegment[0]\n    const paramType = originalSegment[2]\n    const paramValue = parseDynamicParamFromURLPart(\n      paramType,\n      pathnameParts,\n      pathnamePartsIndex\n    )\n    const cacheKey = getCacheKeyForDynamicParam(paramValue, renderedSearch)\n    newSegment = [paramName, cacheKey, paramType]\n    doesAppearInURL = true\n  }\n\n  // Only increment the index if the segment appears in the URL. If it's a\n  // \"virtual\" segment, like a route group, it remains the same.\n  const childPathnamePartsIndex = doesAppearInURL\n    ? pathnamePartsIndex + 1\n    : pathnamePartsIndex\n\n  const children = flightRouterState[1]\n  const newChildren: { [key: string]: FlightRouterState } = {}\n  for (let key in children) {\n    const childFlightRouterState = children[key]\n    newChildren[key] = fillInFallbackFlightRouterStateImpl(\n      childFlightRouterState,\n      renderedSearch,\n      pathnameParts,\n      childPathnamePartsIndex\n    )\n  }\n\n  const newState: FlightRouterState = [\n    newSegment,\n    newChildren,\n    null,\n    flightRouterState[3],\n    flightRouterState[4],\n  ]\n  return newState\n}\n\nexport function getNextFlightSegmentPath(\n  flightSegmentPath: FlightSegmentPath\n): FlightSegmentPath {\n  // Since `FlightSegmentPath` is a repeated tuple of `Segment` and `ParallelRouteKey`, we slice off two items\n  // to get the next segment path.\n  return flightSegmentPath.slice(2)\n}\n\nexport function normalizeFlightData(\n  flightData: FlightData\n): NormalizedFlightData[] | string {\n  // FlightData can be a string when the server didn't respond with a proper flight response,\n  // or when a redirect happens, to signal to the client that it needs to perform an MPA navigation.\n  if (typeof flightData === 'string') {\n    return flightData\n  }\n\n  return flightData.map((flightDataPath) =>\n    getFlightDataPartsFromPath(flightDataPath)\n  )\n}\n\n/**\n * This function is used to prepare the flight router state for the request.\n * It removes markers that are not needed by the server, and are purely used\n * for stashing state on the client.\n * @param flightRouterState - The flight router state to prepare.\n * @param isHmrRefresh - Whether this is an HMR refresh request.\n * @returns The prepared flight router state.\n */\nexport function prepareFlightRouterStateForRequest(\n  flightRouterState: FlightRouterState,\n  isHmrRefresh?: boolean\n): string {\n  // HMR requests need the complete, unmodified state for proper functionality\n  if (isHmrRefresh) {\n    return encodeURIComponent(JSON.stringify(flightRouterState))\n  }\n\n  return encodeURIComponent(\n    JSON.stringify(stripClientOnlyDataFromFlightRouterState(flightRouterState))\n  )\n}\n\n/**\n * Recursively strips client-only data from FlightRouterState while preserving\n * server-needed information for proper rendering decisions.\n */\nfunction stripClientOnlyDataFromFlightRouterState(\n  flightRouterState: FlightRouterState\n): FlightRouterState {\n  const [\n    segment,\n    parallelRoutes,\n    _url, // Intentionally unused - URLs are client-only\n    refreshMarker,\n    isRootLayout,\n    hasLoadingBoundary,\n  ] = flightRouterState\n\n  // __PAGE__ segments are always fetched from the server, so there's\n  // no need to send them up\n  const cleanedSegment = stripSearchParamsFromPageSegment(segment)\n\n  // Recursively process parallel routes\n  const cleanedParallelRoutes: { [key: string]: FlightRouterState } = {}\n  for (const [key, childState] of Object.entries(parallelRoutes)) {\n    cleanedParallelRoutes[key] =\n      stripClientOnlyDataFromFlightRouterState(childState)\n  }\n\n  const result: FlightRouterState = [\n    cleanedSegment,\n    cleanedParallelRoutes,\n    null, // URLs omitted - server reconstructs paths from segments\n    shouldPreserveRefreshMarker(refreshMarker) ? refreshMarker : null,\n  ]\n\n  // Append optional fields if present\n  if (isRootLayout !== undefined) {\n    result[4] = isRootLayout\n  }\n  if (hasLoadingBoundary !== undefined) {\n    result[5] = hasLoadingBoundary\n  }\n\n  return result\n}\n\n/**\n * Strips search parameters from __PAGE__ segments to prevent sensitive\n * client-side data from being sent to the server.\n */\nfunction stripSearchParamsFromPageSegment(segment: Segment): Segment {\n  if (\n    typeof segment === 'string' &&\n    segment.startsWith(PAGE_SEGMENT_KEY + '?')\n  ) {\n    return PAGE_SEGMENT_KEY\n  }\n  return segment\n}\n\n/**\n * Determines whether the refresh marker should be sent to the server\n * Client-only markers like 'refresh' are stripped, while server-needed markers\n * like 'refetch' and 'inside-shared-layout' are preserved.\n */\nfunction shouldPreserveRefreshMarker(\n  refreshMarker: FlightRouterState[3]\n): boolean {\n  return Boolean(refreshMarker && refreshMarker !== 'refresh')\n}\n","// This gets assigned as a side-effect during app initialization. Because it\n// represents the build used to create the JS bundle, it should never change\n// after being set, so we store it in a global variable.\n//\n// When performing RSC requests, if the incoming data has a different build ID,\n// we perform an MPA navigation/refresh to load the updated build and ensure\n// that the client and server in sync.\n\n// Starts as an empty string. In practice, because setAppBuildId is called\n// during initialization before hydration starts, this will always get\n// reassigned to the actual build ID before it's ever needed by a navigation.\n// If for some reasons it didn't, due to a bug or race condition, then on\n// navigation the build comparision would fail and trigger an MPA navigation.\nlet globalBuildId: string = ''\n\nexport function setAppBuildId(buildId: string) {\n  globalBuildId = buildId\n}\n\nexport function getAppBuildId(): string {\n  return globalBuildId\n}\n","// http://www.cse.yorku.ca/~oz/hash.html\n// More specifically, 32-bit hash via djbxor\n// (ref: https://gist.github.com/eplawless/52813b1d8ad9af510d85?permalink_comment_id=3367765#gistcomment-3367765)\n// This is due to number type differences between rust for turbopack to js number types,\n// where rust does not have easy way to repreesnt js's 53-bit float number type for the matching\n// overflow behavior. This is more `correct` in terms of having canonical hash across different runtime / implementation\n// as can gaurantee determinstic output from 32bit hash.\nexport function djb2Hash(str: string) {\n  let hash = 5381\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i)\n    hash = ((hash << 5) + hash + char) & 0xffffffff\n  }\n  return hash >>> 0\n}\n\nexport function hexHash(str: string) {\n  return djb2Hash(str).toString(36).slice(0, 5)\n}\n","import { hexHash } from '../../hash'\n\nexport function computeCacheBustingSearchParam(\n  prefetchHeader: '1' | '2' | '0' | undefined,\n  segmentPrefetchHeader: string | string[] | undefined,\n  stateTreeHeader: string | string[] | undefined,\n  nextUrlHeader: string | string[] | undefined\n): string {\n  if (\n    (prefetchHeader === undefined || prefetchHeader === '0') &&\n    segmentPrefetchHeader === undefined &&\n    stateTreeHeader === undefined &&\n    nextUrlHeader === undefined\n  ) {\n    return ''\n  }\n  return hexHash(\n    [\n      prefetchHeader || '0',\n      segmentPrefetchHeader || '0',\n      stateTreeHeader || '0',\n      nextUrlHeader || '0',\n    ].join(',')\n  )\n}\n","'use client'\n\nimport { computeCacheBustingSearchParam } from '../../../shared/lib/router/utils/cache-busting-search-param'\nimport {\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_SEGMENT_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_URL,\n  NEXT_RSC_UNION_QUERY,\n} from '../app-router-headers'\nimport type { RequestHeaders } from './fetch-server-response'\n\n/**\n * Mutates the provided URL by adding a cache-busting search parameter for CDNs that don't\n * support custom headers. This helps avoid caching conflicts by making each request unique.\n *\n * Rather than relying on the Vary header which some CDNs ignore, we append a search param\n * to create a unique URL that forces a fresh request.\n *\n * Example:\n * URL before: https://example.com/path?query=1\n * URL after: https://example.com/path?query=1&_rsc=abc123\n *\n * Note: This function mutates the input URL directly and does not return anything.\n *\n * TODO: Since we need to use a search param anyway, we could simplify by removing the custom\n * headers approach entirely and just use search params.\n */\nexport const setCacheBustingSearchParam = (\n  url: URL,\n  headers: RequestHeaders\n): void => {\n  const uniqueCacheKey = computeCacheBustingSearchParam(\n    headers[NEXT_ROUTER_PREFETCH_HEADER],\n    headers[NEXT_ROUTER_SEGMENT_PREFETCH_HEADER],\n    headers[NEXT_ROUTER_STATE_TREE_HEADER],\n    headers[NEXT_URL]\n  )\n  setCacheBustingSearchParamWithHash(url, uniqueCacheKey)\n}\n\n/**\n * Sets a cache-busting search parameter on a URL using a provided hash value.\n *\n * This function performs the same logic as `setCacheBustingSearchParam` but accepts\n * a pre-computed hash instead of computing it from headers.\n *\n * Example:\n * URL before: https://example.com/path?query=1\n * hash: \"abc123\"\n * URL after: https://example.com/path?query=1&_rsc=abc123\n *\n * If the hash is null, we will set `_rsc` search param without a value.\n * Like this: https://example.com/path?query=1&_rsc\n *\n * Note: This function mutates the input URL directly and does not return anything.\n */\nexport const setCacheBustingSearchParamWithHash = (\n  url: URL,\n  hash: string\n): void => {\n  /**\n   * Note that we intentionally do not use `url.searchParams.set` here:\n   *\n   * const url = new URL('https://example.com/search?q=custom%20spacing');\n   * url.searchParams.set('_rsc', 'abc123');\n   * console.log(url.toString()); // Outputs: https://example.com/search?q=custom+spacing&_rsc=abc123\n   *                                                                             ^ <--- this is causing confusion\n   * This is in fact intended based on https://url.spec.whatwg.org/#interface-urlsearchparams, but\n   * we want to preserve the %20 as %20 if that's what the user passed in, hence the custom\n   * logic below.\n   */\n  const existingSearch = url.search\n  const rawQuery = existingSearch.startsWith('?')\n    ? existingSearch.slice(1)\n    : existingSearch\n\n  // Always remove any existing cache busting param and add a fresh one to ensure\n  // we have the correct value based on current request headers\n  const pairs = rawQuery\n    .split('&')\n    .filter((pair) => pair && !pair.startsWith(`${NEXT_RSC_UNION_QUERY}=`))\n\n  if (hash.length > 0) {\n    pairs.push(`${NEXT_RSC_UNION_QUERY}=${hash}`)\n  } else {\n    pairs.push(`${NEXT_RSC_UNION_QUERY}`)\n  }\n  url.search = pairs.length ? `?${pairs.join('&')}` : ''\n}\n","'use client'\n\n// TODO: Explicitly import from client.browser\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  createFromReadableStream as createFromReadableStreamBrowser,\n  createFromFetch as createFromFetchBrowser,\n} from 'react-server-dom-webpack/client'\n\nimport type {\n  FlightRouterState,\n  NavigationFlightResponse,\n} from '../../../shared/lib/app-router-types'\n\nimport type { NEXT_ROUTER_SEGMENT_PREFETCH_HEADER } from '../app-router-headers'\nimport {\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_RSC_UNION_QUERY,\n  NEXT_URL,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n  NEXT_ROUTER_STALE_TIME_HEADER,\n  NEXT_HTML_REQUEST_ID_HEADER,\n  NEXT_REQUEST_ID_HEADER,\n} from '../app-router-headers'\nimport { callServer } from '../../app-call-server'\nimport { findSourceMapURL } from '../../app-find-source-map-url'\nimport { PrefetchKind } from './router-reducer-types'\nimport {\n  normalizeFlightData,\n  prepareFlightRouterStateForRequest,\n  type NormalizedFlightData,\n} from '../../flight-data-helpers'\nimport { getAppBuildId } from '../../app-build-id'\nimport { setCacheBustingSearchParam } from './set-cache-busting-search-param'\nimport {\n  getRenderedSearch,\n  urlToUrlWithoutFlightMarker,\n} from '../../route-params'\nimport type { NormalizedSearch } from '../segment-cache'\n\nconst createFromReadableStream =\n  createFromReadableStreamBrowser as (typeof import('react-server-dom-webpack/client.browser'))['createFromReadableStream']\nconst createFromFetch =\n  createFromFetchBrowser as (typeof import('react-server-dom-webpack/client.browser'))['createFromFetch']\n\nlet createDebugChannel:\n  | typeof import('../../dev/debug-channel').createDebugChannel\n  | undefined\n\nif (\n  process.env.NODE_ENV !== 'production' &&\n  process.env.__NEXT_REACT_DEBUG_CHANNEL\n) {\n  createDebugChannel = (\n    require('../../dev/debug-channel') as typeof import('../../dev/debug-channel')\n  ).createDebugChannel\n}\n\nexport interface FetchServerResponseOptions {\n  readonly flightRouterState: FlightRouterState\n  readonly nextUrl: string | null\n  readonly prefetchKind?: PrefetchKind\n  readonly isHmrRefresh?: boolean\n}\n\ntype SpaFetchServerResponseResult = {\n  flightData: NormalizedFlightData[]\n  canonicalUrl: URL\n  renderedSearch: NormalizedSearch\n  couldBeIntercepted: boolean\n  prerendered: boolean\n  postponed: boolean\n  staleTime: number\n  debugInfo: Array<any> | null\n}\n\ntype MpaFetchServerResponseResult = string\n\nexport type FetchServerResponseResult =\n  | MpaFetchServerResponseResult\n  | SpaFetchServerResponseResult\n\nexport type RequestHeaders = {\n  [RSC_HEADER]?: '1'\n  [NEXT_ROUTER_STATE_TREE_HEADER]?: string\n  [NEXT_URL]?: string\n  [NEXT_ROUTER_PREFETCH_HEADER]?: '1' | '2'\n  [NEXT_ROUTER_SEGMENT_PREFETCH_HEADER]?: string\n  'x-deployment-id'?: string\n  [NEXT_HMR_REFRESH_HEADER]?: '1'\n  // A header that is only added in test mode to assert on fetch priority\n  'Next-Test-Fetch-Priority'?: RequestInit['priority']\n  [NEXT_HTML_REQUEST_ID_HEADER]?: string // dev-only\n  [NEXT_REQUEST_ID_HEADER]?: string // dev-only\n}\n\nfunction doMpaNavigation(url: string): FetchServerResponseResult {\n  return urlToUrlWithoutFlightMarker(new URL(url, location.origin)).toString()\n}\n\nlet abortController = new AbortController()\n\nif (typeof window !== 'undefined') {\n  // Abort any in-flight requests when the page is unloaded, e.g. due to\n  // reloading the page or performing hard navigations. This allows us to ignore\n  // what would otherwise be a thrown TypeError when the browser cancels the\n  // requests.\n  window.addEventListener('pagehide', () => {\n    abortController.abort()\n  })\n\n  // Use a fresh AbortController instance on pageshow, e.g. when navigating back\n  // and the JavaScript execution context is restored by the browser.\n  window.addEventListener('pageshow', () => {\n    abortController = new AbortController()\n  })\n}\n\n/**\n * Fetch the flight data for the provided url. Takes in the current router state\n * to decide what to render server-side.\n */\nexport async function fetchServerResponse(\n  url: URL,\n  options: FetchServerResponseOptions\n): Promise<FetchServerResponseResult> {\n  const { flightRouterState, nextUrl, prefetchKind } = options\n\n  const headers: RequestHeaders = {\n    // Enable flight response\n    [RSC_HEADER]: '1',\n    // Provide the current router state\n    [NEXT_ROUTER_STATE_TREE_HEADER]: prepareFlightRouterStateForRequest(\n      flightRouterState,\n      options.isHmrRefresh\n    ),\n  }\n\n  /**\n   * Three cases:\n   * - `prefetchKind` is `undefined`, it means it's a normal navigation, so we want to prefetch the page data fully\n   * - `prefetchKind` is `full` - we want to prefetch the whole page so same as above\n   * - `prefetchKind` is `auto` - if the page is dynamic, prefetch the page data partially, if static prefetch the page data fully\n   */\n  if (prefetchKind === PrefetchKind.AUTO) {\n    headers[NEXT_ROUTER_PREFETCH_HEADER] = '1'\n  }\n\n  if (process.env.NODE_ENV === 'development' && options.isHmrRefresh) {\n    headers[NEXT_HMR_REFRESH_HEADER] = '1'\n  }\n\n  if (nextUrl) {\n    headers[NEXT_URL] = nextUrl\n  }\n\n  // In static export mode, we need to modify the URL to request the .txt file,\n  // but we should preserve the original URL for the canonical URL and error handling.\n  const originalUrl = url\n\n  try {\n    // When creating a \"temporary\" prefetch (the \"on-demand\" prefetch that gets created on navigation, if one doesn't exist)\n    // we send the request with a \"high\" priority as it's in response to a user interaction that could be blocking a transition.\n    // Otherwise, all other prefetches are sent with a \"low\" priority.\n    // We use \"auto\" for in all other cases to match the existing default, as this function is shared outside of prefetching.\n    const fetchPriority = prefetchKind\n      ? prefetchKind === PrefetchKind.TEMPORARY\n        ? 'high'\n        : 'low'\n      : 'auto'\n\n    if (process.env.NODE_ENV === 'production') {\n      if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n        // In \"output: export\" mode, we can't rely on headers to distinguish\n        // between HTML and RSC requests. Instead, we append an extra prefix\n        // to the request.\n        url = new URL(url)\n        if (url.pathname.endsWith('/')) {\n          url.pathname += 'index.txt'\n        } else {\n          url.pathname += '.txt'\n        }\n      }\n    }\n\n    // Typically, during a navigation, we decode the response using Flight's\n    // `createFromFetch` API, which accepts a `fetch` promise.\n    // TODO: Remove this check once the old PPR flag is removed\n    const isLegacyPPR =\n      process.env.__NEXT_PPR && !process.env.__NEXT_CACHE_COMPONENTS\n    const shouldImmediatelyDecode = !isLegacyPPR\n    const res = await createFetch<NavigationFlightResponse>(\n      url,\n      headers,\n      fetchPriority,\n      shouldImmediatelyDecode,\n      abortController.signal\n    )\n\n    const responseUrl = urlToUrlWithoutFlightMarker(new URL(res.url))\n    const canonicalUrl = res.redirected ? responseUrl : originalUrl\n\n    const contentType = res.headers.get('content-type') || ''\n    const interception = !!res.headers.get('vary')?.includes(NEXT_URL)\n    const postponed = !!res.headers.get(NEXT_DID_POSTPONE_HEADER)\n    const staleTimeHeaderSeconds = res.headers.get(\n      NEXT_ROUTER_STALE_TIME_HEADER\n    )\n    const staleTime =\n      staleTimeHeaderSeconds !== null\n        ? parseInt(staleTimeHeaderSeconds, 10) * 1000\n        : -1\n    let isFlightResponse = contentType.startsWith(RSC_CONTENT_TYPE_HEADER)\n\n    if (process.env.NODE_ENV === 'production') {\n      if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n        if (!isFlightResponse) {\n          isFlightResponse = contentType.startsWith('text/plain')\n        }\n      }\n    }\n\n    // If fetch returns something different than flight response handle it like a mpa navigation\n    // If the fetch was not 200, we also handle it like a mpa navigation\n    if (!isFlightResponse || !res.ok || !res.body) {\n      // in case the original URL came with a hash, preserve it before redirecting to the new URL\n      if (url.hash) {\n        responseUrl.hash = url.hash\n      }\n\n      return doMpaNavigation(responseUrl.toString())\n    }\n\n    // We may navigate to a page that requires a different Webpack runtime.\n    // In prod, every page will have the same Webpack runtime.\n    // In dev, the Webpack runtime is minimal for each page.\n    // We need to ensure the Webpack runtime is updated before executing client-side JS of the new page.\n    // TODO: This needs to happen in the Flight Client.\n    // Or Webpack needs to include the runtime update in the Flight response as\n    // a blocking script.\n    if (process.env.NODE_ENV !== 'production' && !process.env.TURBOPACK) {\n      await (\n        require('../../dev/hot-reloader/app/hot-reloader-app') as typeof import('../../dev/hot-reloader/app/hot-reloader-app')\n      ).waitForWebpackRuntimeHotUpdate()\n    }\n\n    let flightResponsePromise = res.flightResponse\n    if (flightResponsePromise === null) {\n      // Typically, `createFetch` would have already started decoding the\n      // Flight response. If it hasn't, though, we need to decode it now.\n      // TODO: This should only be reachable if legacy PPR is enabled (i.e. PPR\n      // without Cache Components). Remove this branch once legacy PPR\n      // is deleted.\n      const flightStream = postponed\n        ? createUnclosingPrefetchStream(res.body)\n        : res.body\n      flightResponsePromise =\n        createFromNextReadableStream<NavigationFlightResponse>(\n          flightStream,\n          headers\n        )\n    }\n\n    const flightResponse = await flightResponsePromise\n\n    if (getAppBuildId() !== flightResponse.b) {\n      return doMpaNavigation(res.url)\n    }\n\n    const normalizedFlightData = normalizeFlightData(flightResponse.f)\n    if (typeof normalizedFlightData === 'string') {\n      return doMpaNavigation(normalizedFlightData)\n    }\n\n    return {\n      flightData: normalizedFlightData,\n      canonicalUrl: canonicalUrl,\n      renderedSearch: getRenderedSearch(res),\n      couldBeIntercepted: interception,\n      prerendered: flightResponse.S,\n      postponed,\n      staleTime,\n      debugInfo: flightResponsePromise._debugInfo ?? null,\n    }\n  } catch (err) {\n    if (!abortController.signal.aborted) {\n      console.error(\n        `Failed to fetch RSC payload for ${originalUrl}. Falling back to browser navigation.`,\n        err\n      )\n    }\n\n    // If fetch fails handle it like a mpa navigation\n    // TODO-APP: Add a test for the case where a CORS request fails, e.g. external url redirect coming from the response.\n    // See https://github.com/vercel/next.js/issues/43605#issuecomment-1451617521 for a reproduction.\n    return originalUrl.toString()\n  }\n}\n\n// This is a subset of the standard Response type. We use a custom type for\n// this so we can limit which details about the response leak into the rest of\n// the codebase. For example, there's some custom logic for manually following\n// redirects, so \"redirected\" in this type could be a composite of multiple\n// browser fetch calls; however, this fact should not leak to the caller.\nexport type RSCResponse<T> = {\n  ok: boolean\n  redirected: boolean\n  headers: Headers\n  body: ReadableStream<Uint8Array> | null\n  status: number\n  url: string\n  flightResponse: (Promise<T> & { _debugInfo?: Array<any> }) | null\n}\n\nexport async function createFetch<T>(\n  url: URL,\n  headers: RequestHeaders,\n  fetchPriority: 'auto' | 'high' | 'low' | null,\n  shouldImmediatelyDecode: boolean,\n  signal?: AbortSignal\n): Promise<RSCResponse<T>> {\n  // TODO: In output: \"export\" mode, the headers do nothing. Omit them (and the\n  // cache busting search param) from the request so they're\n  // maximally cacheable.\n\n  if (process.env.__NEXT_TEST_MODE && fetchPriority !== null) {\n    headers['Next-Test-Fetch-Priority'] = fetchPriority\n  }\n\n  if (process.env.NEXT_DEPLOYMENT_ID) {\n    headers['x-deployment-id'] = process.env.NEXT_DEPLOYMENT_ID\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (self.__next_r) {\n      headers[NEXT_HTML_REQUEST_ID_HEADER] = self.__next_r\n    }\n\n    // Create a new request ID for the server action request. The server uses\n    // this to tag debug information sent via WebSocket to the client, which\n    // then routes those chunks to the debug channel associated with this ID.\n    headers[NEXT_REQUEST_ID_HEADER] = crypto\n      .getRandomValues(new Uint32Array(1))[0]\n      .toString(16)\n  }\n\n  const fetchOptions: RequestInit = {\n    // Backwards compat for older browsers. `same-origin` is the default in modern browsers.\n    credentials: 'same-origin',\n    headers,\n    priority: fetchPriority || undefined,\n    signal,\n  }\n  // `fetchUrl` is slightly different from `url` because we add a cache-busting\n  // search param to it. This should not leak outside of this function, so we\n  // track them separately.\n  let fetchUrl = new URL(url)\n  setCacheBustingSearchParam(fetchUrl, headers)\n  let fetchPromise = fetch(fetchUrl, fetchOptions)\n  // Immediately pass the fetch promise to the Flight client so that the debug\n  // info includes the latency from the client to the server. The internal timer\n  // in React starts as soon as `createFromFetch` is called.\n  //\n  // The only case where we don't do this is during a prefetch, because we have\n  // to do some extra processing of the response stream (see\n  // `createUnclosingPrefetchStream`). But this is fine, because a top-level\n  // prefetch response never blocks a navigation; if it hasn't already been\n  // written into the cache by the time the navigation happens, the router will\n  // go straight to a dynamic request.\n  let flightResponsePromise = shouldImmediatelyDecode\n    ? createFromNextFetch<T>(fetchPromise, headers)\n    : null\n  let browserResponse = await fetchPromise\n\n  // If the server responds with a redirect (e.g. 307), and the redirected\n  // location does not contain the cache busting search param set in the\n  // original request, the response is likely invalid — when following the\n  // redirect, the browser forwards the request headers, but since the cache\n  // busting search param is missing, the server will reject the request due to\n  // a mismatch.\n  //\n  // Ideally, we would be able to intercept the redirect response and perform it\n  // manually, instead of letting the browser automatically follow it, but this\n  // is not allowed by the fetch API.\n  //\n  // So instead, we must \"replay\" the redirect by fetching the new location\n  // again, but this time we'll append the cache busting search param to prevent\n  // a mismatch.\n  //\n  // TODO: We can optimize Next.js's built-in middleware APIs by returning a\n  // custom status code, to prevent the browser from automatically following it.\n  //\n  // This does not affect Server Action-based redirects; those are encoded\n  // differently, as part of the Flight body. It only affects redirects that\n  // occur in a middleware or a third-party proxy.\n\n  let redirected = browserResponse.redirected\n  if (process.env.__NEXT_CLIENT_VALIDATE_RSC_REQUEST_HEADERS) {\n    // This is to prevent a redirect loop. Same limit used by Chrome.\n    const MAX_REDIRECTS = 20\n    for (let n = 0; n < MAX_REDIRECTS; n++) {\n      if (!browserResponse.redirected) {\n        // The server did not perform a redirect.\n        break\n      }\n      const responseUrl = new URL(browserResponse.url, fetchUrl)\n      if (responseUrl.origin !== fetchUrl.origin) {\n        // The server redirected to an external URL. The rest of the logic below\n        // is not relevant, because it only applies to internal redirects.\n        break\n      }\n      if (\n        responseUrl.searchParams.get(NEXT_RSC_UNION_QUERY) ===\n        fetchUrl.searchParams.get(NEXT_RSC_UNION_QUERY)\n      ) {\n        // The redirected URL already includes the cache busting search param.\n        // This was probably intentional. Regardless, there's no reason to\n        // issue another request to this URL because it already has the param\n        // value that we would have added below.\n        break\n      }\n      // The RSC request was redirected. Assume the response is invalid.\n      //\n      // Append the cache busting search param to the redirected URL and\n      // fetch again.\n      // TODO: We should abort the previous request.\n      fetchUrl = new URL(responseUrl)\n      setCacheBustingSearchParam(fetchUrl, headers)\n      fetchPromise = fetch(fetchUrl, fetchOptions)\n      flightResponsePromise = shouldImmediatelyDecode\n        ? createFromNextFetch<T>(fetchPromise, headers)\n        : null\n      browserResponse = await fetchPromise\n      // We just performed a manual redirect, so this is now true.\n      redirected = true\n    }\n  }\n\n  // Remove the cache busting search param from the response URL, to prevent it\n  // from leaking outside of this function.\n  const responseUrl = new URL(browserResponse.url, fetchUrl)\n  responseUrl.searchParams.delete(NEXT_RSC_UNION_QUERY)\n\n  const rscResponse: RSCResponse<T> = {\n    url: responseUrl.href,\n\n    // This is true if any redirects occurred, either automatically by the\n    // browser, or manually by us. So it's different from\n    // `browserResponse.redirected`, which only tells us whether the browser\n    // followed a redirect, and only for the last response in the chain.\n    redirected,\n\n    // These can be copied from the last browser response we received. We\n    // intentionally only expose the subset of fields that are actually used\n    // elsewhere in the codebase.\n    ok: browserResponse.ok,\n    headers: browserResponse.headers,\n    body: browserResponse.body,\n    status: browserResponse.status,\n\n    // This is the exact promise returned by `createFromFetch`. It contains\n    // debug information that we need to transfer to any derived promises that\n    // are later rendered by React.\n    flightResponse: flightResponsePromise,\n  }\n\n  return rscResponse\n}\n\nexport function createFromNextReadableStream<T>(\n  flightStream: ReadableStream<Uint8Array>,\n  requestHeaders: RequestHeaders\n): Promise<T> {\n  return createFromReadableStream(flightStream, {\n    callServer,\n    findSourceMapURL,\n    debugChannel: createDebugChannel && createDebugChannel(requestHeaders),\n  })\n}\n\nfunction createFromNextFetch<T>(\n  promiseForResponse: Promise<Response>,\n  requestHeaders: RequestHeaders\n): Promise<T> & { _debugInfo?: Array<any> } {\n  return createFromFetch(promiseForResponse, {\n    callServer,\n    findSourceMapURL,\n    debugChannel: createDebugChannel && createDebugChannel(requestHeaders),\n  })\n}\n\nfunction createUnclosingPrefetchStream(\n  originalFlightStream: ReadableStream<Uint8Array>\n): ReadableStream<Uint8Array> {\n  // When PPR is enabled, prefetch streams may contain references that never\n  // resolve, because that's how we encode dynamic data access. In the decoded\n  // object returned by the Flight client, these are reified into hanging\n  // promises that suspend during render, which is effectively what we want.\n  // The UI resolves when it switches to the dynamic data stream\n  // (via useDeferredValue(dynamic, static)).\n  //\n  // However, the Flight implementation currently errors if the server closes\n  // the response before all the references are resolved. As a cheat to work\n  // around this, we wrap the original stream in a new stream that never closes,\n  // and therefore doesn't error.\n  const reader = originalFlightStream.getReader()\n  return new ReadableStream({\n    async pull(controller) {\n      while (true) {\n        const { done, value } = await reader.read()\n        if (!done) {\n          // Pass to the target stream and keep consuming the Flight response\n          // from the server.\n          controller.enqueue(value)\n          continue\n        }\n        // The server stream has closed. Exit, but intentionally do not close\n        // the target stream.\n        return\n      }\n    },\n  })\n}\n","// Utility type. Prefix<[A, B, C, D]> matches [A], [A, B], [A, B, C] etc.\nexport type Prefix<T extends any[]> = T extends [infer First, ...infer Rest]\n  ? [] | [First] | [First, ...Prefix<Rest>]\n  : []\n\nexport type TupleMap<Keypath extends Array<any>, V> = {\n  set(keys: Prefix<Keypath>, value: V): void\n  get(keys: Prefix<Keypath>): V | null\n  delete(keys: Prefix<Keypath>): void\n}\n\n/**\n * Creates a map whose keys are tuples. Tuples are compared per-element. This\n * is useful when a key has multiple parts, but you don't want to concatenate\n * them into a single string value.\n *\n * In the Segment Cache, we use this to store cache entries by both their href\n * and their Next-URL.\n *\n * Example:\n *   map.set(['https://localhost', 'foo/bar/baz'], 'yay');\n *   map.get(['https://localhost', 'foo/bar/baz']); // returns 'yay'\n */\nexport function createTupleMap<Keypath extends Array<any>, V>(): TupleMap<\n  Keypath,\n  V\n> {\n  type MapEntryShared = {\n    parent: MapEntry | null\n    key: any\n    map: Map<any, MapEntry> | null\n  }\n\n  type EmptyMapEntry = MapEntryShared & {\n    value: null\n    hasValue: false\n  }\n\n  type FullMapEntry = MapEntryShared & {\n    value: V\n    hasValue: true\n  }\n\n  type MapEntry = EmptyMapEntry | FullMapEntry\n\n  let rootEntry: MapEntry = {\n    parent: null,\n    key: null,\n    hasValue: false,\n    value: null,\n    map: null,\n  }\n\n  // To optimize successive lookups, we cache the last accessed keypath.\n  // Although it's not encoded in the type, these are both null or\n  // both non-null. It uses object equality, so to take advantage of this\n  // optimization, you must pass the same array instance to each successive\n  // method call, and you must also not mutate the array between calls.\n  let lastAccessedEntry: MapEntry | null = null\n  let lastAccessedKeys: Prefix<Keypath> | null = null\n\n  function getOrCreateEntry(keys: Prefix<Keypath>): MapEntry {\n    if (lastAccessedKeys === keys) {\n      return lastAccessedEntry!\n    }\n\n    // Go through each level of keys until we find the entry that matches,\n    // or create a new one if it doesn't already exist.\n    let entry = rootEntry\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n      let map = entry.map\n      if (map !== null) {\n        const existingEntry = map.get(key)\n        if (existingEntry !== undefined) {\n          // Found a match. Keep going.\n          entry = existingEntry\n          continue\n        }\n      } else {\n        map = new Map()\n        entry.map = map\n      }\n      // No entry exists yet at this level. Create a new one.\n      const newEntry: MapEntry = {\n        parent: entry,\n        key,\n        value: null,\n        hasValue: false,\n        map: null,\n      }\n      map.set(key, newEntry)\n      entry = newEntry\n    }\n\n    lastAccessedKeys = keys\n    lastAccessedEntry = entry\n\n    return entry\n  }\n\n  function getEntryIfExists(keys: Prefix<Keypath>): MapEntry | null {\n    if (lastAccessedKeys === keys) {\n      return lastAccessedEntry\n    }\n\n    // Go through each level of keys until we find the entry that matches, or\n    // return null if no match exists.\n    let entry = rootEntry\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n      let map = entry.map\n      if (map !== null) {\n        const existingEntry = map.get(key)\n        if (existingEntry !== undefined) {\n          // Found a match. Keep going.\n          entry = existingEntry\n          continue\n        }\n      }\n      // No entry exists at this level.\n      return null\n    }\n\n    lastAccessedKeys = keys\n    lastAccessedEntry = entry\n\n    return entry\n  }\n\n  function set(keys: Prefix<Keypath>, value: V): void {\n    const entry = getOrCreateEntry(keys)\n    entry.hasValue = true\n    entry.value = value\n  }\n\n  function get(keys: Prefix<Keypath>): V | null {\n    const entry = getEntryIfExists(keys)\n    if (entry === null || !entry.hasValue) {\n      return null\n    }\n    return entry.value\n  }\n\n  function deleteEntry(keys: Prefix<Keypath>): void {\n    const entry = getEntryIfExists(keys)\n    if (entry === null || !entry.hasValue) {\n      return\n    }\n\n    // Found a match. Delete it from the cache.\n    const deletedEntry: EmptyMapEntry = entry as any\n    deletedEntry.hasValue = false\n    deletedEntry.value = null\n\n    // Check if we can garbage collect the entry.\n    if (deletedEntry.map === null) {\n      // Since this entry has no value, and also no child entries, we can\n      // garbage collect it. Remove it from its parent, and keep garbage\n      // collecting the parents until we reach a non-empty entry.\n\n      // Unlike a `set` operation, these are no longer valid because the entry\n      // itself is being modified, not just the value it contains.\n      lastAccessedEntry = null\n      lastAccessedKeys = null\n\n      let parent = deletedEntry.parent\n      let key = deletedEntry.key\n      while (parent !== null) {\n        const parentMap = parent.map\n        if (parentMap !== null) {\n          parentMap.delete(key)\n          if (parentMap.size === 0) {\n            // We just removed the last entry in the parent map.\n            parent.map = null\n            if (parent.value === null) {\n              // The parent node has no child entries, nor does it have a value\n              // on itself. It can be garbage collected. Keep going.\n              key = parent.key\n              parent = parent.parent\n              continue\n            }\n          }\n        }\n        // The parent is not empty. Stop garbage collecting.\n        break\n      }\n    }\n  }\n\n  return {\n    set,\n    get,\n    delete: deleteEntry,\n  }\n}\n","export type LRU<T extends LRUNode> = {\n  put(node: T): void\n  delete(node: T): void\n  updateSize(node: T, size: number): void\n}\n\n// Doubly-linked list\ntype LRUNode<T = any> = {\n  // Although it's not encoded in the type, these are both null if the node is\n  // not in the LRU; both non-null if it is.\n  prev: T | null\n  next: T | null\n  size: number\n}\n\n// Rather than create an internal LRU node, the passed-in type must conform\n// the LRUNode interface. This is just a memory optimization to avoid creating\n// another object; we only use this for Segment Cache entries so it doesn't need\n// to be general purpose.\nexport function createLRU<T extends LRUNode>(\n  // From the LRU's perspective, the size unit is arbitrary, but for our\n  // purposes this is the byte size.\n  maxLruSize: number,\n  onEviction: (node: T) => void\n): LRU<T> {\n  let head: T | null = null\n  let didScheduleCleanup: boolean = false\n  let lruSize: number = 0\n\n  function put(node: T) {\n    if (head === node) {\n      // Already at the head\n      return\n    }\n    const prev = node.prev\n    const next = node.next\n    if (next === null || prev === null) {\n      // This is an insertion\n      lruSize += node.size\n      // Whenever we add an entry, we need to check if we've exceeded the\n      // max size. We don't evict entries immediately; they're evicted later in\n      // an asynchronous task.\n      ensureCleanupIsScheduled()\n    } else {\n      // This is a move. Remove from its current position.\n      prev.next = next\n      next.prev = prev\n    }\n\n    // Move to the front of the list\n    if (head === null) {\n      // This is the first entry\n      node.prev = node\n      node.next = node\n    } else {\n      // Add to the front of the list\n      const tail = head.prev\n      node.prev = tail\n      tail.next = node\n      node.next = head\n      head.prev = node\n    }\n    head = node\n  }\n\n  function updateSize(node: T, newNodeSize: number) {\n    // This is a separate function from `put` so that we can resize the entry\n    // regardless of whether it's currently being tracked by the LRU.\n    const prevNodeSize = node.size\n    node.size = newNodeSize\n    if (node.next === null) {\n      // This entry is not currently being tracked by the LRU.\n      return\n    }\n    // Update the total LRU size\n    lruSize = lruSize - prevNodeSize + newNodeSize\n    ensureCleanupIsScheduled()\n  }\n\n  function deleteNode(deleted: T) {\n    const next = deleted.next\n    const prev = deleted.prev\n    if (next !== null && prev !== null) {\n      lruSize -= deleted.size\n\n      deleted.next = null\n      deleted.prev = null\n\n      // Remove from the list\n      if (head === deleted) {\n        // Update the head\n        if (next === head) {\n          // This was the last entry\n          head = null\n        } else {\n          head = next\n        }\n      } else {\n        prev.next = next\n        next.prev = prev\n      }\n    } else {\n      // Already deleted\n    }\n  }\n\n  function ensureCleanupIsScheduled() {\n    if (didScheduleCleanup || lruSize <= maxLruSize) {\n      return\n    }\n    didScheduleCleanup = true\n    requestCleanupCallback(cleanup)\n  }\n\n  function cleanup() {\n    didScheduleCleanup = false\n\n    // Evict entries until we're at 90% capacity. We can assume this won't\n    // infinite loop because even if `maxLruSize` were 0, eventually\n    // `deleteNode` sets `head` to `null` when we run out entries.\n    const ninetyPercentMax = maxLruSize * 0.9\n    while (lruSize > ninetyPercentMax && head !== null) {\n      const tail = head.prev\n      deleteNode(tail)\n      onEviction(tail)\n    }\n  }\n\n  return {\n    put,\n    delete: deleteNode,\n    updateSize,\n  }\n}\n\nconst requestCleanupCallback =\n  typeof requestIdleCallback === 'function'\n    ? requestIdleCallback\n    : (cb: () => void) => setTimeout(cb, 0)\n","/**\n * For a given page path, this function ensures that there is a leading slash.\n * If there is not a leading slash, one is added, otherwise it is noop.\n */\nexport function ensureLeadingSlash(path: string) {\n  return path.startsWith('/') ? path : `/${path}`\n}\n","import { ensureLeadingSlash } from '../../page-path/ensure-leading-slash'\nimport { isGroupSegment } from '../../segment'\n\n/**\n * Normalizes an app route so it represents the actual request path. Essentially\n * performing the following transformations:\n *\n * - `/(dashboard)/user/[id]/page` to `/user/[id]`\n * - `/(dashboard)/account/page` to `/account`\n * - `/user/[id]/page` to `/user/[id]`\n * - `/account/page` to `/account`\n * - `/page` to `/`\n * - `/(dashboard)/user/[id]/route` to `/user/[id]`\n * - `/(dashboard)/account/route` to `/account`\n * - `/user/[id]/route` to `/user/[id]`\n * - `/account/route` to `/account`\n * - `/route` to `/`\n * - `/` to `/`\n *\n * @param route the app route to normalize\n * @returns the normalized pathname\n */\nexport function normalizeAppPath(route: string) {\n  return ensureLeadingSlash(\n    route.split('/').reduce((pathname, segment, index, segments) => {\n      // Empty segments are ignored.\n      if (!segment) {\n        return pathname\n      }\n\n      // Groups are ignored.\n      if (isGroupSegment(segment)) {\n        return pathname\n      }\n\n      // Parallel segments are ignored.\n      if (segment[0] === '@') {\n        return pathname\n      }\n\n      // The last segment (if it's a leaf) should be ignored.\n      if (\n        (segment === 'page' || segment === 'route') &&\n        index === segments.length - 1\n      ) {\n        return pathname\n      }\n\n      return `${pathname}/${segment}`\n    }, '')\n  )\n}\n\n/**\n * Strips the `.rsc` extension if it's in the pathname.\n * Since this function is used on full urls it checks `?` for searchParams handling.\n */\nexport function normalizeRscURL(url: string) {\n  return url.replace(\n    /\\.rsc($|\\?)/,\n    // $1 ensures `?` is preserved\n    '$1'\n  )\n}\n","import { normalizeAppPath } from './app-paths'\n\n// order matters here, the first match will be used\nexport const INTERCEPTION_ROUTE_MARKERS = [\n  '(..)(..)',\n  '(.)',\n  '(..)',\n  '(...)',\n] as const\n\nexport function isInterceptionRouteAppPath(path: string): boolean {\n  // TODO-APP: add more serious validation\n  return (\n    path\n      .split('/')\n      .find((segment) =>\n        INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m))\n      ) !== undefined\n  )\n}\n\ntype InterceptionRouteInformation = {\n  /**\n   * The intercepting route. This is the route that is being intercepted or the\n   * route that the user was coming from. This is matched by the Next-Url\n   * header.\n   */\n  interceptingRoute: string\n\n  /**\n   * The intercepted route. This is the route that is being intercepted or the\n   * route that the user is going to. This is matched by the request pathname.\n   */\n  interceptedRoute: string\n}\n\nexport function extractInterceptionRouteInformation(\n  path: string\n): InterceptionRouteInformation {\n  let interceptingRoute: string | undefined\n  let marker: (typeof INTERCEPTION_ROUTE_MARKERS)[number] | undefined\n  let interceptedRoute: string | undefined\n\n  for (const segment of path.split('/')) {\n    marker = INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m))\n    if (marker) {\n      ;[interceptingRoute, interceptedRoute] = path.split(marker, 2)\n      break\n    }\n  }\n\n  if (!interceptingRoute || !marker || !interceptedRoute) {\n    throw new Error(\n      `Invalid interception route: ${path}. Must be in the format /<intercepting route>/(..|...|..)(..)/<intercepted route>`\n    )\n  }\n\n  interceptingRoute = normalizeAppPath(interceptingRoute) // normalize the path, e.g. /(blog)/feed -> /feed\n\n  switch (marker) {\n    case '(.)':\n      // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route\n      if (interceptingRoute === '/') {\n        interceptedRoute = `/${interceptedRoute}`\n      } else {\n        interceptedRoute = interceptingRoute + '/' + interceptedRoute\n      }\n      break\n    case '(..)':\n      // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route\n      if (interceptingRoute === '/') {\n        throw new Error(\n          `Invalid interception route: ${path}. Cannot use (..) marker at the root level, use (.) instead.`\n        )\n      }\n      interceptedRoute = interceptingRoute\n        .split('/')\n        .slice(0, -1)\n        .concat(interceptedRoute)\n        .join('/')\n      break\n    case '(...)':\n      // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route\n      interceptedRoute = '/' + interceptedRoute\n      break\n    case '(..)(..)':\n      // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route\n\n      const splitInterceptingRoute = interceptingRoute.split('/')\n      if (splitInterceptingRoute.length <= 2) {\n        throw new Error(\n          `Invalid interception route: ${path}. Cannot use (..)(..) marker at the root level or one level up.`\n        )\n      }\n\n      interceptedRoute = splitInterceptingRoute\n        .slice(0, -2)\n        .concat(interceptedRoute)\n        .join('/')\n      break\n    default:\n      throw new Error('Invariant: unexpected marker')\n  }\n\n  return { interceptingRoute, interceptedRoute }\n}\n","import type {\n  FlightRouterState,\n  Segment,\n} from '../../../shared/lib/app-router-types'\nimport { INTERCEPTION_ROUTE_MARKERS } from '../../../shared/lib/router/utils/interception-routes'\nimport type { Params } from '../../../server/request/params'\nimport {\n  isGroupSegment,\n  DEFAULT_SEGMENT_KEY,\n  PAGE_SEGMENT_KEY,\n} from '../../../shared/lib/segment'\nimport { matchSegment } from '../match-segments'\n\nconst removeLeadingSlash = (segment: string): string => {\n  return segment[0] === '/' ? segment.slice(1) : segment\n}\n\nconst segmentToPathname = (segment: Segment): string => {\n  if (typeof segment === 'string') {\n    // 'children' is not a valid path -- it's technically a parallel route that corresponds with the current segment's page\n    // if we don't skip it, then the computed pathname might be something like `/children` which doesn't make sense.\n    if (segment === 'children') return ''\n\n    return segment\n  }\n\n  return segment[1]\n}\n\nfunction normalizeSegments(segments: string[]): string {\n  return (\n    segments.reduce((acc, segment) => {\n      segment = removeLeadingSlash(segment)\n      if (segment === '' || isGroupSegment(segment)) {\n        return acc\n      }\n\n      return `${acc}/${segment}`\n    }, '') || '/'\n  )\n}\n\nexport function extractPathFromFlightRouterState(\n  flightRouterState: FlightRouterState\n): string | undefined {\n  const segment = Array.isArray(flightRouterState[0])\n    ? flightRouterState[0][1]\n    : flightRouterState[0]\n\n  if (\n    segment === DEFAULT_SEGMENT_KEY ||\n    INTERCEPTION_ROUTE_MARKERS.some((m) => segment.startsWith(m))\n  )\n    return undefined\n\n  if (segment.startsWith(PAGE_SEGMENT_KEY)) return ''\n\n  const segments = [segmentToPathname(segment)]\n  const parallelRoutes = flightRouterState[1] ?? {}\n\n  const childrenPath = parallelRoutes.children\n    ? extractPathFromFlightRouterState(parallelRoutes.children)\n    : undefined\n\n  if (childrenPath !== undefined) {\n    segments.push(childrenPath)\n  } else {\n    for (const [key, value] of Object.entries(parallelRoutes)) {\n      if (key === 'children') continue\n\n      const childPath = extractPathFromFlightRouterState(value)\n\n      if (childPath !== undefined) {\n        segments.push(childPath)\n      }\n    }\n  }\n\n  return normalizeSegments(segments)\n}\n\nfunction computeChangedPathImpl(\n  treeA: FlightRouterState,\n  treeB: FlightRouterState\n): string | null {\n  const [segmentA, parallelRoutesA] = treeA\n  const [segmentB, parallelRoutesB] = treeB\n\n  const normalizedSegmentA = segmentToPathname(segmentA)\n  const normalizedSegmentB = segmentToPathname(segmentB)\n\n  if (\n    INTERCEPTION_ROUTE_MARKERS.some(\n      (m) =>\n        normalizedSegmentA.startsWith(m) || normalizedSegmentB.startsWith(m)\n    )\n  ) {\n    return ''\n  }\n\n  if (!matchSegment(segmentA, segmentB)) {\n    // once we find where the tree changed, we compute the rest of the path by traversing the tree\n    return extractPathFromFlightRouterState(treeB) ?? ''\n  }\n\n  for (const parallelRouterKey in parallelRoutesA) {\n    if (parallelRoutesB[parallelRouterKey]) {\n      const changedPath = computeChangedPathImpl(\n        parallelRoutesA[parallelRouterKey],\n        parallelRoutesB[parallelRouterKey]\n      )\n      if (changedPath !== null) {\n        return `${segmentToPathname(segmentB)}/${changedPath}`\n      }\n    }\n  }\n\n  return null\n}\n\nexport function computeChangedPath(\n  treeA: FlightRouterState,\n  treeB: FlightRouterState\n): string | null {\n  const changedPath = computeChangedPathImpl(treeA, treeB)\n\n  if (changedPath == null || changedPath === '/') {\n    return changedPath\n  }\n\n  // lightweight normalization to remove route groups\n  return normalizeSegments(changedPath.split('/'))\n}\n\n/**\n * Recursively extracts dynamic parameters from FlightRouterState.\n */\nexport function getSelectedParams(\n  currentTree: FlightRouterState,\n  params: Params = {}\n): Params {\n  const parallelRoutes = currentTree[1]\n\n  for (const parallelRoute of Object.values(parallelRoutes)) {\n    const segment = parallelRoute[0]\n    const isDynamicParameter = Array.isArray(segment)\n    const segmentValue = isDynamicParameter ? segment[1] : segment\n    if (!segmentValue || segmentValue.startsWith(PAGE_SEGMENT_KEY)) continue\n\n    // Ensure catchAll and optional catchall are turned into an array\n    const isCatchAll =\n      isDynamicParameter && (segment[2] === 'c' || segment[2] === 'oc')\n\n    if (isCatchAll) {\n      params[segment[0]] = segment[1].split('/')\n    } else if (isDynamicParameter) {\n      params[segment[0]] = segment[1]\n    }\n\n    params = getSelectedParams(parallelRoute, params)\n  }\n\n  return params\n}\n","import { computeChangedPath } from './compute-changed-path'\nimport type {\n  Mutable,\n  ReadonlyReducerState,\n  ReducerState,\n} from './router-reducer-types'\n\nfunction isNotUndefined<T>(value: T): value is Exclude<T, undefined> {\n  return typeof value !== 'undefined'\n}\n\nexport function handleMutable(\n  state: ReadonlyReducerState,\n  mutable: Mutable\n): ReducerState {\n  // shouldScroll is true by default, can override to false.\n  const shouldScroll = mutable.shouldScroll ?? true\n\n  let previousNextUrl = state.previousNextUrl\n  let nextUrl = state.nextUrl\n\n  if (isNotUndefined(mutable.patchedTree)) {\n    // If we received a patched tree, we need to compute the changed path.\n    const changedPath = computeChangedPath(state.tree, mutable.patchedTree)\n    if (changedPath) {\n      // If the tree changed, we need to update the nextUrl\n      previousNextUrl = nextUrl\n      nextUrl = changedPath\n    } else if (!nextUrl) {\n      // if the tree ends up being the same (ie, no changed path), and we don't have a nextUrl, then we should use the canonicalUrl\n      nextUrl = state.canonicalUrl\n    }\n    // otherwise this will be a no-op and continue to use the existing nextUrl\n  }\n\n  return {\n    // Set href.\n    canonicalUrl: mutable.canonicalUrl ?? state.canonicalUrl,\n    renderedSearch: mutable.renderedSearch ?? state.renderedSearch,\n    pushRef: {\n      pendingPush: isNotUndefined(mutable.pendingPush)\n        ? mutable.pendingPush\n        : state.pushRef.pendingPush,\n      mpaNavigation: isNotUndefined(mutable.mpaNavigation)\n        ? mutable.mpaNavigation\n        : state.pushRef.mpaNavigation,\n      preserveCustomHistoryState: isNotUndefined(\n        mutable.preserveCustomHistoryState\n      )\n        ? mutable.preserveCustomHistoryState\n        : state.pushRef.preserveCustomHistoryState,\n    },\n    // All navigation requires scroll and focus management to trigger.\n    focusAndScrollRef: {\n      apply: shouldScroll\n        ? isNotUndefined(mutable?.scrollableSegments)\n          ? true\n          : state.focusAndScrollRef.apply\n        : // If shouldScroll is false then we should not apply scroll and focus management.\n          false,\n      onlyHashChange: mutable.onlyHashChange || false,\n      hashFragment: shouldScroll\n        ? // Empty hash should trigger default behavior of scrolling layout into view.\n          // #top is handled in layout-router.\n          mutable.hashFragment && mutable.hashFragment !== ''\n          ? // Remove leading # and decode hash to make non-latin hashes work.\n            decodeURIComponent(mutable.hashFragment.slice(1))\n          : state.focusAndScrollRef.hashFragment\n        : // If shouldScroll is false then we should not apply scroll and focus management.\n          null,\n      segmentPaths: shouldScroll\n        ? (mutable?.scrollableSegments ?? state.focusAndScrollRef.segmentPaths)\n        : // If shouldScroll is false then we should not apply scroll and focus management.\n          [],\n    },\n    // Apply cache.\n    cache: mutable.cache ? mutable.cache : state.cache,\n    // Apply patched router state.\n    tree: isNotUndefined(mutable.patchedTree)\n      ? mutable.patchedTree\n      : state.tree,\n    nextUrl,\n    previousNextUrl: previousNextUrl,\n    debugInfo: mutable.collectedDebugInfo ?? null,\n  }\n}\n","import type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../../../shared/lib/app-router-types'\nimport { createHrefFromUrl } from '../create-href-from-url'\nimport type {\n  Mutable,\n  NavigateAction,\n  ReadonlyReducerState,\n  ReducerState,\n} from '../router-reducer-types'\nimport { handleMutable } from '../handle-mutable'\n\nimport {\n  navigate as navigateUsingSegmentCache,\n  NavigationResultTag,\n  type NavigationResult,\n} from '../../segment-cache'\n\n// These values are set by `define-env-plugin` (based on `nextConfig.experimental.staleTimes`)\n// and default to 5 minutes (static) / 0 seconds (dynamic)\nexport const DYNAMIC_STALETIME_MS =\n  Number(process.env.__NEXT_CLIENT_ROUTER_DYNAMIC_STALETIME) * 1000\n\nexport const STATIC_STALETIME_MS =\n  Number(process.env.__NEXT_CLIENT_ROUTER_STATIC_STALETIME) * 1000\n\nexport function handleExternalUrl(\n  state: ReadonlyReducerState,\n  mutable: Mutable,\n  url: string,\n  pendingPush: boolean\n) {\n  mutable.mpaNavigation = true\n  mutable.canonicalUrl = url\n  mutable.pendingPush = pendingPush\n  mutable.scrollableSegments = undefined\n\n  return handleMutable(state, mutable)\n}\n\nexport function generateSegmentsFromPatch(\n  flightRouterPatch: FlightRouterState\n): FlightSegmentPath[] {\n  const segments: FlightSegmentPath[] = []\n  const [segment, parallelRoutes] = flightRouterPatch\n\n  if (Object.keys(parallelRoutes).length === 0) {\n    return [[segment]]\n  }\n\n  for (const [parallelRouteKey, parallelRoute] of Object.entries(\n    parallelRoutes\n  )) {\n    for (const childSegment of generateSegmentsFromPatch(parallelRoute)) {\n      // If the segment is empty, it means we are at the root of the tree\n      if (segment === '') {\n        segments.push([parallelRouteKey, ...childSegment])\n      } else {\n        segments.push([segment, parallelRouteKey, ...childSegment])\n      }\n    }\n  }\n\n  return segments\n}\n\nfunction handleNavigationResult(\n  url: URL,\n  state: ReadonlyReducerState,\n  mutable: Mutable,\n  pendingPush: boolean,\n  result: NavigationResult\n): ReducerState {\n  switch (result.tag) {\n    case NavigationResultTag.MPA: {\n      // Perform an MPA navigation.\n      const newUrl = result.data\n      return handleExternalUrl(state, mutable, newUrl, pendingPush)\n    }\n    case NavigationResultTag.NoOp: {\n      // The server responded with no change to the current page. However, if\n      // the URL changed, we still need to update that.\n      const newCanonicalUrl = result.data.canonicalUrl\n      mutable.canonicalUrl = newCanonicalUrl\n\n      // Check if the only thing that changed was the hash fragment.\n      const oldUrl = new URL(state.canonicalUrl, url)\n      const onlyHashChange =\n        // We don't need to compare the origins, because client-driven\n        // navigations are always same-origin.\n        url.pathname === oldUrl.pathname &&\n        url.search === oldUrl.search &&\n        url.hash !== oldUrl.hash\n      if (onlyHashChange) {\n        // The only updated part of the URL is the hash.\n        mutable.onlyHashChange = true\n        mutable.shouldScroll = result.data.shouldScroll\n        mutable.hashFragment = url.hash\n        // Setting this to an empty array triggers a scroll for all new and\n        // updated segments. See `ScrollAndFocusHandler` for more details.\n        mutable.scrollableSegments = []\n      }\n\n      return handleMutable(state, mutable)\n    }\n    case NavigationResultTag.Success: {\n      // Received a new result.\n      mutable.cache = result.data.cacheNode\n      mutable.patchedTree = result.data.flightRouterState\n      mutable.renderedSearch = result.data.renderedSearch\n      mutable.canonicalUrl = result.data.canonicalUrl\n      mutable.scrollableSegments = result.data.scrollableSegments\n      mutable.shouldScroll = result.data.shouldScroll\n      mutable.hashFragment = result.data.hash\n      return handleMutable(state, mutable)\n    }\n    case NavigationResultTag.Async: {\n      return result.data.then(\n        (asyncResult) =>\n          handleNavigationResult(url, state, mutable, pendingPush, asyncResult),\n        // If the navigation failed, return the current state.\n        // TODO: This matches the current behavior but we need to do something\n        // better here if the network fails.\n        () => {\n          return state\n        }\n      )\n    }\n    default: {\n      result satisfies never\n      return state\n    }\n  }\n}\n\nexport function navigateReducer(\n  state: ReadonlyReducerState,\n  action: NavigateAction\n): ReducerState {\n  const { url, isExternalUrl, navigateType, shouldScroll } = action\n  const mutable: Mutable = {}\n  const href = createHrefFromUrl(url)\n  const pendingPush = navigateType === 'push'\n\n  mutable.preserveCustomHistoryState = false\n  mutable.pendingPush = pendingPush\n\n  if (isExternalUrl) {\n    return handleExternalUrl(state, mutable, url.toString(), pendingPush)\n  }\n\n  // Handles case where `<meta http-equiv=\"refresh\">` tag is present,\n  // which will trigger an MPA navigation.\n  if (document.getElementById('__next-page-redirect')) {\n    return handleExternalUrl(state, mutable, href, pendingPush)\n  }\n\n  // Temporary glue code between the router reducer and the new navigation\n  // implementation. Eventually we'll rewrite the router reducer to a\n  // state machine.\n  const currentUrl = new URL(state.canonicalUrl, location.origin)\n  const result = navigateUsingSegmentCache(\n    url,\n    currentUrl,\n    state.cache,\n    state.tree,\n    state.nextUrl,\n    shouldScroll,\n    mutable\n  )\n  return handleNavigationResult(url, state, mutable, pendingPush, result)\n}\n","// In output: export mode, the build id is added to the start of the HTML\n// document, directly after the doctype declaration. During a prefetch, the\n// client performs a range request to get the build id, so it can check whether\n// the target page belongs to the same build.\n//\n// The first 64 bytes of the document are requested. The exact number isn't\n// too important; it must be larger than the build id + doctype + closing and\n// ending comment markers, but it doesn't need to match the end of the\n// comment exactly.\n//\n// Build ids are 21 bytes long in the default implementation, though this\n// can be overridden in the Next.js config. For the purposes of this check,\n// it's OK to only match the start of the id, so we'll truncate it if exceeds\n// a certain length.\n\nconst DOCTYPE_PREFIX = '<!DOCTYPE html>' // 15 bytes\nconst MAX_BUILD_ID_LENGTH = 24\n\n// Request the first 64 bytes. The Range header is inclusive of the end value.\nexport const DOC_PREFETCH_RANGE_HEADER_VALUE = 'bytes=0-63'\n\nfunction escapeBuildId(buildId: string) {\n  // If the build id is longer than the given limit, it's OK for our purposes\n  // to only match the beginning.\n  const truncated = buildId.slice(0, MAX_BUILD_ID_LENGTH)\n  // Replace hyphens with underscores so it doesn't break the HTML comment.\n  // (Unlikely, but if this did happen it would break the whole document.)\n  return truncated.replace(/-/g, '_')\n}\n\nexport function insertBuildIdComment(originalHtml: string, buildId: string) {\n  if (\n    // Skip if the build id contains a closing comment marker.\n    buildId.includes('-->') ||\n    // React always inserts a doctype at the start of the document. Skip if it\n    // isn't present. Shouldn't happen; suggests an issue elsewhere.\n    !originalHtml.startsWith(DOCTYPE_PREFIX)\n  ) {\n    // Return the original HTML unchanged. This means the document will not\n    // be prefetched.\n    // TODO: The build id comment is currently only used during prefetches, but\n    // if we eventually use this mechanism for regular navigations, we may need\n    // to error during build if we fail to insert it for some reason.\n    return originalHtml\n  }\n  // The comment must be inserted after the doctype.\n  return originalHtml.replace(\n    DOCTYPE_PREFIX,\n    DOCTYPE_PREFIX + '<!--' + escapeBuildId(buildId) + '-->'\n  )\n}\n\nexport function doesExportedHtmlMatchBuildId(\n  partialHtmlDocument: string,\n  buildId: string\n) {\n  // Check whether the document starts with the expected buildId.\n  return partialHtmlDocument.startsWith(\n    DOCTYPE_PREFIX + '<!--' + escapeBuildId(buildId) + '-->'\n  )\n}\n","import type {\n  TreePrefetch,\n  RootTreePrefetch,\n  SegmentPrefetch,\n} from '../../../server/app-render/collect-segment-data'\nimport type {\n  HeadData,\n  LoadingModuleData,\n} from '../../../shared/lib/app-router-types'\nimport type {\n  CacheNodeSeedData,\n  DynamicParamTypesShort,\n  Segment as FlightRouterStateSegment,\n} from '../../../shared/lib/app-router-types'\nimport { HasLoadingBoundary } from '../../../shared/lib/app-router-types'\nimport {\n  NEXT_DID_POSTPONE_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_SEGMENT_PREFETCH_HEADER,\n  NEXT_ROUTER_STALE_TIME_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_URL,\n  RSC_CONTENT_TYPE_HEADER,\n  RSC_HEADER,\n} from '../app-router-headers'\nimport {\n  createFetch,\n  createFromNextReadableStream,\n  type RSCResponse,\n  type RequestHeaders,\n} from '../router-reducer/fetch-server-response'\nimport {\n  pingPrefetchTask,\n  isPrefetchTaskDirty,\n  type PrefetchTask,\n  type PrefetchSubtaskResult,\n  startRevalidationCooldown,\n} from './scheduler'\nimport { getAppBuildId } from '../../app-build-id'\nimport { createHrefFromUrl } from '../router-reducer/create-href-from-url'\nimport type {\n  NormalizedHref,\n  NormalizedNextUrl,\n  NormalizedSearch,\n  RouteCacheKey,\n} from './cache-key'\n// TODO: Rename this module to avoid confusion with other types of cache keys\nimport { createCacheKey as createPrefetchRequestKey } from './cache-key'\nimport {\n  doesStaticSegmentAppearInURL,\n  getCacheKeyForDynamicParam,\n  getParamValueFromCacheKey,\n  getRenderedPathname,\n  getRenderedSearch,\n  parseDynamicParamFromURLPart,\n  type RouteParam,\n} from '../../route-params'\nimport { createTupleMap, type TupleMap, type Prefix } from './tuple-map'\nimport { createLRU } from './lru'\nimport {\n  appendSegmentCacheKeyPart,\n  appendSegmentRequestKeyPart,\n  convertSegmentPathToStaticExportFilename,\n  createSegmentCacheKeyPart,\n  createSegmentRequestKeyPart,\n  ROOT_SEGMENT_CACHE_KEY,\n  ROOT_SEGMENT_REQUEST_KEY,\n  type SegmentCacheKey,\n  type SegmentRequestKey,\n} from '../../../shared/lib/segment-cache/segment-value-encoding'\nimport type {\n  FlightRouterState,\n  NavigationFlightResponse,\n} from '../../../shared/lib/app-router-types'\nimport {\n  normalizeFlightData,\n  prepareFlightRouterStateForRequest,\n} from '../../flight-data-helpers'\nimport { STATIC_STALETIME_MS } from '../router-reducer/reducers/navigate-reducer'\nimport { pingVisibleLinks } from '../links'\nimport { PAGE_SEGMENT_KEY } from '../../../shared/lib/segment'\nimport {\n  DOC_PREFETCH_RANGE_HEADER_VALUE,\n  doesExportedHtmlMatchBuildId,\n} from '../../../shared/lib/segment-cache/output-export-prefetch-encoding'\nimport { FetchStrategy } from '../segment-cache'\nimport { createPromiseWithResolvers } from '../../../shared/lib/promise-with-resolvers'\n\n// A note on async/await when working in the prefetch cache:\n//\n// Most async operations in the prefetch cache should *not* use async/await,\n// Instead, spawn a subtask that writes the results to a cache entry, and attach\n// a \"ping\" listener to notify the prefetch queue to try again.\n//\n// The reason is we need to be able to access the segment cache and traverse its\n// data structures synchronously. For example, if there's a synchronous update\n// we can take an immediate snapshot of the cache to produce something we can\n// render. Limiting the use of async/await also makes it easier to avoid race\n// conditions, which is especially important because is cache is mutable.\n//\n// Another reason is that while we're performing async work, it's possible for\n// existing entries to become stale, or for Link prefetches to be removed from\n// the queue. For optimal scheduling, we need to be able to \"cancel\" subtasks\n// that are no longer needed. So, when a segment is received from the server, we\n// restart from the root of the tree that's being prefetched, to confirm all the\n// parent segments are still cached. If the segment is no longer reachable from\n// the root, then it's effectively canceled. This is similar to the design of\n// Rust Futures, or React Suspense.\n\nexport type RouteTree = {\n  cacheKey: SegmentCacheKey\n  requestKey: SegmentRequestKey\n  // TODO: Remove the `segment` field, now that it can be reconstructed\n  // from `param`.\n  segment: FlightRouterStateSegment\n  param: RouteParam | null\n  slots: null | {\n    [parallelRouteKey: string]: RouteTree\n  }\n  isRootLayout: boolean\n\n  // If this is a dynamic route, indicates whether there is a loading boundary\n  // somewhere in the tree. If not, we can skip the prefetch for the data,\n  // because we know it would be an empty response. (For a static/PPR route,\n  // this value is disregarded, because in that model `loading.tsx` is treated\n  // like any other Suspense boundary.)\n  hasLoadingBoundary: HasLoadingBoundary\n\n  // Indicates whether this route has a runtime prefetch that we can request.\n  // This is determined by the server; it's not purely a user configuration\n  // because the server may determine that a route is fully static and doesn't\n  // need runtime prefetching regardless of the configuration.\n  hasRuntimePrefetch: boolean\n}\n\ntype RouteCacheEntryShared = {\n  staleAt: number\n  // This is false only if we're certain the route cannot be intercepted. It's\n  // true in all other cases, including on initialization when we haven't yet\n  // received a response from the server.\n  couldBeIntercepted: boolean\n\n  // See comment in scheduler.ts for context\n  TODO_metadataStatus: EntryStatus.Empty | EntryStatus.Fulfilled\n  TODO_isHeadDynamic: boolean\n\n  // LRU-related fields\n  keypath: null | Prefix<RouteCacheKeypath>\n  next: null | RouteCacheEntry\n  prev: null | RouteCacheEntry\n  size: number\n}\n\n/**\n * Tracks the status of a cache entry as it progresses from no data (Empty),\n * waiting for server data (Pending), and finished (either Fulfilled or\n * Rejected depending on the response from the server.\n */\nexport const enum EntryStatus {\n  Empty = 0,\n  Pending = 1,\n  Fulfilled = 2,\n  Rejected = 3,\n}\n\ntype PendingRouteCacheEntry = RouteCacheEntryShared & {\n  status: EntryStatus.Empty | EntryStatus.Pending\n  blockedTasks: Set<PrefetchTask> | null\n  canonicalUrl: null\n  renderedSearch: null\n  tree: null\n  head: HeadData | null\n  isHeadPartial: true\n  isPPREnabled: false\n}\n\ntype RejectedRouteCacheEntry = RouteCacheEntryShared & {\n  status: EntryStatus.Rejected\n  blockedTasks: Set<PrefetchTask> | null\n  canonicalUrl: null\n  renderedSearch: null\n  tree: null\n  head: null\n  isHeadPartial: true\n  isPPREnabled: boolean\n}\n\nexport type FulfilledRouteCacheEntry = RouteCacheEntryShared & {\n  status: EntryStatus.Fulfilled\n  blockedTasks: null\n  canonicalUrl: string\n  renderedSearch: NormalizedSearch\n  tree: RouteTree\n  head: HeadData\n  isHeadPartial: boolean\n  isPPREnabled: boolean\n}\n\nexport type RouteCacheEntry =\n  | PendingRouteCacheEntry\n  | FulfilledRouteCacheEntry\n  | RejectedRouteCacheEntry\n\ntype SegmentCacheEntryShared = {\n  staleAt: number\n  fetchStrategy: FetchStrategy\n  revalidating: SegmentCacheEntry | null\n\n  // LRU-related fields\n  keypath: null | Prefix<SegmentCacheKeypath>\n  next: null | SegmentCacheEntry\n  prev: null | SegmentCacheEntry\n  size: number\n}\n\nexport type EmptySegmentCacheEntry = SegmentCacheEntryShared & {\n  status: EntryStatus.Empty\n  rsc: null\n  loading: null\n  isPartial: true\n  promise: null\n}\n\nexport type PendingSegmentCacheEntry = SegmentCacheEntryShared & {\n  status: EntryStatus.Pending\n  rsc: null\n  loading: null\n  isPartial: true\n  promise: null | PromiseWithResolvers<FulfilledSegmentCacheEntry | null>\n}\n\ntype RejectedSegmentCacheEntry = SegmentCacheEntryShared & {\n  status: EntryStatus.Rejected\n  rsc: null\n  loading: null\n  isPartial: true\n  promise: null\n}\n\nexport type FulfilledSegmentCacheEntry = SegmentCacheEntryShared & {\n  status: EntryStatus.Fulfilled\n  rsc: React.ReactNode | null\n  loading: LoadingModuleData | Promise<LoadingModuleData>\n  isPartial: boolean\n  promise: null\n}\n\nexport type SegmentCacheEntry =\n  | EmptySegmentCacheEntry\n  | PendingSegmentCacheEntry\n  | RejectedSegmentCacheEntry\n  | FulfilledSegmentCacheEntry\n\nexport type NonEmptySegmentCacheEntry = Exclude<\n  SegmentCacheEntry,\n  EmptySegmentCacheEntry\n>\n\nconst isOutputExportMode =\n  process.env.NODE_ENV === 'production' &&\n  process.env.__NEXT_CONFIG_OUTPUT === 'export'\n\n/**\n * Ensures a minimum stale time of 30s to avoid issues where the server sends a too\n * short-lived stale time, which would prevent anything from being prefetched.\n */\nfunction getStaleTimeMs(staleTimeSeconds: number): number {\n  return Math.max(staleTimeSeconds, 30) * 1000\n}\n\n// Route cache entries vary on multiple keys: the href and the Next-Url. Each of\n// these parts needs to be included in the internal cache key. Rather than\n// concatenate the keys into a single key, we use a multi-level map, where the\n// first level is keyed by href, the second level is keyed by Next-Url, and so\n// on (if were to add more levels).\ntype RouteCacheKeypath = [NormalizedHref, NormalizedNextUrl]\nlet routeCacheMap: TupleMap<RouteCacheKeypath, RouteCacheEntry> =\n  createTupleMap()\n\n// We use an LRU for memory management. We must update this whenever we add or\n// remove a new cache entry, or when an entry changes size.\n// TODO: I chose the max size somewhat arbitrarily. Consider setting this based\n// on navigator.deviceMemory, or some other heuristic. We should make this\n// customizable via the Next.js config, too.\nconst maxRouteLruSize = 10 * 1024 * 1024 // 10 MB\nlet routeCacheLru = createLRU<RouteCacheEntry>(\n  maxRouteLruSize,\n  onRouteLRUEviction\n)\n\ntype SegmentCacheKeypath = [string, NormalizedSearch]\nlet segmentCacheMap: TupleMap<SegmentCacheKeypath, SegmentCacheEntry> =\n  createTupleMap()\n// NOTE: Segments and Route entries are managed by separate LRUs. We could\n// combine them into a single LRU, but because they are separate types, we'd\n// need to wrap each one in an extra LRU node (to maintain monomorphism, at the\n// cost of additional memory).\nconst maxSegmentLruSize = 50 * 1024 * 1024 // 50 MB\nlet segmentCacheLru = createLRU<SegmentCacheEntry>(\n  maxSegmentLruSize,\n  onSegmentLRUEviction\n)\n\n// All invalidation listeners for the whole cache are tracked in single set.\n// Since we don't yet support tag or path-based invalidation, there's no point\n// tracking them any more granularly than this. Once we add granular\n// invalidation, that may change, though generally the model is to just notify\n// the listeners and allow the caller to poll the prefetch cache with a new\n// prefetch task if desired.\nlet invalidationListeners: Set<PrefetchTask> | null = null\n\n// Incrementing counter used to track cache invalidations.\nlet currentCacheVersion = 0\n\nexport function getCurrentCacheVersion(): number {\n  return currentCacheVersion\n}\n\n/**\n * Used to clear the client prefetch cache when a server action calls\n * revalidatePath or revalidateTag. Eventually we will support only clearing the\n * segments that were actually affected, but there's more work to be done on the\n * server before the client is able to do this correctly.\n */\nexport function revalidateEntireCache(\n  nextUrl: string | null,\n  tree: FlightRouterState\n) {\n  currentCacheVersion++\n\n  // Start a cooldown before re-prefetching to allow CDN cache propagation.\n  startRevalidationCooldown()\n\n  // Clearing the cache also effectively rejects any pending requests, because\n  // when the response is received, it gets written into a cache entry that is\n  // no longer reachable.\n  // TODO: There's an exception to this case that we don't currently handle\n  // correctly: background revalidations. See note in `upsertSegmentEntry`.\n  routeCacheMap = createTupleMap()\n  routeCacheLru = createLRU(maxRouteLruSize, onRouteLRUEviction)\n  segmentCacheMap = createTupleMap()\n  segmentCacheLru = createLRU(maxSegmentLruSize, onSegmentLRUEviction)\n\n  // Prefetch all the currently visible links again, to re-fill the cache.\n  pingVisibleLinks(nextUrl, tree)\n\n  // Similarly, notify all invalidation listeners (i.e. those passed to\n  // `router.prefetch(onInvalidate)`), so they can trigger a new prefetch\n  // if needed.\n  pingInvalidationListeners(nextUrl, tree)\n}\n\nfunction attachInvalidationListener(task: PrefetchTask): void {\n  // This function is called whenever a prefetch task reads a cache entry. If\n  // the task has an onInvalidate function associated with it — i.e. the one\n  // optionally passed to router.prefetch(onInvalidate) — then we attach that\n  // listener to the every cache entry that the task reads. Then, if an entry\n  // is invalidated, we call the function.\n  if (task.onInvalidate !== null) {\n    if (invalidationListeners === null) {\n      invalidationListeners = new Set([task])\n    } else {\n      invalidationListeners.add(task)\n    }\n  }\n}\n\nfunction notifyInvalidationListener(task: PrefetchTask): void {\n  const onInvalidate = task.onInvalidate\n  if (onInvalidate !== null) {\n    // Clear the callback from the task object to guarantee it's not called more\n    // than once.\n    task.onInvalidate = null\n\n    // This is a user-space function, so we must wrap in try/catch.\n    try {\n      onInvalidate()\n    } catch (error) {\n      if (typeof reportError === 'function') {\n        reportError(error)\n      } else {\n        console.error(error)\n      }\n    }\n  }\n}\n\nexport function pingInvalidationListeners(\n  nextUrl: string | null,\n  tree: FlightRouterState\n): void {\n  // The rough equivalent of pingVisibleLinks, but for onInvalidate callbacks.\n  // This is called when the Next-Url or the base tree changes, since those\n  // may affect the result of a prefetch task. It's also called after a\n  // cache invalidation.\n  if (invalidationListeners !== null) {\n    const tasks = invalidationListeners\n    invalidationListeners = null\n    for (const task of tasks) {\n      if (isPrefetchTaskDirty(task, nextUrl, tree)) {\n        notifyInvalidationListener(task)\n      }\n    }\n  }\n}\n\nexport function readExactRouteCacheEntry(\n  now: number,\n  href: NormalizedHref,\n  nextUrl: NormalizedNextUrl | null\n): RouteCacheEntry | null {\n  const keypath: Prefix<RouteCacheKeypath> =\n    nextUrl === null ? [href] : [href, nextUrl]\n  const existingEntry = routeCacheMap.get(keypath)\n  if (existingEntry !== null) {\n    // Check if the entry is stale\n    if (existingEntry.staleAt > now) {\n      // Reuse the existing entry.\n\n      // Since this is an access, move the entry to the front of the LRU.\n      routeCacheLru.put(existingEntry)\n\n      return existingEntry\n    } else {\n      // Evict the stale entry from the cache.\n      deleteRouteFromCache(existingEntry, keypath)\n    }\n  }\n  return null\n}\n\nexport function readRouteCacheEntry(\n  now: number,\n  key: RouteCacheKey\n): RouteCacheEntry | null {\n  // First check if there's a non-intercepted entry. Most routes cannot be\n  // intercepted, so this is the common case.\n  const nonInterceptedEntry = readExactRouteCacheEntry(now, key.href, null)\n  if (nonInterceptedEntry !== null && !nonInterceptedEntry.couldBeIntercepted) {\n    // Found a match, and the route cannot be intercepted. We can reuse it.\n    return nonInterceptedEntry\n  }\n  // There was no match. Check again but include the Next-Url this time.\n  return readExactRouteCacheEntry(now, key.href, key.nextUrl)\n}\n\nexport function getSegmentKeypath(\n  fetchStrategy: FetchStrategy,\n  route: FulfilledRouteCacheEntry,\n  cacheKey: SegmentCacheKey\n): Prefix<SegmentCacheKeypath> {\n  // When a prefetch includes dynamic data, the search params are included\n  // in the result, so we must include the search string in the segment\n  // cache key. (Note that this is true even if the search string is empty.)\n  //\n  // If we're fetching using PPR, we do not need to include the search params in\n  // the cache key, because the search params are treated as dynamic data. The\n  // cache entry is valid for all possible search param values.\n  const isDynamic =\n    fetchStrategy === FetchStrategy.Full ||\n    fetchStrategy === FetchStrategy.PPRRuntime ||\n    !route.isPPREnabled\n  return isDynamic && cacheKey.endsWith('/' + PAGE_SEGMENT_KEY)\n    ? [cacheKey, route.renderedSearch]\n    : [cacheKey]\n}\n\nexport function readSegmentCacheEntry(\n  now: number,\n  route: FulfilledRouteCacheEntry,\n  cacheKey: SegmentCacheKey\n): SegmentCacheEntry | null {\n  if (!cacheKey.endsWith('/' + PAGE_SEGMENT_KEY)) {\n    // Fast path. Search params only exist on page segments.\n    return readExactSegmentCacheEntry(now, [cacheKey])\n  }\n\n  const renderedSearch = route.renderedSearch\n  if (renderedSearch !== null) {\n    // Page segments may or may not contain search params. If they were prefetched\n    // using a dynamic request, then we will have an entry with search params.\n    // Check for that case first.\n    const entryWithSearchParams = readExactSegmentCacheEntry(now, [\n      cacheKey,\n      renderedSearch,\n    ])\n    if (entryWithSearchParams !== null) {\n      return entryWithSearchParams\n    }\n  }\n\n  // If we did not find an entry with the given search params, check for a\n  // \"fallback\" entry, where the search params are treated as dynamic data. This\n  // is the common case because PPR/static prerenders always treat search params\n  // as dynamic.\n  //\n  // See corresponding logic in `getSegmentKeypath`.\n  const entryWithoutSearchParams = readExactSegmentCacheEntry(now, [cacheKey])\n  return entryWithoutSearchParams\n}\n\nfunction readExactSegmentCacheEntry(\n  now: number,\n  keypath: Prefix<SegmentCacheKeypath>\n): SegmentCacheEntry | null {\n  const existingEntry = segmentCacheMap.get(keypath)\n  if (existingEntry !== null) {\n    // Check if the entry is stale\n    if (existingEntry.staleAt > now) {\n      // Reuse the existing entry.\n\n      // Since this is an access, move the entry to the front of the LRU.\n      segmentCacheLru.put(existingEntry)\n\n      return existingEntry\n    } else {\n      // This is a stale entry.\n      const revalidatingEntry = existingEntry.revalidating\n      if (revalidatingEntry !== null) {\n        // There's a revalidation in progress. Upsert it.\n        const upsertedEntry = upsertSegmentEntry(\n          now,\n          keypath,\n          revalidatingEntry\n        )\n        if (upsertedEntry !== null && upsertedEntry.staleAt > now) {\n          // We can use the upserted revalidation entry.\n          return upsertedEntry\n        }\n      } else {\n        // Evict the stale entry from the cache.\n        deleteSegmentFromCache(existingEntry, keypath)\n      }\n    }\n  }\n  return null\n}\n\nfunction readRevalidatingSegmentCacheEntry(\n  now: number,\n  owner: SegmentCacheEntry\n): SegmentCacheEntry | null {\n  const existingRevalidation = owner.revalidating\n  if (existingRevalidation !== null) {\n    if (existingRevalidation.staleAt > now) {\n      // There's already a revalidation in progress. Or a previous revalidation\n      // failed and it has not yet expired.\n      return existingRevalidation\n    } else {\n      // Clear the stale revalidation from its owner.\n      clearRevalidatingSegmentFromOwner(owner)\n    }\n  }\n  return null\n}\n\nexport function waitForSegmentCacheEntry(\n  pendingEntry: PendingSegmentCacheEntry\n): Promise<FulfilledSegmentCacheEntry | null> {\n  // Because the entry is pending, there's already a in-progress request.\n  // Attach a promise to the entry that will resolve when the server responds.\n  let promiseWithResolvers = pendingEntry.promise\n  if (promiseWithResolvers === null) {\n    promiseWithResolvers = pendingEntry.promise =\n      createPromiseWithResolvers<FulfilledSegmentCacheEntry | null>()\n  } else {\n    // There's already a promise we can use\n  }\n  return promiseWithResolvers.promise\n}\n\n/**\n * Checks if an entry for a route exists in the cache. If so, it returns the\n * entry, If not, it adds an empty entry to the cache and returns it.\n */\nexport function readOrCreateRouteCacheEntry(\n  now: number,\n  task: PrefetchTask,\n  key: RouteCacheKey\n): RouteCacheEntry {\n  attachInvalidationListener(task)\n\n  const existingEntry = readRouteCacheEntry(now, key)\n  if (existingEntry !== null) {\n    return existingEntry\n  }\n  // Create a pending entry and add it to the cache.\n  const pendingEntry: PendingRouteCacheEntry = {\n    canonicalUrl: null,\n    status: EntryStatus.Empty,\n    blockedTasks: null,\n    tree: null,\n    head: null,\n    isHeadPartial: true,\n    // Since this is an empty entry, there's no reason to ever evict it. It will\n    // be updated when the data is populated.\n    staleAt: Infinity,\n    // This is initialized to true because we don't know yet whether the route\n    // could be intercepted. It's only set to false once we receive a response\n    // from the server.\n    couldBeIntercepted: true,\n    // Similarly, we don't yet know if the route supports PPR.\n    isPPREnabled: false,\n    renderedSearch: null,\n\n    TODO_metadataStatus: EntryStatus.Empty,\n    TODO_isHeadDynamic: false,\n\n    // LRU-related fields\n    keypath: null,\n    next: null,\n    prev: null,\n    size: 0,\n  }\n  const keypath: Prefix<RouteCacheKeypath> =\n    key.nextUrl === null ? [key.href] : [key.href, key.nextUrl]\n  routeCacheMap.set(keypath, pendingEntry)\n  // Stash the keypath on the entry so we know how to remove it from the map\n  // if it gets evicted from the LRU.\n  pendingEntry.keypath = keypath\n  routeCacheLru.put(pendingEntry)\n  return pendingEntry\n}\n\nexport function requestOptimisticRouteCacheEntry(\n  now: number,\n  requestedUrl: URL,\n  nextUrl: string | null\n): FulfilledRouteCacheEntry | null {\n  // This function is called during a navigation when there was no matching\n  // route tree in the prefetch cache. Before de-opting to a blocking,\n  // unprefetched navigation, we will first attempt to construct an \"optimistic\"\n  // route tree by checking the cache for similar routes.\n  //\n  // Check if there's a route with the same pathname, but with different\n  // search params. We can then base our optimistic route tree on this entry.\n  //\n  // Conceptually, we are simulating what would happen if we did perform a\n  // prefetch the requested URL, under the assumption that the server will\n  // not redirect or rewrite the request in a different manner than the\n  // base route tree. This assumption might not hold, in which case we'll have\n  // to recover when we perform the dynamic navigation request. However, this\n  // is what would happen if a route were dynamically rewritten/redirected\n  // in between the prefetch and the navigation. So the logic needs to exist\n  // to handle this case regardless.\n\n  // Look for a route with the same pathname, but with an empty search string.\n  // TODO: There's nothing inherently special about the empty search string;\n  // it's chosen somewhat arbitrarily, with the rationale that it's the most\n  // likely one to exist. But we should update this to match _any_ search\n  // string. The plan is to generalize this logic alongside other improvements\n  // related to \"fallback\" cache entries.\n  const requestedSearch = requestedUrl.search as NormalizedSearch\n  if (requestedSearch === '') {\n    // The caller would have already checked if a route with an empty search\n    // string is in the cache. So we can bail out here.\n    return null\n  }\n  const urlWithoutSearchParams = new URL(requestedUrl)\n  urlWithoutSearchParams.search = ''\n  const routeWithNoSearchParams = readRouteCacheEntry(\n    now,\n    createPrefetchRequestKey(urlWithoutSearchParams.href, nextUrl)\n  )\n\n  if (\n    routeWithNoSearchParams === null ||\n    routeWithNoSearchParams.status !== EntryStatus.Fulfilled\n  ) {\n    // Bail out of constructing an optimistic route tree. This will result in\n    // a blocking, unprefetched navigation.\n    return null\n  }\n\n  // Now we have a base route tree we can \"patch\" with our optimistic values.\n\n  const TODO_isHeadDynamic = routeWithNoSearchParams.TODO_isHeadDynamic\n  let head\n  let isHeadPartial\n  let TODO_metadataStatus: EntryStatus.Empty | EntryStatus.Fulfilled\n  if (TODO_isHeadDynamic) {\n    // If the head was fetched via dynamic request, then we don't know\n    // whether it accessed search params. So we must be conservative — we\n    // cannot reuse it. The head will stream in during the dynamic navigation.\n    // TODO: When Cache Components is enabled, we should track whether the\n    // head varied on search params.\n    // TODO: Because we're rendering a `null` viewport as the partial state, the\n    // viewport will not block the navigation; it will stream in later,\n    // alongside the metadata. Viewport is supposed to be blocking. This is\n    // a subtle bug in the old implementation that we've preserved here. It's\n    // rare enough that we're not going to fix it for apps that don't enable\n    // Cache Components; when Cache Components is enabled, though, we should\n    // use an infinite promise here to block the navigation. But only if the\n    // entry actually varies on search params.\n    head = [null, null]\n    // Setting this to `true` ensures that on navigation, the head is requested.\n    isHeadPartial = true\n    TODO_metadataStatus = EntryStatus.Empty\n  } else {\n    // The head was fetched via a static/PPR request. So it's guaranteed to\n    // not contain search params. We can reuse it.\n    head = routeWithNoSearchParams.head\n    isHeadPartial = routeWithNoSearchParams.isHeadPartial\n    TODO_metadataStatus = EntryStatus.Empty\n  }\n\n  // Optimistically assume that redirects for the requested pathname do\n  // not vary on the search string. Therefore, if the base route was\n  // redirected to a different search string, then the optimistic route\n  // should be redirected to the same search string. Otherwise, we use\n  // the requested search string.\n  const canonicalUrlForRouteWithNoSearchParams = new URL(\n    routeWithNoSearchParams.canonicalUrl,\n    requestedUrl.origin\n  )\n  const optimisticCanonicalSearch =\n    canonicalUrlForRouteWithNoSearchParams.search !== ''\n      ? // Base route was redirected. Reuse the same redirected search string.\n        canonicalUrlForRouteWithNoSearchParams.search\n      : requestedSearch\n\n  // Similarly, optimistically assume that rewrites for the requested\n  // pathname do not vary on the search string. Therefore, if the base\n  // route was rewritten to a different search string, then the optimistic\n  // route should be rewritten to the same search string. Otherwise, we use\n  // the requested search string.\n  const optimisticRenderedSearch =\n    routeWithNoSearchParams.renderedSearch !== ''\n      ? // Base route was rewritten. Reuse the same rewritten search string.\n        routeWithNoSearchParams.renderedSearch\n      : requestedSearch\n\n  const optimisticUrl = new URL(\n    routeWithNoSearchParams.canonicalUrl,\n    location.origin\n  )\n  optimisticUrl.search = optimisticCanonicalSearch\n  const optimisticCanonicalUrl = createHrefFromUrl(optimisticUrl)\n\n  // Clone the base route tree, and override the relevant fields with our\n  // optimistic values.\n  const optimisticEntry: FulfilledRouteCacheEntry = {\n    canonicalUrl: optimisticCanonicalUrl,\n\n    status: EntryStatus.Fulfilled,\n    // This isn't cloned because it's instance-specific\n    blockedTasks: null,\n    tree: routeWithNoSearchParams.tree,\n    head,\n    isHeadPartial,\n    staleAt: routeWithNoSearchParams.staleAt,\n    couldBeIntercepted: routeWithNoSearchParams.couldBeIntercepted,\n    isPPREnabled: routeWithNoSearchParams.isPPREnabled,\n\n    // Override the rendered search with the optimistic value.\n    renderedSearch: optimisticRenderedSearch,\n\n    TODO_metadataStatus,\n    TODO_isHeadDynamic,\n\n    // LRU-related fields\n    keypath: null,\n    next: null,\n    prev: null,\n    size: 0,\n  }\n\n  // Do not insert this entry into the cache. It only exists so we can\n  // perform the current navigation. Just return it to the caller.\n  return optimisticEntry\n}\n\n/**\n * Checks if an entry for a segment exists in the cache. If so, it returns the\n * entry, If not, it adds an empty entry to the cache and returns it.\n */\nexport function readOrCreateSegmentCacheEntry(\n  now: number,\n  fetchStrategy: FetchStrategy,\n  route: FulfilledRouteCacheEntry,\n  cacheKey: SegmentCacheKey\n): SegmentCacheEntry {\n  const keypath = getSegmentKeypath(fetchStrategy, route, cacheKey)\n  const existingEntry = readExactSegmentCacheEntry(now, keypath)\n  if (existingEntry !== null) {\n    return existingEntry\n  }\n  // Create a pending entry and add it to the cache.\n  const pendingEntry = createDetachedSegmentCacheEntry(route.staleAt)\n  segmentCacheMap.set(keypath, pendingEntry)\n  // Stash the keypath on the entry so we know how to remove it from the map\n  // if it gets evicted from the LRU.\n  pendingEntry.keypath = keypath\n  segmentCacheLru.put(pendingEntry)\n  return pendingEntry\n}\n\nexport function readOrCreateRevalidatingSegmentEntry(\n  now: number,\n  prevEntry: SegmentCacheEntry\n): SegmentCacheEntry {\n  const existingRevalidation = readRevalidatingSegmentCacheEntry(now, prevEntry)\n  if (existingRevalidation !== null) {\n    return existingRevalidation\n  }\n  const pendingEntry = createDetachedSegmentCacheEntry(prevEntry.staleAt)\n\n  // Background revalidations are not stored directly in the cache map or LRU;\n  // they're stashed on the entry that they will (potentially) replace.\n  //\n  // Note that we don't actually ever clear this field, except when the entry\n  // expires. When the revalidation finishes, one of two things will happen:\n  //\n  //  1) the revalidation is successful, `prevEntry` is removed from the cache\n  //     and garbage collected (so there's no point clearing any of its fields)\n  //  2) the revalidation fails, and we'll use the `revalidating` field to\n  //     prevent subsequent revalidation attempts, until it expires.\n  prevEntry.revalidating = pendingEntry\n\n  return pendingEntry\n}\n\nexport function upsertSegmentEntry(\n  now: number,\n  keypath: Prefix<SegmentCacheKeypath>,\n  candidateEntry: SegmentCacheEntry\n): SegmentCacheEntry | null {\n  // We have a new entry that has not yet been inserted into the cache. Before\n  // we do so, we need to confirm whether it takes precedence over the existing\n  // entry (if one exists).\n  // TODO: We should not upsert an entry if its key was invalidated in the time\n  // since the request was made. We can do that by passing the \"owner\" entry to\n  // this function and confirming it's the same as `existingEntry`.\n  const existingEntry = readExactSegmentCacheEntry(now, keypath)\n  if (existingEntry !== null) {\n    // Don't replace a more specific segment with a less-specific one. A case where this\n    // might happen is if the existing segment was fetched via\n    // `<Link prefetch={true}>`.\n    if (\n      // We fetched the new segment using a different, less specific fetch strategy\n      // than the segment we already have in the cache, so it can't have more content.\n      (candidateEntry.fetchStrategy !== existingEntry.fetchStrategy &&\n        !canNewFetchStrategyProvideMoreContent(\n          existingEntry.fetchStrategy,\n          candidateEntry.fetchStrategy\n        )) ||\n      // The existing entry isn't partial, but the new one is.\n      // (TODO: can this be true if `candidateEntry.fetchStrategy >= existingEntry.fetchStrategy`?)\n      (!existingEntry.isPartial && candidateEntry.isPartial)\n    ) {\n      // We're going to leave the entry on the owner's `revalidating` field\n      // so that it doesn't get revalidated again unnecessarily. Downgrade the\n      // Fulfilled entry to Rejected and null out the data so it can be garbage\n      // collected. We leave `staleAt` intact to prevent subsequent revalidation\n      // attempts only until the entry expires.\n      const rejectedEntry: RejectedSegmentCacheEntry = candidateEntry as any\n      rejectedEntry.status = EntryStatus.Rejected\n      rejectedEntry.loading = null\n      rejectedEntry.rsc = null\n      return null\n    }\n\n    // Evict the existing entry from the cache.\n    deleteSegmentFromCache(existingEntry, keypath)\n  }\n  segmentCacheMap.set(keypath, candidateEntry)\n  // Stash the keypath on the entry so we know how to remove it from the map\n  // if it gets evicted from the LRU.\n  candidateEntry.keypath = keypath\n  segmentCacheLru.put(candidateEntry)\n  return candidateEntry\n}\n\nexport function createDetachedSegmentCacheEntry(\n  staleAt: number\n): EmptySegmentCacheEntry {\n  const emptyEntry: EmptySegmentCacheEntry = {\n    status: EntryStatus.Empty,\n    // Default to assuming the fetch strategy will be PPR. This will be updated\n    // when a fetch is actually initiated.\n    fetchStrategy: FetchStrategy.PPR,\n    revalidating: null,\n    rsc: null,\n    loading: null,\n    staleAt,\n    isPartial: true,\n    promise: null,\n\n    // LRU-related fields\n    keypath: null,\n    next: null,\n    prev: null,\n    size: 0,\n  }\n  return emptyEntry\n}\n\nexport function upgradeToPendingSegment(\n  emptyEntry: EmptySegmentCacheEntry,\n  fetchStrategy: FetchStrategy\n): PendingSegmentCacheEntry {\n  const pendingEntry: PendingSegmentCacheEntry = emptyEntry as any\n  pendingEntry.status = EntryStatus.Pending\n  pendingEntry.fetchStrategy = fetchStrategy\n  return pendingEntry\n}\n\nfunction deleteRouteFromCache(\n  entry: RouteCacheEntry,\n  keypath: Prefix<RouteCacheKeypath>\n): void {\n  pingBlockedTasks(entry)\n  routeCacheMap.delete(keypath)\n  routeCacheLru.delete(entry)\n}\n\nfunction deleteSegmentFromCache(\n  entry: SegmentCacheEntry,\n  keypath: Prefix<SegmentCacheKeypath>\n): void {\n  cancelEntryListeners(entry)\n  segmentCacheMap.delete(keypath)\n  segmentCacheLru.delete(entry)\n  clearRevalidatingSegmentFromOwner(entry)\n}\n\nfunction clearRevalidatingSegmentFromOwner(owner: SegmentCacheEntry): void {\n  // Revalidating segments are not stored in the cache directly; they're\n  // stored as a field on the entry that they will (potentially) replace. So\n  // to dispose of an existing revalidation, we just need to null out the field\n  // on the owner.\n  const revalidatingSegment = owner.revalidating\n  if (revalidatingSegment !== null) {\n    cancelEntryListeners(revalidatingSegment)\n    owner.revalidating = null\n  }\n}\n\nexport function resetRevalidatingSegmentEntry(\n  owner: SegmentCacheEntry\n): EmptySegmentCacheEntry {\n  clearRevalidatingSegmentFromOwner(owner)\n  const emptyEntry = createDetachedSegmentCacheEntry(owner.staleAt)\n  owner.revalidating = emptyEntry\n  return emptyEntry\n}\n\nfunction onRouteLRUEviction(entry: RouteCacheEntry): void {\n  // The LRU evicted this entry. Remove it from the map.\n  const keypath = entry.keypath\n  if (keypath !== null) {\n    entry.keypath = null\n    pingBlockedTasks(entry)\n    routeCacheMap.delete(keypath)\n  }\n}\n\nfunction onSegmentLRUEviction(entry: SegmentCacheEntry): void {\n  // The LRU evicted this entry. Remove it from the map.\n  const keypath = entry.keypath\n  if (keypath !== null) {\n    entry.keypath = null\n    cancelEntryListeners(entry)\n    segmentCacheMap.delete(keypath)\n  }\n}\n\nfunction cancelEntryListeners(entry: SegmentCacheEntry): void {\n  if (entry.status === EntryStatus.Pending && entry.promise !== null) {\n    // There were listeners for this entry. Resolve them with `null` to indicate\n    // that the prefetch failed. It's up to the listener to decide how to handle\n    // this case.\n    // NOTE: We don't currently propagate the reason the prefetch was canceled\n    // but we could by accepting a `reason` argument.\n    entry.promise.resolve(null)\n    entry.promise = null\n  }\n}\n\nfunction pingBlockedTasks(entry: {\n  blockedTasks: Set<PrefetchTask> | null\n}): void {\n  const blockedTasks = entry.blockedTasks\n  if (blockedTasks !== null) {\n    for (const task of blockedTasks) {\n      pingPrefetchTask(task)\n    }\n    entry.blockedTasks = null\n  }\n}\n\nfunction fulfillRouteCacheEntry(\n  entry: RouteCacheEntry,\n  tree: RouteTree,\n  head: HeadData,\n  isHeadPartial: boolean,\n  staleAt: number,\n  couldBeIntercepted: boolean,\n  canonicalUrl: string,\n  renderedSearch: NormalizedSearch,\n  isPPREnabled: boolean,\n  isHeadDynamic: boolean\n): FulfilledRouteCacheEntry {\n  const fulfilledEntry: FulfilledRouteCacheEntry = entry as any\n  fulfilledEntry.status = EntryStatus.Fulfilled\n  fulfilledEntry.tree = tree\n  fulfilledEntry.head = head\n  fulfilledEntry.isHeadPartial = isHeadPartial\n  fulfilledEntry.staleAt = staleAt\n  fulfilledEntry.couldBeIntercepted = couldBeIntercepted\n  fulfilledEntry.canonicalUrl = canonicalUrl\n  fulfilledEntry.renderedSearch = renderedSearch\n  fulfilledEntry.isPPREnabled = isPPREnabled\n  fulfilledEntry.TODO_isHeadDynamic = isHeadDynamic\n  pingBlockedTasks(entry)\n  return fulfilledEntry\n}\n\nfunction fulfillSegmentCacheEntry(\n  segmentCacheEntry: PendingSegmentCacheEntry,\n  rsc: React.ReactNode,\n  loading: LoadingModuleData | Promise<LoadingModuleData>,\n  staleAt: number,\n  isPartial: boolean\n): FulfilledSegmentCacheEntry {\n  const fulfilledEntry: FulfilledSegmentCacheEntry = segmentCacheEntry as any\n  fulfilledEntry.status = EntryStatus.Fulfilled\n  fulfilledEntry.rsc = rsc\n  fulfilledEntry.loading = loading\n  fulfilledEntry.staleAt = staleAt\n  fulfilledEntry.isPartial = isPartial\n  // Resolve any listeners that were waiting for this data.\n  if (segmentCacheEntry.promise !== null) {\n    segmentCacheEntry.promise.resolve(fulfilledEntry)\n    // Free the promise for garbage collection.\n    fulfilledEntry.promise = null\n  }\n  return fulfilledEntry\n}\n\nfunction rejectRouteCacheEntry(\n  entry: PendingRouteCacheEntry,\n  staleAt: number\n): void {\n  const rejectedEntry: RejectedRouteCacheEntry = entry as any\n  rejectedEntry.status = EntryStatus.Rejected\n  rejectedEntry.staleAt = staleAt\n  pingBlockedTasks(entry)\n}\n\nfunction rejectSegmentCacheEntry(\n  entry: PendingSegmentCacheEntry,\n  staleAt: number\n): void {\n  const rejectedEntry: RejectedSegmentCacheEntry = entry as any\n  rejectedEntry.status = EntryStatus.Rejected\n  rejectedEntry.staleAt = staleAt\n  if (entry.promise !== null) {\n    // NOTE: We don't currently propagate the reason the prefetch was canceled\n    // but we could by accepting a `reason` argument.\n    entry.promise.resolve(null)\n    entry.promise = null\n  }\n}\n\nfunction convertRootTreePrefetchToRouteTree(\n  rootTree: RootTreePrefetch,\n  renderedPathname: string\n) {\n  // Remove trailing and leading slashes\n  const pathnameParts = renderedPathname.split('/').filter((p) => p !== '')\n  const index = 0\n  const rootSegment = ROOT_SEGMENT_CACHE_KEY\n  return convertTreePrefetchToRouteTree(\n    rootTree.tree,\n    rootSegment,\n    null,\n    ROOT_SEGMENT_REQUEST_KEY,\n    ROOT_SEGMENT_CACHE_KEY,\n    pathnameParts,\n    index\n  )\n}\n\nfunction convertTreePrefetchToRouteTree(\n  prefetch: TreePrefetch,\n  segment: FlightRouterStateSegment,\n  param: RouteParam | null,\n  requestKey: SegmentRequestKey,\n  cacheKey: SegmentCacheKey,\n  pathnameParts: Array<string>,\n  pathnamePartsIndex: number\n): RouteTree {\n  // Converts the route tree sent by the server into the format used by the\n  // cache. The cached version of the tree includes additional fields, such as a\n  // cache key for each segment. Since this is frequently accessed, we compute\n  // it once instead of on every access. This same cache key is also used to\n  // request the segment from the server.\n\n  let slots: { [parallelRouteKey: string]: RouteTree } | null = null\n  const prefetchSlots = prefetch.slots\n  if (prefetchSlots !== null) {\n    slots = {}\n    for (let parallelRouteKey in prefetchSlots) {\n      const childPrefetch = prefetchSlots[parallelRouteKey]\n      const childParamName = childPrefetch.name\n      const childParamType = childPrefetch.paramType\n      const childServerSentParamKey = childPrefetch.paramKey\n\n      let childDoesAppearInURL: boolean\n      let childParam: RouteParam | null = null\n      let childSegment: FlightRouterStateSegment\n      if (childParamType !== null) {\n        // This segment is parameterized. Get the param from the pathname.\n        const childParamValue = parseDynamicParamFromURLPart(\n          childParamType,\n          pathnameParts,\n          pathnamePartsIndex\n        )\n\n        // Assign a cache key to the segment, based on the param value. In the\n        // pre-Segment Cache implementation, the server computes this and sends\n        // it in the body of the response. In the Segment Cache implementation,\n        // the server sends an empty string and we fill it in here.\n\n        // TODO: We're intentionally not adding the search param to page\n        // segments here; it's tracked separately and added back during a read.\n        // This would clearer if we waited to construct the segment until it's\n        // read from the cache, since that's effectively what we're\n        // doing anyway.\n        const renderedSearch = '' as NormalizedSearch\n        const childParamKey =\n          // The server omits this field from the prefetch response when\n          // cacheComponents is enabled.\n          childServerSentParamKey !== null\n            ? childServerSentParamKey\n            : // If no param key was sent, use the value parsed on the client.\n              getCacheKeyForDynamicParam(childParamValue, renderedSearch)\n\n        childParam = {\n          name: childParamName,\n          value: childParamValue,\n          type: childParamType,\n        }\n        childSegment = [childParamName, childParamKey, childParamType]\n        childDoesAppearInURL = true\n      } else {\n        childSegment = childParamName\n        childDoesAppearInURL = doesStaticSegmentAppearInURL(childParamName)\n      }\n\n      // Only increment the index if the segment appears in the URL. If it's a\n      // \"virtual\" segment, like a route group, it remains the same.\n      const childPathnamePartsIndex = childDoesAppearInURL\n        ? pathnamePartsIndex + 1\n        : pathnamePartsIndex\n\n      const childRequestKeyPart = createSegmentRequestKeyPart(childSegment)\n      const childRequestKey = appendSegmentRequestKeyPart(\n        requestKey,\n        parallelRouteKey,\n        childRequestKeyPart\n      )\n      const childCacheKey = appendSegmentCacheKeyPart(\n        cacheKey,\n        parallelRouteKey,\n        createSegmentCacheKeyPart(childRequestKeyPart, childSegment)\n      )\n      slots[parallelRouteKey] = convertTreePrefetchToRouteTree(\n        childPrefetch,\n        childSegment,\n        childParam,\n        childRequestKey,\n        childCacheKey,\n        pathnameParts,\n        childPathnamePartsIndex\n      )\n    }\n  }\n\n  return {\n    cacheKey,\n    requestKey,\n    segment,\n    param,\n    slots,\n    isRootLayout: prefetch.isRootLayout,\n    // This field is only relevant to dynamic routes. For a PPR/static route,\n    // there's always some partial loading state we can fetch.\n    hasLoadingBoundary: HasLoadingBoundary.SegmentHasLoadingBoundary,\n    hasRuntimePrefetch: prefetch.hasRuntimePrefetch,\n  }\n}\n\nfunction convertRootFlightRouterStateToRouteTree(\n  flightRouterState: FlightRouterState\n): RouteTree {\n  return convertFlightRouterStateToRouteTree(\n    flightRouterState,\n    ROOT_SEGMENT_CACHE_KEY,\n    ROOT_SEGMENT_REQUEST_KEY\n  )\n}\n\nfunction convertFlightRouterStateToRouteTree(\n  flightRouterState: FlightRouterState,\n  cacheKey: SegmentCacheKey,\n  requestKey: SegmentRequestKey\n): RouteTree {\n  let slots: { [parallelRouteKey: string]: RouteTree } | null = null\n\n  const parallelRoutes = flightRouterState[1]\n  for (let parallelRouteKey in parallelRoutes) {\n    const childRouterState = parallelRoutes[parallelRouteKey]\n    const childSegment = childRouterState[0]\n    // TODO: Eventually, the param values will not be included in the response\n    // from the server. We'll instead fill them in on the client by parsing\n    // the URL. This is where we'll do that.\n    const childRequestKeyPart = createSegmentRequestKeyPart(childSegment)\n    const childRequestKey = appendSegmentRequestKeyPart(\n      requestKey,\n      parallelRouteKey,\n      childRequestKeyPart\n    )\n    const childCacheKey = appendSegmentCacheKeyPart(\n      cacheKey,\n      parallelRouteKey,\n      createSegmentCacheKeyPart(childRequestKeyPart, childSegment)\n    )\n    const childTree = convertFlightRouterStateToRouteTree(\n      childRouterState,\n      childCacheKey,\n      childRequestKey\n    )\n    if (slots === null) {\n      slots = {\n        [parallelRouteKey]: childTree,\n      }\n    } else {\n      slots[parallelRouteKey] = childTree\n    }\n  }\n  const originalSegment = flightRouterState[0]\n\n  let segment: FlightRouterStateSegment\n  let param: RouteParam | null = null\n  if (Array.isArray(originalSegment)) {\n    const paramCacheKey = originalSegment[1]\n    const paramType = originalSegment[2]\n    const paramValue = getParamValueFromCacheKey(paramCacheKey, paramType)\n    param = {\n      name: originalSegment[0],\n      value: paramValue === undefined ? null : paramValue,\n      type: originalSegment[2] as DynamicParamTypesShort,\n    }\n    segment = originalSegment\n  } else {\n    // The navigation implementation expects the search params to be included\n    // in the segment. However, in the case of a static response, the search\n    // params are omitted. So the client needs to add them back in when reading\n    // from the Segment Cache.\n    //\n    // For consistency, we'll do this for dynamic responses, too.\n    //\n    // TODO: We should move search params out of FlightRouterState and handle\n    // them entirely on the client, similar to our plan for dynamic params.\n    segment =\n      typeof originalSegment === 'string' &&\n      originalSegment.startsWith(PAGE_SEGMENT_KEY)\n        ? PAGE_SEGMENT_KEY\n        : originalSegment\n  }\n\n  return {\n    cacheKey,\n    requestKey,\n    segment,\n    param,\n    slots,\n    isRootLayout: flightRouterState[4] === true,\n    hasLoadingBoundary:\n      flightRouterState[5] !== undefined\n        ? flightRouterState[5]\n        : HasLoadingBoundary.SubtreeHasNoLoadingBoundary,\n\n    // Non-static tree responses are only used by apps that haven't adopted\n    // Cache Components. So this is always false.\n    hasRuntimePrefetch: false,\n  }\n}\n\nexport function convertRouteTreeToFlightRouterState(\n  routeTree: RouteTree\n): FlightRouterState {\n  const parallelRoutes: Record<string, FlightRouterState> = {}\n  if (routeTree.slots !== null) {\n    for (const parallelRouteKey in routeTree.slots) {\n      parallelRoutes[parallelRouteKey] = convertRouteTreeToFlightRouterState(\n        routeTree.slots[parallelRouteKey]\n      )\n    }\n  }\n  const flightRouterState: FlightRouterState = [\n    routeTree.segment,\n    parallelRoutes,\n    null,\n    null,\n    routeTree.isRootLayout,\n  ]\n  return flightRouterState\n}\n\nexport async function fetchRouteOnCacheMiss(\n  entry: PendingRouteCacheEntry,\n  task: PrefetchTask,\n  key: RouteCacheKey\n): Promise<PrefetchSubtaskResult<null> | null> {\n  // This function is allowed to use async/await because it contains the actual\n  // fetch that gets issued on a cache miss. Notice it writes the result to the\n  // cache entry directly, rather than return data that is then written by\n  // the caller.\n  const href = key.href\n  const nextUrl = key.nextUrl\n  const segmentPath = '/_tree' as SegmentRequestKey\n\n  const headers: RequestHeaders = {\n    [RSC_HEADER]: '1',\n    [NEXT_ROUTER_PREFETCH_HEADER]: '1',\n    [NEXT_ROUTER_SEGMENT_PREFETCH_HEADER]: segmentPath,\n  }\n  if (nextUrl !== null) {\n    headers[NEXT_URL] = nextUrl\n  }\n\n  try {\n    let response\n    let urlAfterRedirects\n    if (isOutputExportMode) {\n      // In output: \"export\" mode, we can't use headers to request a particular\n      // segment. Instead, we encode the extra request information into the URL.\n      // This is not part of the \"public\" interface of the app; it's an internal\n      // Next.js implementation detail that the app developer should not need to\n      // concern themselves with.\n      //\n      // For example, to request a segment:\n      //\n      //   Path passed to <Link>:   /path/to/page\n      //   Path passed to fetch:    /path/to/page/__next-segments/_tree\n      //\n      //   (This is not the exact protocol, just an illustration.)\n      //\n      // Before we do that, though, we need to account for redirects. Even in\n      // output: \"export\" mode, a proxy might redirect the page to a different\n      // location, but we shouldn't assume or expect that they also redirect all\n      // the segment files, too.\n      //\n      // To check whether the page is redirected, we perform a range request of\n      // the first N bytes of the HTML document. The canonical URL is determined\n      // from the response.\n      //\n      // Then we can use the canonical URL to request the route tree.\n      //\n      // NOTE: We could embed the route tree into the HTML document, to avoid\n      // a second request. We're not doing that currently because it would make\n      // the HTML document larger and affect normal page loads.\n      const url = new URL(href)\n      const htmlResponse = await fetch(href, {\n        headers: {\n          Range: DOC_PREFETCH_RANGE_HEADER_VALUE,\n        },\n      })\n      const partialHtml = await htmlResponse.text()\n      if (!doesExportedHtmlMatchBuildId(partialHtml, getAppBuildId())) {\n        // The target page is not part of this app, or it belongs to a\n        // different build.\n        rejectRouteCacheEntry(entry, Date.now() + 10 * 1000)\n        return null\n      }\n      urlAfterRedirects = htmlResponse.redirected\n        ? new URL(htmlResponse.url)\n        : url\n      response = await fetchPrefetchResponse(\n        addSegmentPathToUrlInOutputExportMode(urlAfterRedirects, segmentPath),\n        headers\n      )\n    } else {\n      // \"Server\" mode. We can use request headers instead of the pathname.\n      // TODO: The eventual plan is to get rid of our custom request headers and\n      // encode everything into the URL, using a similar strategy to the\n      // \"output: export\" block above.\n      const url = new URL(href)\n      response = await fetchPrefetchResponse(url, headers)\n      urlAfterRedirects =\n        response !== null && response.redirected ? new URL(response.url) : url\n    }\n\n    if (\n      !response ||\n      !response.ok ||\n      // 204 is a Cache miss. Though theoretically this shouldn't happen when\n      // PPR is enabled, because we always respond to route tree requests, even\n      // if it needs to be blockingly generated on demand.\n      response.status === 204 ||\n      !response.body\n    ) {\n      // Server responded with an error, or with a miss. We should still cache\n      // the response, but we can try again after 10 seconds.\n      rejectRouteCacheEntry(entry, Date.now() + 10 * 1000)\n      return null\n    }\n\n    // TODO: The canonical URL is the href without the origin. I think\n    // historically the reason for this is because the initial canonical URL\n    // gets passed as a prop to the top-level React component, which means it\n    // needs to be computed during SSR. If it were to include the origin, it\n    // would need to always be same as location.origin on the client, to prevent\n    // a hydration mismatch. To sidestep this complexity, we omit the origin.\n    //\n    // However, since this is neither a native URL object nor a fully qualified\n    // URL string, we need to be careful about how we use it. To prevent subtle\n    // mistakes, we should create a special type for it, instead of just string.\n    // Or, we should just use a (readonly) URL object instead. The type of the\n    // prop that we pass to seed the initial state does not need to be the same\n    // type as the state itself.\n    const canonicalUrl = createHrefFromUrl(urlAfterRedirects)\n\n    // Check whether the response varies based on the Next-Url header.\n    const varyHeader = response.headers.get('vary')\n    const couldBeIntercepted =\n      varyHeader !== null && varyHeader.includes(NEXT_URL)\n\n    // Track when the network connection closes.\n    const closed = createPromiseWithResolvers<void>()\n\n    // This checks whether the response was served from the per-segment cache,\n    // rather than the old prefetching flow. If it fails, it implies that PPR\n    // is disabled on this route.\n    const routeIsPPREnabled =\n      response.headers.get(NEXT_DID_POSTPONE_HEADER) === '2' ||\n      // In output: \"export\" mode, we can't rely on response headers. But if we\n      // receive a well-formed response, we can assume it's a static response,\n      // because all data is static in this mode.\n      isOutputExportMode\n\n    // Regardless of the type of response, we will never receive dynamic\n    // metadata as part of this prefetch request.\n    const isHeadDynamic = false\n\n    if (routeIsPPREnabled) {\n      const prefetchStream = createPrefetchResponseStream(\n        response.body,\n        closed.resolve,\n        function onResponseSizeUpdate(size) {\n          routeCacheLru.updateSize(entry, size)\n        }\n      )\n      const serverData = await createFromNextReadableStream<RootTreePrefetch>(\n        prefetchStream,\n        headers\n      )\n      if (serverData.buildId !== getAppBuildId()) {\n        // The server build does not match the client. Treat as a 404. During\n        // an actual navigation, the router will trigger an MPA navigation.\n        // TODO: Consider moving the build ID to a response header so we can check\n        // it before decoding the response, and so there's one way of checking\n        // across all response types.\n        // TODO: We should cache the fact that this is an MPA navigation.\n        rejectRouteCacheEntry(entry, Date.now() + 10 * 1000)\n        return null\n      }\n\n      // Get the params that were used to render the target page. These may\n      // be different from the params in the request URL, if the page\n      // was rewritten.\n      const renderedPathname = getRenderedPathname(response)\n      const renderedSearch = getRenderedSearch(response)\n\n      const routeTree = convertRootTreePrefetchToRouteTree(\n        serverData,\n        renderedPathname\n      )\n\n      const staleTimeMs = getStaleTimeMs(serverData.staleTime)\n      fulfillRouteCacheEntry(\n        entry,\n        routeTree,\n        serverData.head,\n        serverData.isHeadPartial,\n        Date.now() + staleTimeMs,\n        couldBeIntercepted,\n        canonicalUrl,\n        renderedSearch,\n        routeIsPPREnabled,\n        isHeadDynamic\n      )\n    } else {\n      // PPR is not enabled for this route. The server responds with a\n      // different format (FlightRouterState) that we need to convert.\n      // TODO: We will unify the responses eventually. I'm keeping the types\n      // separate for now because FlightRouterState has so many\n      // overloaded concerns.\n      const prefetchStream = createPrefetchResponseStream(\n        response.body,\n        closed.resolve,\n        function onResponseSizeUpdate(size) {\n          routeCacheLru.updateSize(entry, size)\n        }\n      )\n      const serverData =\n        await createFromNextReadableStream<NavigationFlightResponse>(\n          prefetchStream,\n          headers\n        )\n      if (serverData.b !== getAppBuildId()) {\n        // The server build does not match the client. Treat as a 404. During\n        // an actual navigation, the router will trigger an MPA navigation.\n        // TODO: Consider moving the build ID to a response header so we can check\n        // it before decoding the response, and so there's one way of checking\n        // across all response types.\n        // TODO: We should cache the fact that this is an MPA navigation.\n        rejectRouteCacheEntry(entry, Date.now() + 10 * 1000)\n        return null\n      }\n\n      writeDynamicTreeResponseIntoCache(\n        Date.now(),\n        task,\n        // The non-PPR response format is what we'd get if we prefetched these segments\n        // using the LoadingBoundary fetch strategy, so mark their cache entries accordingly.\n        FetchStrategy.LoadingBoundary,\n        response as RSCResponse<NavigationFlightResponse>,\n        serverData,\n        entry,\n        couldBeIntercepted,\n        canonicalUrl,\n        routeIsPPREnabled\n      )\n    }\n\n    if (!couldBeIntercepted && nextUrl !== null) {\n      // This route will never be intercepted. So we can use this entry for all\n      // requests to this route, regardless of the Next-Url header. This works\n      // because when reading the cache we always check for a valid\n      // non-intercepted entry first.\n      //\n      // Re-key the entry. Since we're in an async task, we must first confirm\n      // that the entry hasn't been concurrently modified by a different task.\n      const currentKeypath: Prefix<RouteCacheKeypath> = [href, nextUrl]\n      const expectedEntry = routeCacheMap.get(currentKeypath)\n      if (expectedEntry === entry) {\n        routeCacheMap.delete(currentKeypath)\n        const newKeypath: Prefix<RouteCacheKeypath> = [href]\n        routeCacheMap.set(newKeypath, entry)\n        // We don't need to update the LRU because the entry is already in it.\n        // But since we changed the keypath, we do need to update that, so we\n        // know how to remove it from the map if it gets evicted from the LRU.\n        entry.keypath = newKeypath\n      } else {\n        // Something else modified this entry already. Since the re-keying is\n        // just a performance optimization, we can safely skip it.\n      }\n    }\n    // Return a promise that resolves when the network connection closes, so\n    // the scheduler can track the number of concurrent network connections.\n    return { value: null, closed: closed.promise }\n  } catch (error) {\n    // Either the connection itself failed, or something bad happened while\n    // decoding the response.\n    rejectRouteCacheEntry(entry, Date.now() + 10 * 1000)\n    return null\n  }\n}\n\nexport async function fetchSegmentOnCacheMiss(\n  route: FulfilledRouteCacheEntry,\n  segmentCacheEntry: PendingSegmentCacheEntry,\n  routeKey: RouteCacheKey,\n  tree: RouteTree\n): Promise<PrefetchSubtaskResult<FulfilledSegmentCacheEntry> | null> {\n  // This function is allowed to use async/await because it contains the actual\n  // fetch that gets issued on a cache miss. Notice it writes the result to the\n  // cache entry directly, rather than return data that is then written by\n  // the caller.\n  //\n  // Segment fetches are non-blocking so we don't need to ping the scheduler\n  // on completion.\n\n  // Use the canonical URL to request the segment, not the original URL. These\n  // are usually the same, but the canonical URL will be different if the route\n  // tree response was redirected. To avoid an extra waterfall on every segment\n  // request, we pass the redirected URL instead of the original one.\n  const url = new URL(route.canonicalUrl, routeKey.href)\n  const nextUrl = routeKey.nextUrl\n\n  const requestKey = tree.requestKey\n  const normalizedRequestKey =\n    requestKey === ROOT_SEGMENT_REQUEST_KEY\n      ? // The root segment is a special case. To simplify the server-side\n        // handling of these requests, we encode the root segment path as\n        // `_index` instead of as an empty string. This should be treated as\n        // an implementation detail and not as a stable part of the protocol.\n        // It just needs to match the equivalent logic that happens when\n        // prerendering the responses. It should not leak outside of Next.js.\n        ('/_index' as SegmentRequestKey)\n      : requestKey\n\n  const headers: RequestHeaders = {\n    [RSC_HEADER]: '1',\n    [NEXT_ROUTER_PREFETCH_HEADER]: '1',\n    [NEXT_ROUTER_SEGMENT_PREFETCH_HEADER]: normalizedRequestKey,\n  }\n  if (nextUrl !== null) {\n    headers[NEXT_URL] = nextUrl\n  }\n\n  const requestUrl = isOutputExportMode\n    ? // In output: \"export\" mode, we need to add the segment path to the URL.\n      addSegmentPathToUrlInOutputExportMode(url, normalizedRequestKey)\n    : url\n  try {\n    const response = await fetchPrefetchResponse(requestUrl, headers)\n    if (\n      !response ||\n      !response.ok ||\n      response.status === 204 || // Cache miss\n      // This checks whether the response was served from the per-segment cache,\n      // rather than the old prefetching flow. If it fails, it implies that PPR\n      // is disabled on this route. Theoretically this should never happen\n      // because we only issue requests for segments once we've verified that\n      // the route supports PPR.\n      (response.headers.get(NEXT_DID_POSTPONE_HEADER) !== '2' &&\n        // In output: \"export\" mode, we can't rely on response headers. But if\n        // we receive a well-formed response, we can assume it's a static\n        // response, because all data is static in this mode.\n        !isOutputExportMode) ||\n      !response.body\n    ) {\n      // Server responded with an error, or with a miss. We should still cache\n      // the response, but we can try again after 10 seconds.\n      rejectSegmentCacheEntry(segmentCacheEntry, Date.now() + 10 * 1000)\n      return null\n    }\n\n    // Track when the network connection closes.\n    const closed = createPromiseWithResolvers<void>()\n\n    // Wrap the original stream in a new stream that never closes. That way the\n    // Flight client doesn't error if there's a hanging promise.\n    const prefetchStream = createPrefetchResponseStream(\n      response.body,\n      closed.resolve,\n      function onResponseSizeUpdate(size) {\n        segmentCacheLru.updateSize(segmentCacheEntry, size)\n      }\n    )\n    const serverData = await (createFromNextReadableStream(\n      prefetchStream,\n      headers\n    ) as Promise<SegmentPrefetch>)\n    if (serverData.buildId !== getAppBuildId()) {\n      // The server build does not match the client. Treat as a 404. During\n      // an actual navigation, the router will trigger an MPA navigation.\n      // TODO: Consider moving the build ID to a response header so we can check\n      // it before decoding the response, and so there's one way of checking\n      // across all response types.\n      rejectSegmentCacheEntry(segmentCacheEntry, Date.now() + 10 * 1000)\n      return null\n    }\n    return {\n      value: fulfillSegmentCacheEntry(\n        segmentCacheEntry,\n        serverData.rsc,\n        serverData.loading,\n        // TODO: The server does not currently provide per-segment stale time.\n        // So we use the stale time of the route.\n        route.staleAt,\n        serverData.isPartial\n      ),\n      // Return a promise that resolves when the network connection closes, so\n      // the scheduler can track the number of concurrent network connections.\n      closed: closed.promise,\n    }\n  } catch (error) {\n    // Either the connection itself failed, or something bad happened while\n    // decoding the response.\n    rejectSegmentCacheEntry(segmentCacheEntry, Date.now() + 10 * 1000)\n    return null\n  }\n}\n\nexport async function fetchSegmentPrefetchesUsingDynamicRequest(\n  task: PrefetchTask,\n  route: FulfilledRouteCacheEntry,\n  fetchStrategy:\n    | FetchStrategy.LoadingBoundary\n    | FetchStrategy.PPRRuntime\n    | FetchStrategy.Full,\n  dynamicRequestTree: FlightRouterState,\n  spawnedEntries: Map<SegmentCacheKey, PendingSegmentCacheEntry>\n): Promise<PrefetchSubtaskResult<null> | null> {\n  const url = new URL(route.canonicalUrl, task.key.href)\n  const nextUrl = task.key.nextUrl\n  const headers: RequestHeaders = {\n    [RSC_HEADER]: '1',\n    [NEXT_ROUTER_STATE_TREE_HEADER]:\n      prepareFlightRouterStateForRequest(dynamicRequestTree),\n  }\n  if (nextUrl !== null) {\n    headers[NEXT_URL] = nextUrl\n  }\n  switch (fetchStrategy) {\n    case FetchStrategy.Full: {\n      // We omit the prefetch header from a full prefetch because it's essentially\n      // just a navigation request that happens ahead of time — it should include\n      // all the same data in the response.\n      break\n    }\n    case FetchStrategy.PPRRuntime: {\n      headers[NEXT_ROUTER_PREFETCH_HEADER] = '2'\n      break\n    }\n    case FetchStrategy.LoadingBoundary: {\n      headers[NEXT_ROUTER_PREFETCH_HEADER] = '1'\n      break\n    }\n    default: {\n      fetchStrategy satisfies never\n    }\n  }\n\n  try {\n    const response = await fetchPrefetchResponse(url, headers)\n    if (!response || !response.ok || !response.body) {\n      // Server responded with an error, or with a miss. We should still cache\n      // the response, but we can try again after 10 seconds.\n      rejectSegmentEntriesIfStillPending(spawnedEntries, Date.now() + 10 * 1000)\n      return null\n    }\n\n    const renderedSearch = getRenderedSearch(response)\n    if (renderedSearch !== route.renderedSearch) {\n      // The search params that were used to render the target page are\n      // different from the search params in the request URL. This only happens\n      // when there's a dynamic rewrite in between the tree prefetch and the\n      // data prefetch.\n      // TODO: For now, since this is an edge case, we reject the prefetch, but\n      // the proper way to handle this is to evict the stale route tree entry\n      // then fill the cache with the new response.\n      rejectSegmentEntriesIfStillPending(spawnedEntries, Date.now() + 10 * 1000)\n      return null\n    }\n\n    // Track when the network connection closes.\n    const closed = createPromiseWithResolvers<void>()\n\n    let fulfilledEntries: Array<FulfilledSegmentCacheEntry> | null = null\n    const prefetchStream = createPrefetchResponseStream(\n      response.body,\n      closed.resolve,\n      function onResponseSizeUpdate(totalBytesReceivedSoFar) {\n        // When processing a dynamic response, we don't know how large each\n        // individual segment is, so approximate by assiging each segment\n        // the average of the total response size.\n        if (fulfilledEntries === null) {\n          // Haven't received enough data yet to know which segments\n          // were included.\n          return\n        }\n        const averageSize = totalBytesReceivedSoFar / fulfilledEntries.length\n        for (const entry of fulfilledEntries) {\n          segmentCacheLru.updateSize(entry, averageSize)\n        }\n      }\n    )\n    const serverData = await (createFromNextReadableStream(\n      prefetchStream,\n      headers\n    ) as Promise<NavigationFlightResponse>)\n\n    const isResponsePartial =\n      fetchStrategy === FetchStrategy.PPRRuntime\n        ? // A runtime prefetch may have holes.\n          !!response.headers.get(NEXT_DID_POSTPONE_HEADER)\n        : // Full and LoadingBoundary prefetches cannot have holes.\n          // (even if we did set the prefetch header, we only use this codepath for non-PPR-enabled routes)\n          false\n\n    // Aside from writing the data into the cache, this function also returns\n    // the entries that were fulfilled, so we can streamingly update their sizes\n    // in the LRU as more data comes in.\n    fulfilledEntries = writeDynamicRenderResponseIntoCache(\n      Date.now(),\n      task,\n      fetchStrategy,\n      response as RSCResponse<NavigationFlightResponse>,\n      serverData,\n      isResponsePartial,\n      route,\n      spawnedEntries\n    )\n\n    // Return a promise that resolves when the network connection closes, so\n    // the scheduler can track the number of concurrent network connections.\n    return { value: null, closed: closed.promise }\n  } catch (error) {\n    rejectSegmentEntriesIfStillPending(spawnedEntries, Date.now() + 10 * 1000)\n    return null\n  }\n}\n\nfunction writeDynamicTreeResponseIntoCache(\n  now: number,\n  task: PrefetchTask,\n  fetchStrategy:\n    | FetchStrategy.LoadingBoundary\n    | FetchStrategy.PPRRuntime\n    | FetchStrategy.Full,\n  response: RSCResponse<NavigationFlightResponse>,\n  serverData: NavigationFlightResponse,\n  entry: PendingRouteCacheEntry,\n  couldBeIntercepted: boolean,\n  canonicalUrl: string,\n  routeIsPPREnabled: boolean\n) {\n  // Get the URL that was used to render the target page. This may be different\n  // from the URL in the request URL, if the page was rewritten.\n  const renderedSearch = getRenderedSearch(response)\n\n  const normalizedFlightDataResult = normalizeFlightData(serverData.f)\n  if (\n    // A string result means navigating to this route will result in an\n    // MPA navigation.\n    typeof normalizedFlightDataResult === 'string' ||\n    normalizedFlightDataResult.length !== 1\n  ) {\n    rejectRouteCacheEntry(entry, now + 10 * 1000)\n    return\n  }\n  const flightData = normalizedFlightDataResult[0]\n  if (!flightData.isRootRender) {\n    // Unexpected response format.\n    rejectRouteCacheEntry(entry, now + 10 * 1000)\n    return\n  }\n\n  const flightRouterState = flightData.tree\n  // TODO: Extract to function\n  const staleTimeHeaderSeconds = response.headers.get(\n    NEXT_ROUTER_STALE_TIME_HEADER\n  )\n  const staleTimeMs =\n    staleTimeHeaderSeconds !== null\n      ? getStaleTimeMs(parseInt(staleTimeHeaderSeconds, 10))\n      : STATIC_STALETIME_MS\n\n  // If the response contains dynamic holes, then we must conservatively assume\n  // that any individual segment might contain dynamic holes, and also the\n  // head. If it did not contain dynamic holes, then we can assume every segment\n  // and the head is completely static.\n  const isResponsePartial =\n    response.headers.get(NEXT_DID_POSTPONE_HEADER) === '1'\n\n  // Since this is a dynamic response, we must conservatively assume that the\n  // head responded with dynamic data.\n  const isHeadDynamic = true\n\n  const fulfilledEntry = fulfillRouteCacheEntry(\n    entry,\n    convertRootFlightRouterStateToRouteTree(flightRouterState),\n    flightData.head,\n    flightData.isHeadPartial,\n    now + staleTimeMs,\n    couldBeIntercepted,\n    canonicalUrl,\n    renderedSearch,\n    routeIsPPREnabled,\n    isHeadDynamic\n  )\n\n  // If the server sent segment data as part of the response, we should write\n  // it into the cache to prevent a second, redundant prefetch request.\n  //\n  // TODO: When `clientSegmentCache` is enabled, the server does not include\n  // segment data when responding to a route tree prefetch request. However,\n  // when `clientSegmentCache` is set to \"client-only\", and PPR is enabled (or\n  // the page is fully static), the normal check is bypassed and the server\n  // responds with the full page. This is a temporary situation until we can\n  // remove the \"client-only\" option. Then, we can delete this function call.\n  writeDynamicRenderResponseIntoCache(\n    now,\n    task,\n    fetchStrategy,\n    response,\n    serverData,\n    isResponsePartial,\n    fulfilledEntry,\n    null\n  )\n}\n\nfunction rejectSegmentEntriesIfStillPending(\n  entries: Map<SegmentCacheKey, SegmentCacheEntry>,\n  staleAt: number\n): Array<FulfilledSegmentCacheEntry> {\n  const fulfilledEntries = []\n  for (const entry of entries.values()) {\n    if (entry.status === EntryStatus.Pending) {\n      rejectSegmentCacheEntry(entry, staleAt)\n    } else if (entry.status === EntryStatus.Fulfilled) {\n      fulfilledEntries.push(entry)\n    }\n  }\n  return fulfilledEntries\n}\n\nfunction writeDynamicRenderResponseIntoCache(\n  now: number,\n  task: PrefetchTask,\n  fetchStrategy:\n    | FetchStrategy.LoadingBoundary\n    | FetchStrategy.PPRRuntime\n    | FetchStrategy.Full,\n  response: RSCResponse<NavigationFlightResponse>,\n  serverData: NavigationFlightResponse,\n  isResponsePartial: boolean,\n  route: FulfilledRouteCacheEntry,\n  spawnedEntries: Map<SegmentCacheKey, PendingSegmentCacheEntry> | null\n): Array<FulfilledSegmentCacheEntry> | null {\n  if (serverData.b !== getAppBuildId()) {\n    // The server build does not match the client. Treat as a 404. During\n    // an actual navigation, the router will trigger an MPA navigation.\n    // TODO: Consider moving the build ID to a response header so we can check\n    // it before decoding the response, and so there's one way of checking\n    // across all response types.\n    if (spawnedEntries !== null) {\n      rejectSegmentEntriesIfStillPending(spawnedEntries, now + 10 * 1000)\n    }\n    return null\n  }\n\n  const flightDatas = normalizeFlightData(serverData.f)\n  if (typeof flightDatas === 'string') {\n    // This means navigating to this route will result in an MPA navigation.\n    // TODO: We should cache this, too, so that the MPA navigation is immediate.\n    return null\n  }\n\n  const staleTimeHeaderSeconds = response.headers.get(\n    NEXT_ROUTER_STALE_TIME_HEADER\n  )\n  const staleTimeMs =\n    staleTimeHeaderSeconds !== null\n      ? getStaleTimeMs(parseInt(staleTimeHeaderSeconds, 10))\n      : STATIC_STALETIME_MS\n  const staleAt = now + staleTimeMs\n\n  for (const flightData of flightDatas) {\n    const seedData = flightData.seedData\n    if (seedData !== null) {\n      // The data sent by the server represents only a subtree of the app. We\n      // need to find the part of the task tree that matches the response.\n      //\n      // segmentPath represents the parent path of subtree. It's a repeating\n      // pattern of parallel route key and segment:\n      //\n      //   [string, Segment, string, Segment, string, Segment, ...]\n      const segmentPath = flightData.segmentPath\n      let requestKey = ROOT_SEGMENT_REQUEST_KEY\n      let cacheKey = ROOT_SEGMENT_CACHE_KEY\n      for (let i = 0; i < segmentPath.length; i += 2) {\n        const parallelRouteKey: string = segmentPath[i]\n        const segment: FlightRouterStateSegment = segmentPath[i + 1]\n        const requestKeyPart = createSegmentRequestKeyPart(segment)\n        requestKey = appendSegmentRequestKeyPart(\n          requestKey,\n          parallelRouteKey,\n          requestKeyPart\n        )\n        cacheKey = appendSegmentCacheKeyPart(\n          cacheKey,\n          parallelRouteKey,\n          createSegmentCacheKeyPart(requestKeyPart, segment)\n        )\n      }\n\n      writeSeedDataIntoCache(\n        now,\n        task,\n        fetchStrategy,\n        route,\n        staleAt,\n        flightData.tree,\n        seedData,\n        isResponsePartial,\n        cacheKey,\n        requestKey,\n        spawnedEntries\n      )\n    }\n\n    // During a dynamic request, the server sends back new head data for the\n    // page. Overwrite the existing head with the new one. Note that we're\n    // intentionally not taking into account whether the existing head is\n    // already complete, even though the incoming head might not have finished\n    // streaming in yet. This is to prioritize consistency of the head with\n    // the segment data (though it's still not a guarantee, since some of the\n    // segment data may be reused from a previous request).\n    route.head = flightData.head\n    route.isHeadPartial = flightData.isHeadPartial\n    route.TODO_isHeadDynamic = true\n\n    // TODO: Currently the stale time of the route tree represents the\n    // stale time of both the route tree *and* all the segment data. So we\n    // can't just overwrite this field; we have to use whichever value is\n    // lower. In the future, though, the plan is to track segment lifetimes\n    // separately from the route tree lifetime.\n    if (staleAt < route.staleAt) {\n      route.staleAt = staleAt\n    }\n  }\n  // Any entry that's still pending was intentionally not rendered by the\n  // server, because it was inside the loading boundary. Mark them as rejected\n  // so we know not to fetch them again.\n  // TODO: If PPR is enabled on some routes but not others, then it's possible\n  // that a different page is able to do a per-segment prefetch of one of the\n  // segments we're marking as rejected here. We should mark on the segment\n  // somehow that the reason for the rejection is because of a non-PPR prefetch.\n  // That way a per-segment prefetch knows to disregard the rejection.\n  if (spawnedEntries !== null) {\n    const fulfilledEntries = rejectSegmentEntriesIfStillPending(\n      spawnedEntries,\n      now + 10 * 1000\n    )\n    return fulfilledEntries\n  }\n  return null\n}\n\nfunction writeSeedDataIntoCache(\n  now: number,\n  task: PrefetchTask,\n  fetchStrategy:\n    | FetchStrategy.LoadingBoundary\n    | FetchStrategy.PPRRuntime\n    | FetchStrategy.Full,\n  route: FulfilledRouteCacheEntry,\n  staleAt: number,\n  flightRouterState: FlightRouterState,\n  seedData: CacheNodeSeedData,\n  isResponsePartial: boolean,\n  cacheKey: SegmentCacheKey,\n  requestKey: SegmentRequestKey,\n  entriesOwnedByCurrentTask: Map<\n    SegmentCacheKey,\n    PendingSegmentCacheEntry\n  > | null\n) {\n  // This function is used to write the result of a dynamic server request\n  // (CacheNodeSeedData) into the prefetch cache. It's used in cases where we\n  // want to treat a dynamic response as if it were static. The two examples\n  // where this happens are <Link prefetch={true}> (which implicitly opts\n  // dynamic data into being static) and when prefetching a PPR-disabled route\n  const rsc = seedData[0]\n  const loading = seedData[2]\n  const isPartial = rsc === null || isResponsePartial\n\n  // We should only write into cache entries that are owned by us. Or create\n  // a new one and write into that. We must never write over an entry that was\n  // created by a different task, because that causes data races.\n  const ownedEntry =\n    entriesOwnedByCurrentTask !== null\n      ? entriesOwnedByCurrentTask.get(cacheKey)\n      : undefined\n  if (ownedEntry !== undefined) {\n    fulfillSegmentCacheEntry(ownedEntry, rsc, loading, staleAt, isPartial)\n  } else {\n    // There's no matching entry. Attempt to create a new one.\n    const possiblyNewEntry = readOrCreateSegmentCacheEntry(\n      now,\n      fetchStrategy,\n      route,\n      cacheKey\n    )\n    if (possiblyNewEntry.status === EntryStatus.Empty) {\n      // Confirmed this is a new entry. We can fulfill it.\n      const newEntry = possiblyNewEntry\n      fulfillSegmentCacheEntry(\n        upgradeToPendingSegment(newEntry, fetchStrategy),\n        rsc,\n        loading,\n        staleAt,\n        isPartial\n      )\n    } else {\n      // There was already an entry in the cache. But we may be able to\n      // replace it with the new one from the server.\n      const newEntry = fulfillSegmentCacheEntry(\n        upgradeToPendingSegment(\n          createDetachedSegmentCacheEntry(staleAt),\n          fetchStrategy\n        ),\n        rsc,\n        loading,\n        staleAt,\n        isPartial\n      )\n      upsertSegmentEntry(\n        now,\n        getSegmentKeypath(fetchStrategy, route, cacheKey),\n        newEntry\n      )\n    }\n  }\n  // Recursively write the child data into the cache.\n  const flightRouterStateChildren = flightRouterState[1]\n  const seedDataChildren = seedData[1]\n  for (const parallelRouteKey in flightRouterStateChildren) {\n    const childFlightRouterState = flightRouterStateChildren[parallelRouteKey]\n    const childSeedData: CacheNodeSeedData | null | void =\n      seedDataChildren[parallelRouteKey]\n    if (childSeedData !== null && childSeedData !== undefined) {\n      const childSegment = childFlightRouterState[0]\n      const childRequestKeyPart = createSegmentRequestKeyPart(childSegment)\n      const childRequestKey = appendSegmentRequestKeyPart(\n        requestKey,\n        parallelRouteKey,\n        childRequestKeyPart\n      )\n      const childCacheKey = appendSegmentCacheKeyPart(\n        cacheKey,\n        parallelRouteKey,\n        createSegmentCacheKeyPart(childRequestKeyPart, childSegment)\n      )\n      writeSeedDataIntoCache(\n        now,\n        task,\n        fetchStrategy,\n        route,\n        staleAt,\n        childFlightRouterState,\n        childSeedData,\n        isResponsePartial,\n        childCacheKey,\n        childRequestKey,\n        entriesOwnedByCurrentTask\n      )\n    }\n  }\n}\n\nasync function fetchPrefetchResponse<T>(\n  url: URL,\n  headers: RequestHeaders\n): Promise<RSCResponse<T> | null> {\n  const fetchPriority = 'low'\n  // When issuing a prefetch request, don't immediately decode the response; we\n  // use the lower level `createFromResponse` API instead because we need to do\n  // some extra processing of the response stream. See\n  // `createPrefetchResponseStream` for more details.\n  const shouldImmediatelyDecode = false\n  const response = await createFetch<T>(\n    url,\n    headers,\n    fetchPriority,\n    shouldImmediatelyDecode\n  )\n  if (!response.ok) {\n    return null\n  }\n\n  // Check the content type\n  if (isOutputExportMode) {\n    // In output: \"export\" mode, we relaxed about the content type, since it's\n    // not Next.js that's serving the response. If the status is OK, assume the\n    // response is valid. If it's not a valid response, the Flight client won't\n    // be able to decode it, and we'll treat it as a miss.\n  } else {\n    const contentType = response.headers.get('content-type')\n    const isFlightResponse =\n      contentType && contentType.startsWith(RSC_CONTENT_TYPE_HEADER)\n    if (!isFlightResponse) {\n      return null\n    }\n  }\n  return response\n}\n\nfunction createPrefetchResponseStream(\n  originalFlightStream: ReadableStream<Uint8Array>,\n  onStreamClose: () => void,\n  onResponseSizeUpdate: (size: number) => void\n): ReadableStream<Uint8Array> {\n  // When PPR is enabled, prefetch streams may contain references that never\n  // resolve, because that's how we encode dynamic data access. In the decoded\n  // object returned by the Flight client, these are reified into hanging\n  // promises that suspend during render, which is effectively what we want.\n  // The UI resolves when it switches to the dynamic data stream\n  // (via useDeferredValue(dynamic, static)).\n  //\n  // However, the Flight implementation currently errors if the server closes\n  // the response before all the references are resolved. As a cheat to work\n  // around this, we wrap the original stream in a new stream that never closes,\n  // and therefore doesn't error.\n  //\n  // While processing the original stream, we also incrementally update the size\n  // of the cache entry in the LRU.\n  let totalByteLength = 0\n  const reader = originalFlightStream.getReader()\n  return new ReadableStream({\n    async pull(controller) {\n      while (true) {\n        const { done, value } = await reader.read()\n        if (!done) {\n          // Pass to the target stream and keep consuming the Flight response\n          // from the server.\n          controller.enqueue(value)\n\n          // Incrementally update the size of the cache entry in the LRU.\n          // NOTE: Since prefetch responses are delivered in a single chunk,\n          // it's not really necessary to do this streamingly, but I'm doing it\n          // anyway in case this changes in the future.\n          totalByteLength += value.byteLength\n          onResponseSizeUpdate(totalByteLength)\n          continue\n        }\n        // The server stream has closed. Exit, but intentionally do not close\n        // the target stream. We do notify the caller, though.\n        onStreamClose()\n        return\n      }\n    },\n  })\n}\n\nfunction addSegmentPathToUrlInOutputExportMode(\n  url: URL,\n  segmentPath: SegmentRequestKey\n): URL {\n  if (isOutputExportMode) {\n    // In output: \"export\" mode, we cannot use a header to encode the segment\n    // path. Instead, we append it to the end of the pathname.\n    const staticUrl = new URL(url)\n    const routeDir = staticUrl.pathname.endsWith('/')\n      ? staticUrl.pathname.slice(0, -1)\n      : staticUrl.pathname\n    const staticExportFilename =\n      convertSegmentPathToStaticExportFilename(segmentPath)\n    staticUrl.pathname = `${routeDir}/${staticExportFilename}`\n    return staticUrl\n  }\n  return url\n}\n\n/**\n * Checks whether the new fetch strategy is likely to provide more content than the old one.\n *\n * Generally, when an app uses dynamic data, a \"more specific\" fetch strategy is expected to provide more content:\n * - `LoadingBoundary` only provides static layouts\n * - `PPR` can provide shells for each segment (even for segments that use dynamic data)\n * - `PPRRuntime` can additionally include content that uses searchParams, params, or cookies\n * - `Full` includes all the content, even if it uses dynamic data\n *\n * However, it's possible that a more specific fetch strategy *won't* give us more content if:\n * - a segment is fully static\n *   (then, `PPR`/`PPRRuntime`/`Full` will all yield equivalent results)\n * - providing searchParams/params/cookies doesn't reveal any more content, e.g. because of an `await connection()`\n *   (then, `PPR` and `PPRRuntime` will yield equivalent results, only `Full` will give us more)\n * Because of this, when comparing two segments, we should also check if the existing segment is partial.\n * If it's not partial, then there's no need to prefetch it again, even using a \"more specific\" strategy.\n * There's currently no way to know if `PPRRuntime` will yield more data that `PPR`, so we have to assume it will.\n *\n * Also note that, in practice, we don't expect to be comparing `LoadingBoundary` to `PPR`/`PPRRuntime`,\n * because a non-PPR-enabled route wouldn't ever use the latter strategies. It might however use `Full`.\n */\nexport function canNewFetchStrategyProvideMoreContent(\n  currentStrategy: FetchStrategy,\n  newStrategy: FetchStrategy\n): boolean {\n  return currentStrategy < newStrategy\n}\n","import type {\n  FlightRouterState,\n  Segment as FlightRouterStateSegment,\n  Segment,\n} from '../../../shared/lib/app-router-types'\nimport { HasLoadingBoundary } from '../../../shared/lib/app-router-types'\nimport { matchSegment } from '../match-segments'\nimport {\n  readOrCreateRouteCacheEntry,\n  readOrCreateSegmentCacheEntry,\n  fetchRouteOnCacheMiss,\n  fetchSegmentOnCacheMiss,\n  EntryStatus,\n  type FulfilledRouteCacheEntry,\n  type RouteCacheEntry,\n  type SegmentCacheEntry,\n  type RouteTree,\n  fetchSegmentPrefetchesUsingDynamicRequest,\n  type PendingSegmentCacheEntry,\n  convertRouteTreeToFlightRouterState,\n  readOrCreateRevalidatingSegmentEntry,\n  upsertSegmentEntry,\n  type FulfilledSegmentCacheEntry,\n  upgradeToPendingSegment,\n  waitForSegmentCacheEntry,\n  resetRevalidatingSegmentEntry,\n  getSegmentKeypath,\n  canNewFetchStrategyProvideMoreContent,\n} from './cache'\nimport type { RouteCacheKey } from './cache-key'\nimport { createCacheKey } from './cache-key'\nimport {\n  FetchStrategy,\n  type PrefetchTaskFetchStrategy,\n  getCurrentCacheVersion,\n  PrefetchPriority,\n} from '../segment-cache'\nimport {\n  addSearchParamsIfPageSegment,\n  PAGE_SEGMENT_KEY,\n} from '../../../shared/lib/segment'\nimport type { SegmentCacheKey } from '../../../shared/lib/segment-cache/segment-value-encoding'\n\nconst scheduleMicrotask =\n  typeof queueMicrotask === 'function'\n    ? queueMicrotask\n    : (fn: () => unknown) =>\n        Promise.resolve()\n          .then(fn)\n          .catch((error) =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n\nexport type PrefetchTask = {\n  key: RouteCacheKey\n\n  /**\n   * The FlightRouterState at the time the task was initiated. This is needed\n   * when falling back to the non-PPR behavior, which only prefetches up to\n   * the first loading boundary.\n   */\n  treeAtTimeOfPrefetch: FlightRouterState\n\n  /**\n   * The cache version at the time the task was initiated. This is used to\n   * determine if the cache was invalidated since the task was initiated.\n   */\n  cacheVersion: number\n\n  /**\n   * Whether to prefetch dynamic data, in addition to static data. This is\n   * used by `<Link prefetch={true}>`.\n   *\n   * Note that a task with `FetchStrategy.PPR` might need to use\n   * `FetchStrategy.LoadingBoundary` instead if we find out that a route\n   * does not support PPR after doing the initial route prefetch.\n   */\n  fetchStrategy: PrefetchTaskFetchStrategy\n\n  /**\n   * sortId is an incrementing counter\n   *\n   * Newer prefetches are prioritized over older ones, so that as new links\n   * enter the viewport, they are not starved by older links that are no\n   * longer relevant. In the future, we can add additional prioritization\n   * heuristics, like removing prefetches once a link leaves the viewport.\n   *\n   * The sortId is assigned when the prefetch is initiated, and reassigned if\n   * the same task is prefetched again (effectively bumping it to the top of\n   * the queue).\n   *\n   * TODO: We can add additional fields here to indicate what kind of prefetch\n   * it is. For example, was it initiated by a link? Or was it an imperative\n   * call? If it was initiated by a link, we can remove it from the queue when\n   * the link leaves the viewport, but if it was an imperative call, then we\n   * should keep it in the queue until it's fulfilled.\n   *\n   * We can also add priority levels. For example, hovering over a link could\n   * increase the priority of its prefetch.\n   */\n  sortId: number\n\n  /**\n   * The priority of the task. Like sortId, this affects the task's position in\n   * the queue, so it must never be updated without resifting the heap.\n   */\n  priority: PrefetchPriority\n\n  /**\n   * The phase of the task. Tasks are split into multiple phases so that their\n   * priority can be adjusted based on what kind of work they're doing.\n   * Concretely, prefetching the route tree is higher priority than prefetching\n   * segment data.\n   */\n  phase: PrefetchPhase\n\n  /**\n   * These fields are temporary state for tracking the currently running task.\n   * They are reset after each iteration of the task queue.\n   */\n  hasBackgroundWork: boolean\n  spawnedRuntimePrefetches: Set<SegmentCacheKey> | null\n\n  /**\n   * True if the prefetch was cancelled.\n   */\n  isCanceled: boolean\n\n  /**\n   * The callback passed to `router.prefetch`, if given.\n   */\n  onInvalidate: null | (() => void)\n\n  /**\n   * The index of the task in the heap's backing array. Used to efficiently\n   * change the priority of a task by re-sifting it, which requires knowing\n   * where it is in the array. This is only used internally by the heap\n   * algorithm. The naive alternative is indexOf every time a task is queued,\n   * which has O(n) complexity.\n   *\n   * We also use this field to check whether a task is currently in the queue.\n   */\n  _heapIndex: number\n}\n\nconst enum PrefetchTaskExitStatus {\n  /**\n   * The task yielded because there are too many requests in progress.\n   */\n  InProgress,\n\n  /**\n   * The task is blocked. It needs more data before it can proceed.\n   *\n   * Currently the only reason this happens is we're still waiting to receive a\n   * route tree from the server, because we can't start prefetching the segments\n   * until we know what to prefetch.\n   */\n  Blocked,\n\n  /**\n   * There's nothing left to prefetch.\n   */\n  Done,\n}\n\n/**\n * Prefetch tasks are processed in two phases: first the route tree is fetched,\n * then the segments. We use this to priortize tasks that have not yet fetched\n * the route tree.\n */\nconst enum PrefetchPhase {\n  RouteTree = 1,\n  Segments = 0,\n}\n\nexport type PrefetchSubtaskResult<T> = {\n  /**\n   * A promise that resolves when the network connection is closed.\n   */\n  closed: Promise<void>\n  value: T\n}\n\nconst taskHeap: Array<PrefetchTask> = []\n\nlet inProgressRequests = 0\n\nlet sortIdCounter = 0\nlet didScheduleMicrotask = false\n\n// The most recently hovered (or touched, etc) link, i.e. the most recent task\n// scheduled at Intent priority. There's only ever a single task at Intent\n// priority at a time. We reserve special network bandwidth for this task only.\nlet mostRecentlyHoveredLink: PrefetchTask | null = null\n\n// CDN cache propagation delay after revalidation (in milliseconds)\nconst REVALIDATION_COOLDOWN_MS = 300\n\n// Timeout handle for the revalidation cooldown. When non-null, prefetch\n// requests are blocked to allow CDN cache propagation.\nlet revalidationCooldownTimeoutHandle: ReturnType<typeof setTimeout> | null =\n  null\n\n/**\n * Called by the cache when revalidation occurs. Starts a cooldown period\n * during which prefetch requests are blocked to allow CDN cache propagation.\n */\nexport function startRevalidationCooldown(): void {\n  // Clear any existing timeout in case multiple revalidations happen\n  // in quick succession.\n  if (revalidationCooldownTimeoutHandle !== null) {\n    clearTimeout(revalidationCooldownTimeoutHandle)\n  }\n\n  // Schedule the cooldown to expire after the delay.\n  revalidationCooldownTimeoutHandle = setTimeout(() => {\n    revalidationCooldownTimeoutHandle = null\n    // Retry the prefetch queue now that the cooldown has expired.\n    ensureWorkIsScheduled()\n  }, REVALIDATION_COOLDOWN_MS)\n}\n\nexport type IncludeDynamicData = null | 'full' | 'dynamic'\n\n/**\n * Initiates a prefetch task for the given URL. If a prefetch for the same URL\n * is already in progress, this will bump it to the top of the queue.\n *\n * This is not a user-facing function. By the time this is called, the href is\n * expected to be validated and normalized.\n *\n * @param key The RouteCacheKey to prefetch.\n * @param treeAtTimeOfPrefetch The app's current FlightRouterState\n * @param fetchStrategy Whether to prefetch dynamic data, in addition to\n * static data. This is used by `<Link prefetch={true}>`.\n */\nexport function schedulePrefetchTask(\n  key: RouteCacheKey,\n  treeAtTimeOfPrefetch: FlightRouterState,\n  fetchStrategy: PrefetchTaskFetchStrategy,\n  priority: PrefetchPriority,\n  onInvalidate: null | (() => void)\n): PrefetchTask {\n  // Spawn a new prefetch task\n  const task: PrefetchTask = {\n    key,\n    treeAtTimeOfPrefetch,\n    cacheVersion: getCurrentCacheVersion(),\n    priority,\n    phase: PrefetchPhase.RouteTree,\n    hasBackgroundWork: false,\n    spawnedRuntimePrefetches: null,\n    fetchStrategy,\n    sortId: sortIdCounter++,\n    isCanceled: false,\n    onInvalidate,\n    _heapIndex: -1,\n  }\n\n  trackMostRecentlyHoveredLink(task)\n\n  heapPush(taskHeap, task)\n\n  // Schedule an async task to process the queue.\n  //\n  // The main reason we process the queue in an async task is for batching.\n  // It's common for a single JS task/event to trigger multiple prefetches.\n  // By deferring to a microtask, we only process the queue once per JS task.\n  // If they have different priorities, it also ensures they are processed in\n  // the optimal order.\n  ensureWorkIsScheduled()\n\n  return task\n}\n\nexport function cancelPrefetchTask(task: PrefetchTask): void {\n  // Remove the prefetch task from the queue. If the task already completed,\n  // then this is a no-op.\n  //\n  // We must also explicitly mark the task as canceled so that a blocked task\n  // does not get added back to the queue when it's pinged by the network.\n  task.isCanceled = true\n  heapDelete(taskHeap, task)\n}\n\nexport function reschedulePrefetchTask(\n  task: PrefetchTask,\n  treeAtTimeOfPrefetch: FlightRouterState,\n  fetchStrategy: PrefetchTaskFetchStrategy,\n  priority: PrefetchPriority\n): void {\n  // Bump the prefetch task to the top of the queue, as if it were a fresh\n  // task. This is essentially the same as canceling the task and scheduling\n  // a new one, except it reuses the original object.\n  //\n  // The primary use case is to increase the priority of a Link-initated\n  // prefetch on hover.\n\n  // Un-cancel the task, in case it was previously canceled.\n  task.isCanceled = false\n  task.phase = PrefetchPhase.RouteTree\n\n  // Assign a new sort ID to move it ahead of all other tasks at the same\n  // priority level. (Higher sort IDs are processed first.)\n  task.sortId = sortIdCounter++\n  task.priority =\n    // If this task is the most recently hovered link, maintain its\n    // Intent priority, even if the rescheduled priority is lower.\n    task === mostRecentlyHoveredLink ? PrefetchPriority.Intent : priority\n\n  task.treeAtTimeOfPrefetch = treeAtTimeOfPrefetch\n  task.fetchStrategy = fetchStrategy\n\n  trackMostRecentlyHoveredLink(task)\n\n  if (task._heapIndex !== -1) {\n    // The task is already in the queue.\n    heapResift(taskHeap, task)\n  } else {\n    heapPush(taskHeap, task)\n  }\n  ensureWorkIsScheduled()\n}\n\nexport function isPrefetchTaskDirty(\n  task: PrefetchTask,\n  nextUrl: string | null,\n  tree: FlightRouterState\n): boolean {\n  // This is used to quickly bail out of a prefetch task if the result is\n  // guaranteed to not have changed since the task was initiated. This is\n  // strictly an optimization — theoretically, if it always returned true, no\n  // behavior should change because a full prefetch task will effectively\n  // perform the same checks.\n  const currentCacheVersion = getCurrentCacheVersion()\n  return (\n    task.cacheVersion !== currentCacheVersion ||\n    task.treeAtTimeOfPrefetch !== tree ||\n    task.key.nextUrl !== nextUrl\n  )\n}\n\nfunction trackMostRecentlyHoveredLink(task: PrefetchTask) {\n  // Track the mostly recently hovered link, i.e. the most recently scheduled\n  // task at Intent priority. There must only be one such task at a time.\n  if (\n    task.priority === PrefetchPriority.Intent &&\n    task !== mostRecentlyHoveredLink\n  ) {\n    if (mostRecentlyHoveredLink !== null) {\n      // Bump the previously hovered link's priority down to Default.\n      if (mostRecentlyHoveredLink.priority !== PrefetchPriority.Background) {\n        mostRecentlyHoveredLink.priority = PrefetchPriority.Default\n        heapResift(taskHeap, mostRecentlyHoveredLink)\n      }\n    }\n    mostRecentlyHoveredLink = task\n  }\n}\n\nfunction ensureWorkIsScheduled() {\n  if (didScheduleMicrotask) {\n    // Already scheduled a task to process the queue\n    return\n  }\n  didScheduleMicrotask = true\n  scheduleMicrotask(processQueueInMicrotask)\n}\n\n/**\n * Checks if we've exceeded the maximum number of concurrent prefetch requests,\n * to avoid saturating the browser's internal network queue. This is a\n * cooperative limit — prefetch tasks should check this before issuing\n * new requests.\n *\n * Also checks if we're within the revalidation cooldown window, during which\n * prefetch requests are delayed to allow CDN cache propagation.\n */\nfunction hasNetworkBandwidth(task: PrefetchTask): boolean {\n  // Check if we're within the revalidation cooldown window\n  if (revalidationCooldownTimeoutHandle !== null) {\n    // We're within the cooldown window. Return false to prevent prefetching.\n    // When the cooldown expires, the timeout will call ensureWorkIsScheduled()\n    // to retry the queue.\n    return false\n  }\n\n  // TODO: Also check if there's an in-progress navigation. We should never\n  // add prefetch requests to the network queue if an actual navigation is\n  // taking place, to ensure there's sufficient bandwidth for render-blocking\n  // data and resources.\n\n  // TODO: Consider reserving some amount of bandwidth for static prefetches.\n\n  if (task.priority === PrefetchPriority.Intent) {\n    // The most recently hovered link is allowed to exceed the default limit.\n    //\n    // The goal is to always have enough bandwidth to start a new prefetch\n    // request when hovering over a link.\n    //\n    // However, because we don't abort in-progress requests, it's still possible\n    // we'll run out of bandwidth. When links are hovered in quick succession,\n    // there could be multiple hover requests running simultaneously.\n    return inProgressRequests < 12\n  }\n\n  // The default limit is lower than the limit for a hovered link.\n  return inProgressRequests < 4\n}\n\nfunction spawnPrefetchSubtask<T>(\n  prefetchSubtask: Promise<PrefetchSubtaskResult<T> | null>\n): Promise<T | null> {\n  // When the scheduler spawns an async task, we don't await its result.\n  // Instead, the async task writes its result directly into the cache, then\n  // pings the scheduler to continue.\n  //\n  // We process server responses streamingly, so the prefetch subtask will\n  // likely resolve before we're finished receiving all the data. The subtask\n  // result includes a promise that resolves once the network connection is\n  // closed. The scheduler uses this to control network bandwidth by tracking\n  // and limiting the number of concurrent requests.\n  inProgressRequests++\n  return prefetchSubtask.then((result) => {\n    if (result === null) {\n      // The prefetch task errored before it could start processing the\n      // network stream. Assume the connection is closed.\n      onPrefetchConnectionClosed()\n      return null\n    }\n    // Wait for the connection to close before freeing up more bandwidth.\n    result.closed.then(onPrefetchConnectionClosed)\n    return result.value\n  })\n}\n\nfunction onPrefetchConnectionClosed(): void {\n  inProgressRequests--\n\n  // Notify the scheduler that we have more bandwidth, and can continue\n  // processing tasks.\n  ensureWorkIsScheduled()\n}\n\n/**\n * Notify the scheduler that we've received new data for an in-progress\n * prefetch. The corresponding task will be added back to the queue (unless the\n * task has been canceled in the meantime).\n */\nexport function pingPrefetchTask(task: PrefetchTask) {\n  // \"Ping\" a prefetch that's already in progress to notify it of new data.\n  if (\n    // Check if prefetch was canceled.\n    task.isCanceled ||\n    // Check if prefetch is already queued.\n    task._heapIndex !== -1\n  ) {\n    return\n  }\n  // Add the task back to the queue.\n  heapPush(taskHeap, task)\n  ensureWorkIsScheduled()\n}\n\nfunction processQueueInMicrotask() {\n  didScheduleMicrotask = false\n\n  // We aim to minimize how often we read the current time. Since nearly all\n  // functions in the prefetch scheduler are synchronous, we can read the time\n  // once and pass it as an argument wherever it's needed.\n  const now = Date.now()\n\n  // Process the task queue until we run out of network bandwidth.\n  let task = heapPeek(taskHeap)\n  while (task !== null && hasNetworkBandwidth(task)) {\n    task.cacheVersion = getCurrentCacheVersion()\n\n    const exitStatus = pingRoute(now, task)\n\n    // These fields are only valid for a single attempt. Reset them after each\n    // iteration of the task queue.\n    const hasBackgroundWork = task.hasBackgroundWork\n    task.hasBackgroundWork = false\n    task.spawnedRuntimePrefetches = null\n\n    switch (exitStatus) {\n      case PrefetchTaskExitStatus.InProgress:\n        // The task yielded because there are too many requests in progress.\n        // Stop processing tasks until we have more bandwidth.\n        return\n      case PrefetchTaskExitStatus.Blocked:\n        // The task is blocked. It needs more data before it can proceed.\n        // Keep the task out of the queue until the server responds.\n        heapPop(taskHeap)\n        // Continue to the next task\n        task = heapPeek(taskHeap)\n        continue\n      case PrefetchTaskExitStatus.Done:\n        if (task.phase === PrefetchPhase.RouteTree) {\n          // Finished prefetching the route tree. Proceed to prefetching\n          // the segments.\n          task.phase = PrefetchPhase.Segments\n          heapResift(taskHeap, task)\n        } else if (hasBackgroundWork) {\n          // The task spawned additional background work. Reschedule the task\n          // at background priority.\n          task.priority = PrefetchPriority.Background\n          heapResift(taskHeap, task)\n        } else {\n          // The prefetch is complete. Continue to the next task.\n          heapPop(taskHeap)\n        }\n        task = heapPeek(taskHeap)\n        continue\n      default:\n        exitStatus satisfies never\n    }\n  }\n}\n\n/**\n * Check this during a prefetch task to determine if background work can be\n * performed. If so, it evaluates to `true`. Otherwise, it returns `false`,\n * while also scheduling a background task to run later. Usage:\n *\n * @example\n * if (background(task)) {\n *   // Perform background-pri work\n * }\n */\nfunction background(task: PrefetchTask): boolean {\n  if (task.priority === PrefetchPriority.Background) {\n    return true\n  }\n  task.hasBackgroundWork = true\n  return false\n}\n\nfunction pingRoute(now: number, task: PrefetchTask): PrefetchTaskExitStatus {\n  const key = task.key\n  const route = readOrCreateRouteCacheEntry(now, task, key)\n  const exitStatus = pingRootRouteTree(now, task, route)\n\n  if (exitStatus !== PrefetchTaskExitStatus.InProgress && key.search !== '') {\n    // If the URL has a non-empty search string, also prefetch the pathname\n    // without the search string. We use the searchless route tree as a base for\n    // optimistic routing; see requestOptimisticRouteCacheEntry for details.\n    //\n    // Note that we don't need to prefetch any of the segment data. Just the\n    // route tree.\n    //\n    // TODO: This is a temporary solution; the plan is to replace this by adding\n    // a wildcard lookup method to the TupleMap implementation. This is\n    // non-trivial to implement because it needs to account for things like\n    // fallback route entries, hence this temporary workaround.\n    const url = new URL(key.href)\n    url.search = ''\n    const keyWithoutSearch = createCacheKey(url.href, key.nextUrl)\n    const routeWithoutSearch = readOrCreateRouteCacheEntry(\n      now,\n      task,\n      keyWithoutSearch\n    )\n    switch (routeWithoutSearch.status) {\n      case EntryStatus.Empty: {\n        if (background(task)) {\n          routeWithoutSearch.status = EntryStatus.Pending\n          spawnPrefetchSubtask(\n            fetchRouteOnCacheMiss(routeWithoutSearch, task, keyWithoutSearch)\n          )\n        }\n        break\n      }\n      case EntryStatus.Pending:\n      case EntryStatus.Fulfilled:\n      case EntryStatus.Rejected: {\n        // Either the route tree is already cached, or there's already a\n        // request in progress. Since we don't need to fetch any segment data\n        // for this route, there's nothing left to do.\n        break\n      }\n      default:\n        routeWithoutSearch satisfies never\n    }\n  }\n\n  return exitStatus\n}\n\nfunction pingRootRouteTree(\n  now: number,\n  task: PrefetchTask,\n  route: RouteCacheEntry\n): PrefetchTaskExitStatus {\n  switch (route.status) {\n    case EntryStatus.Empty: {\n      // Route is not yet cached, and there's no request already in progress.\n      // Spawn a task to request the route, load it into the cache, and ping\n      // the task to continue.\n\n      // TODO: There are multiple strategies in the <Link> API for prefetching\n      // a route. Currently we've only implemented the main one: per-segment,\n      // static-data only.\n      //\n      // There's also `<Link prefetch={true}>`\n      // which prefetch both static *and* dynamic data.\n      // Similarly, we need to fallback to the old, per-page\n      // behavior if PPR is disabled for a route (via the incremental opt-in).\n      //\n      // Those cases will be handled here.\n      spawnPrefetchSubtask(fetchRouteOnCacheMiss(route, task, task.key))\n\n      // If the request takes longer than a minute, a subsequent request should\n      // retry instead of waiting for this one. When the response is received,\n      // this value will be replaced by a new value based on the stale time sent\n      // from the server.\n      // TODO: We should probably also manually abort the fetch task, to reclaim\n      // server bandwidth.\n      route.staleAt = now + 60 * 1000\n\n      // Upgrade to Pending so we know there's already a request in progress\n      route.status = EntryStatus.Pending\n\n      // Intentional fallthrough to the Pending branch\n    }\n    case EntryStatus.Pending: {\n      // Still pending. We can't start prefetching the segments until the route\n      // tree has loaded. Add the task to the set of blocked tasks so that it\n      // is notified when the route tree is ready.\n      const blockedTasks = route.blockedTasks\n      if (blockedTasks === null) {\n        route.blockedTasks = new Set([task])\n      } else {\n        blockedTasks.add(task)\n      }\n      return PrefetchTaskExitStatus.Blocked\n    }\n    case EntryStatus.Rejected: {\n      // Route tree failed to load. Treat as a 404.\n      return PrefetchTaskExitStatus.Done\n    }\n    case EntryStatus.Fulfilled: {\n      if (task.phase !== PrefetchPhase.Segments) {\n        // Do not prefetch segment data until we've entered the segment phase.\n        return PrefetchTaskExitStatus.Done\n      }\n      // Recursively fill in the segment tree.\n      if (!hasNetworkBandwidth(task)) {\n        // Stop prefetching segments until there's more bandwidth.\n        return PrefetchTaskExitStatus.InProgress\n      }\n      const tree = route.tree\n\n      // A task's fetch strategy gets set to `PPR` for any \"auto\" prefetch.\n      // If it turned out that the route isn't PPR-enabled, we need to use `LoadingBoundary` instead.\n      // We don't need to do this for runtime prefetches, because those are only available in\n      // `cacheComponents`, where every route is PPR.\n      const fetchStrategy =\n        task.fetchStrategy === FetchStrategy.PPR\n          ? route.isPPREnabled\n            ? FetchStrategy.PPR\n            : FetchStrategy.LoadingBoundary\n          : task.fetchStrategy\n\n      switch (fetchStrategy) {\n        case FetchStrategy.PPR: {\n          // For Cache Components pages, each segment may be prefetched\n          // statically or using a runtime request, based on various\n          // configurations and heuristics. We'll do this in two passes: first\n          // traverse the tree and perform all the static prefetches.\n          //\n          // Then, if there are any segments that need a runtime request,\n          // do another pass to perform a runtime prefetch.\n          const exitStatus = pingSharedPartOfCacheComponentsTree(\n            now,\n            task,\n            route,\n            task.treeAtTimeOfPrefetch,\n            tree\n          )\n          if (exitStatus === PrefetchTaskExitStatus.InProgress) {\n            // Child yielded without finishing.\n            return PrefetchTaskExitStatus.InProgress\n          }\n          const spawnedRuntimePrefetches = task.spawnedRuntimePrefetches\n          if (spawnedRuntimePrefetches !== null) {\n            // During the first pass, we discovered segments that require a\n            // runtime prefetch. Do a second pass to construct a request tree.\n            const spawnedEntries = new Map<\n              SegmentCacheKey,\n              PendingSegmentCacheEntry\n            >()\n            const requestTree = pingRuntimePrefetches(\n              now,\n              task,\n              route,\n              tree,\n              spawnedRuntimePrefetches,\n              spawnedEntries\n            )\n            let needsDynamicRequest = spawnedEntries.size > 0\n            if (needsDynamicRequest) {\n              // Perform a dynamic prefetch request and populate the cache with\n              // the result.\n              spawnPrefetchSubtask(\n                fetchSegmentPrefetchesUsingDynamicRequest(\n                  task,\n                  route,\n                  FetchStrategy.PPRRuntime,\n                  requestTree,\n                  spawnedEntries\n                )\n              )\n            }\n          }\n          return PrefetchTaskExitStatus.Done\n        }\n        case FetchStrategy.Full:\n        case FetchStrategy.PPRRuntime:\n        case FetchStrategy.LoadingBoundary: {\n          // Prefetch multiple segments using a single dynamic request.\n          // TODO: We can consolidate this branch with previous one by modeling\n          // it as if the first segment in the new tree has runtime prefetching\n          // enabled. Will do this as a follow-up refactor. Might want to remove\n          // the special metatdata case below first. In the meantime, it's not\n          // really that much duplication, just would be nice to remove one of\n          // these codepaths.\n          const spawnedEntries = new Map<\n            SegmentCacheKey,\n            PendingSegmentCacheEntry\n          >()\n          const dynamicRequestTree = diffRouteTreeAgainstCurrent(\n            now,\n            task,\n            route,\n            task.treeAtTimeOfPrefetch,\n            tree,\n            spawnedEntries,\n            fetchStrategy\n          )\n\n          let needsDynamicRequest = spawnedEntries.size > 0\n\n          if (\n            !needsDynamicRequest &&\n            route.isHeadPartial &&\n            route.TODO_metadataStatus === EntryStatus.Empty\n          ) {\n            // All the segment data is already cached, however, we need to issue\n            // a request anyway so we can prefetch the head. Update the status\n            // field to prevent additional requests from being spawned while\n            // this one is in progress.\n            // TODO: This is a temporary, targeted solution to fix a regression\n            // we found. It exists to prevent the scheduler from sending a\n            // redundant request if there's already one in progress.\n            // Essentially, it will attempt once at most, then give up until the\n            // route entry expires or is evicted by other means. But because\n            // this doesn't have its own stale time separate from the route\n            // itself, there will be edge cases where the metadata fails to be\n            // fully prefetched. Consider caching metadata using a separate\n            // entry type so we can model this more cleanly. The circumstances\n            // that lead to this branch running in the first place are\n            // relatively rare, so it's not critical.\n            route.TODO_metadataStatus = EntryStatus.Fulfilled\n            needsDynamicRequest = true\n            // This instructs the server to only send the metadata.\n            dynamicRequestTree[3] = 'metadata-only'\n            // We can null out the children to reduce the request size, since\n            // they won't be needed.\n            dynamicRequestTree[1] = {}\n          }\n\n          if (needsDynamicRequest) {\n            // Perform a dynamic prefetch request and populate the cache with\n            // the result\n            spawnPrefetchSubtask(\n              fetchSegmentPrefetchesUsingDynamicRequest(\n                task,\n                route,\n                fetchStrategy,\n                dynamicRequestTree,\n                spawnedEntries\n              )\n            )\n          }\n          return PrefetchTaskExitStatus.Done\n        }\n        default:\n          fetchStrategy satisfies never\n      }\n      break\n    }\n    default: {\n      route satisfies never\n    }\n  }\n  return PrefetchTaskExitStatus.Done\n}\n\nfunction pingSharedPartOfCacheComponentsTree(\n  now: number,\n  task: PrefetchTask,\n  route: FulfilledRouteCacheEntry,\n  oldTree: FlightRouterState,\n  newTree: RouteTree\n): PrefetchTaskExitStatus {\n  // When Cache Components is enabled (or PPR, or a fully static route when PPR\n  // is disabled; those cases are treated equivalently to Cache Components), we\n  // start by prefetching each segment individually. Once we reach the \"new\"\n  // part of the tree — the part that doesn't exist on the current page — we\n  // may choose to switch to a runtime prefetch instead, based on the\n  // information sent by the server in the route tree.\n  //\n  // The traversal starts in the \"shared\" part of the tree. Once we reach the\n  // \"new\" part of the tree, we switch to a different traversal,\n  // pingNewPartOfCacheComponentsTree.\n\n  // Prefetch this segment's static data.\n  const segment = readOrCreateSegmentCacheEntry(\n    now,\n    task.fetchStrategy,\n    route,\n    newTree.cacheKey\n  )\n  pingStaticSegmentData(now, task, route, segment, task.key, newTree)\n\n  // Recursively ping the children.\n  const oldTreeChildren = oldTree[1]\n  const newTreeChildren = newTree.slots\n  if (newTreeChildren !== null) {\n    for (const parallelRouteKey in newTreeChildren) {\n      if (!hasNetworkBandwidth(task)) {\n        // Stop prefetching segments until there's more bandwidth.\n        return PrefetchTaskExitStatus.InProgress\n      }\n      const newTreeChild = newTreeChildren[parallelRouteKey]\n      const newTreeChildSegment = newTreeChild.segment\n      const oldTreeChild: FlightRouterState | void =\n        oldTreeChildren[parallelRouteKey]\n      const oldTreeChildSegment: FlightRouterStateSegment | void =\n        oldTreeChild?.[0]\n      let childExitStatus\n      if (\n        oldTreeChildSegment !== undefined &&\n        doesCurrentSegmentMatchCachedSegment(\n          route,\n          newTreeChildSegment,\n          oldTreeChildSegment\n        )\n      ) {\n        // We're still in the \"shared\" part of the tree.\n        childExitStatus = pingSharedPartOfCacheComponentsTree(\n          now,\n          task,\n          route,\n          oldTreeChild,\n          newTreeChild\n        )\n      } else {\n        // We've entered the \"new\" part of the tree. Switch\n        // traversal functions.\n        childExitStatus = pingNewPartOfCacheComponentsTree(\n          now,\n          task,\n          route,\n          newTreeChild\n        )\n      }\n      if (childExitStatus === PrefetchTaskExitStatus.InProgress) {\n        // Child yielded without finishing.\n        return PrefetchTaskExitStatus.InProgress\n      }\n    }\n  }\n\n  return PrefetchTaskExitStatus.Done\n}\n\nfunction pingNewPartOfCacheComponentsTree(\n  now: number,\n  task: PrefetchTask,\n  route: FulfilledRouteCacheEntry,\n  tree: RouteTree\n): PrefetchTaskExitStatus.InProgress | PrefetchTaskExitStatus.Done {\n  // We're now prefetching in the \"new\" part of the tree, the part that doesn't\n  // exist on the current page. (In other words, we're deeper than the\n  // shared layouts.) Segments in here default to being prefetched statically.\n  // However, if the server instructs us to, we may switch to a runtime\n  // prefetch instead. Traverse the tree and check at each segment.\n  if (tree.hasRuntimePrefetch) {\n    // This route has a runtime prefetch response. Since we're below the shared\n    // layout, everything from this point should be prefetched using a single,\n    // combined runtime request, rather than using per-segment static requests.\n    // This is true even if some of the child segments are known to be fully\n    // static — once we've decided to perform a runtime prefetch, we might as\n    // well respond with the static segments in the same roundtrip. (That's how\n    // regular navigations work, too.) We'll still skip over segments that are\n    // already cached, though.\n    //\n    // It's the server's responsibility to set a reasonable value of\n    // `hasRuntimePrefetch`. Currently it's user-defined, but eventually, the\n    // server may send a value of `false` even if the user opts in, if it\n    // determines during build that the route is always fully static. There are\n    // more optimizations we can do once we implement fallback param\n    // tracking, too.\n    //\n    // Use the task object to collect the segments that need a runtime prefetch.\n    // This will signal to the outer task queue that a second traversal is\n    // required to construct a request tree.\n    if (task.spawnedRuntimePrefetches === null) {\n      task.spawnedRuntimePrefetches = new Set([tree.cacheKey])\n    } else {\n      task.spawnedRuntimePrefetches.add(tree.cacheKey)\n    }\n    // Then exit the traversal without prefetching anything further.\n    return PrefetchTaskExitStatus.Done\n  }\n\n  // This segment should not be runtime prefetched. Prefetch its static data.\n  const segment = readOrCreateSegmentCacheEntry(\n    now,\n    task.fetchStrategy,\n    route,\n    tree.cacheKey\n  )\n  pingStaticSegmentData(now, task, route, segment, task.key, tree)\n  if (tree.slots !== null) {\n    if (!hasNetworkBandwidth(task)) {\n      // Stop prefetching segments until there's more bandwidth.\n      return PrefetchTaskExitStatus.InProgress\n    }\n    // Recursively ping the children.\n    for (const parallelRouteKey in tree.slots) {\n      const childTree = tree.slots[parallelRouteKey]\n      const childExitStatus = pingNewPartOfCacheComponentsTree(\n        now,\n        task,\n        route,\n        childTree\n      )\n      if (childExitStatus === PrefetchTaskExitStatus.InProgress) {\n        // Child yielded without finishing.\n        return PrefetchTaskExitStatus.InProgress\n      }\n    }\n  }\n  // This segment and all its children have finished prefetching.\n  return PrefetchTaskExitStatus.Done\n}\n\nfunction diffRouteTreeAgainstCurrent(\n  now: number,\n  task: PrefetchTask,\n  route: FulfilledRouteCacheEntry,\n  oldTree: FlightRouterState,\n  newTree: RouteTree,\n  spawnedEntries: Map<string, PendingSegmentCacheEntry>,\n  fetchStrategy:\n    | FetchStrategy.Full\n    | FetchStrategy.PPRRuntime\n    | FetchStrategy.LoadingBoundary\n): FlightRouterState {\n  // This is a single recursive traversal that does multiple things:\n  // - Finds the parts of the target route (newTree) that are not part of\n  //   of the current page (oldTree) by diffing them, using the same algorithm\n  //   as a real navigation.\n  // - Constructs a request tree (FlightRouterState) that describes which\n  //   segments need to be prefetched and which ones are already cached.\n  // - Creates a set of pending cache entries for the segments that need to\n  //   be prefetched, so that a subsequent prefetch task does not request the\n  //   same segments again.\n  const oldTreeChildren = oldTree[1]\n  const newTreeChildren = newTree.slots\n  let requestTreeChildren: Record<string, FlightRouterState> = {}\n  if (newTreeChildren !== null) {\n    for (const parallelRouteKey in newTreeChildren) {\n      const newTreeChild = newTreeChildren[parallelRouteKey]\n      const newTreeChildSegment = newTreeChild.segment\n      const oldTreeChild: FlightRouterState | void =\n        oldTreeChildren[parallelRouteKey]\n      const oldTreeChildSegment: FlightRouterStateSegment | void =\n        oldTreeChild?.[0]\n      if (\n        oldTreeChildSegment !== undefined &&\n        doesCurrentSegmentMatchCachedSegment(\n          route,\n          newTreeChildSegment,\n          oldTreeChildSegment\n        )\n      ) {\n        // This segment is already part of the current route. Keep traversing.\n        const requestTreeChild = diffRouteTreeAgainstCurrent(\n          now,\n          task,\n          route,\n          oldTreeChild,\n          newTreeChild,\n          spawnedEntries,\n          fetchStrategy\n        )\n        requestTreeChildren[parallelRouteKey] = requestTreeChild\n      } else {\n        // This segment is not part of the current route. We're entering a\n        // part of the tree that we need to prefetch (unless everything is\n        // already cached).\n        switch (fetchStrategy) {\n          case FetchStrategy.LoadingBoundary: {\n            // When PPR is disabled, we can't prefetch per segment. We must\n            // fallback to the old prefetch behavior and send a dynamic request.\n            // Only routes that include a loading boundary can be prefetched in\n            // this way.\n            //\n            // This is simlar to a \"full\" prefetch, but we're much more\n            // conservative about which segments to include in the request.\n            //\n            // The server will only render up to the first loading boundary\n            // inside new part of the tree. If there's no loading boundary\n            // anywhere in the tree, the server will never return any data, so\n            // we can skip the request.\n            const subtreeHasLoadingBoundary =\n              newTreeChild.hasLoadingBoundary !==\n              HasLoadingBoundary.SubtreeHasNoLoadingBoundary\n            const requestTreeChild = subtreeHasLoadingBoundary\n              ? pingPPRDisabledRouteTreeUpToLoadingBoundary(\n                  now,\n                  task,\n                  route,\n                  newTreeChild,\n                  null,\n                  spawnedEntries\n                )\n              : // There's no loading boundary within this tree. Bail out.\n                convertRouteTreeToFlightRouterState(newTreeChild)\n            requestTreeChildren[parallelRouteKey] = requestTreeChild\n            break\n          }\n          case FetchStrategy.PPRRuntime: {\n            // This is a runtime prefetch. Fetch all cacheable data in the tree,\n            // not just the static PPR shell.\n            const requestTreeChild = pingRouteTreeAndIncludeDynamicData(\n              now,\n              task,\n              route,\n              newTreeChild,\n              false,\n              spawnedEntries,\n              fetchStrategy\n            )\n            requestTreeChildren[parallelRouteKey] = requestTreeChild\n            break\n          }\n          case FetchStrategy.Full: {\n            // This is a \"full\" prefetch. Fetch all the data in the tree, both\n            // static and dynamic. We issue roughly the same request that we\n            // would during a real navigation. The goal is that once the\n            // navigation occurs, the router should not have to fetch any\n            // additional data.\n            //\n            // Although the response will include dynamic data, opting into a\n            // Full prefetch — via <Link prefetch={true}> — implicitly\n            // instructs the cache to treat the response as \"static\", or non-\n            // dynamic, since the whole point is to cache it for\n            // future navigations.\n            //\n            // Construct a tree (currently a FlightRouterState) that represents\n            // which segments need to be prefetched and which ones are already\n            // cached. If the tree is empty, then we can exit. Otherwise, we'll\n            // send the request tree to the server and use the response to\n            // populate the segment cache.\n            const requestTreeChild = pingRouteTreeAndIncludeDynamicData(\n              now,\n              task,\n              route,\n              newTreeChild,\n              false,\n              spawnedEntries,\n              fetchStrategy\n            )\n            requestTreeChildren[parallelRouteKey] = requestTreeChild\n            break\n          }\n          default:\n            fetchStrategy satisfies never\n        }\n      }\n    }\n  }\n  const requestTree: FlightRouterState = [\n    newTree.segment,\n    requestTreeChildren,\n    null,\n    null,\n    newTree.isRootLayout,\n  ]\n  return requestTree\n}\n\nfunction pingPPRDisabledRouteTreeUpToLoadingBoundary(\n  now: number,\n  task: PrefetchTask,\n  route: FulfilledRouteCacheEntry,\n  tree: RouteTree,\n  refetchMarkerContext: 'refetch' | 'inside-shared-layout' | null,\n  spawnedEntries: Map<string, PendingSegmentCacheEntry>\n): FlightRouterState {\n  // This function is similar to pingRouteTreeAndIncludeDynamicData, except the\n  // server is only going to return a minimal loading state — it will stop\n  // rendering at the first loading boundary. Whereas a Full prefetch is\n  // intentionally aggressive and tries to pretfetch all the data that will be\n  // needed for a navigation, a LoadingBoundary prefetch is much more\n  // conservative. For example, it will omit from the request tree any segment\n  // that is already cached, regardles of whether it's partial or full. By\n  // contrast, a Full prefetch will refetch partial segments.\n\n  // \"inside-shared-layout\" tells the server where to start looking for a\n  // loading boundary.\n  let refetchMarker: 'refetch' | 'inside-shared-layout' | null =\n    refetchMarkerContext === null ? 'inside-shared-layout' : null\n\n  const segment = readOrCreateSegmentCacheEntry(\n    now,\n    task.fetchStrategy,\n    route,\n    tree.cacheKey\n  )\n  switch (segment.status) {\n    case EntryStatus.Empty: {\n      // This segment is not cached. Add a refetch marker so the server knows\n      // to start rendering here.\n      // TODO: Instead of a \"refetch\" marker, we could just omit this subtree's\n      // FlightRouterState from the request tree. I think this would probably\n      // already work even without any updates to the server. For consistency,\n      // though, I'll send the full tree and we'll look into this later as part\n      // of a larger redesign of the request protocol.\n\n      // Add the pending cache entry to the result map.\n      spawnedEntries.set(\n        tree.cacheKey,\n        upgradeToPendingSegment(\n          segment,\n          // Set the fetch strategy to LoadingBoundary to indicate that the server\n          // might not include it in the pending response. If another route is able\n          // to issue a per-segment request, we'll do that in the background.\n          FetchStrategy.LoadingBoundary\n        )\n      )\n      if (refetchMarkerContext !== 'refetch') {\n        refetchMarker = refetchMarkerContext = 'refetch'\n      } else {\n        // There's already a parent with a refetch marker, so we don't need\n        // to add another one.\n      }\n      break\n    }\n    case EntryStatus.Fulfilled: {\n      // The segment is already cached.\n      const segmentHasLoadingBoundary =\n        tree.hasLoadingBoundary === HasLoadingBoundary.SegmentHasLoadingBoundary\n      if (segmentHasLoadingBoundary) {\n        // This segment has a loading boundary, which means the server won't\n        // render its children. So there's nothing left to prefetch along this\n        // path. We can bail out.\n        return convertRouteTreeToFlightRouterState(tree)\n      }\n      // NOTE: If the cached segment were fetched using PPR, then it might be\n      // partial. We could get a more complete version of the segment by\n      // including it in this non-PPR request.\n      //\n      // We're intentionally choosing not to, though, because it's generally\n      // better to avoid doing a full prefetch whenever possible.\n      break\n    }\n    case EntryStatus.Pending: {\n      // There's another prefetch currently in progress. Don't add the refetch\n      // marker yet, so the server knows it can skip rendering this segment.\n      break\n    }\n    case EntryStatus.Rejected: {\n      // The segment failed to load. We shouldn't issue another request until\n      // the stale time has elapsed.\n      break\n    }\n    default:\n      segment satisfies never\n  }\n  const requestTreeChildren: Record<string, FlightRouterState> = {}\n  if (tree.slots !== null) {\n    for (const parallelRouteKey in tree.slots) {\n      const childTree = tree.slots[parallelRouteKey]\n      requestTreeChildren[parallelRouteKey] =\n        pingPPRDisabledRouteTreeUpToLoadingBoundary(\n          now,\n          task,\n          route,\n          childTree,\n          refetchMarkerContext,\n          spawnedEntries\n        )\n    }\n  }\n  const requestTree: FlightRouterState = [\n    tree.segment,\n    requestTreeChildren,\n    null,\n    refetchMarker,\n    tree.isRootLayout,\n  ]\n  return requestTree\n}\n\nfunction pingRouteTreeAndIncludeDynamicData(\n  now: number,\n  task: PrefetchTask,\n  route: FulfilledRouteCacheEntry,\n  tree: RouteTree,\n  isInsideRefetchingParent: boolean,\n  spawnedEntries: Map<string, PendingSegmentCacheEntry>,\n  fetchStrategy: FetchStrategy.Full | FetchStrategy.PPRRuntime\n): FlightRouterState {\n  // The tree we're constructing is the same shape as the tree we're navigating\n  // to. But even though this is a \"new\" tree, some of the individual segments\n  // may be cached as a result of other route prefetches.\n  //\n  // So we need to find the first uncached segment along each path add an\n  // explicit \"refetch\" marker so the server knows where to start rendering.\n  // Once the server starts rendering along a path, it keeps rendering the\n  // entire subtree.\n  const segment = readOrCreateSegmentCacheEntry(\n    now,\n    // Note that `fetchStrategy` might be different from `task.fetchStrategy`,\n    // and we have to use the former here.\n    // We can have a task with `FetchStrategy.PPR` where some of its segments are configured to\n    // always use runtime prefetching (via `export const prefetch`), and those should check for\n    // entries that include search params.\n    fetchStrategy,\n    route,\n    tree.cacheKey\n  )\n\n  let spawnedSegment: PendingSegmentCacheEntry | null = null\n\n  switch (segment.status) {\n    case EntryStatus.Empty: {\n      // This segment is not cached. Include it in the request.\n      spawnedSegment = upgradeToPendingSegment(segment, fetchStrategy)\n      break\n    }\n    case EntryStatus.Fulfilled: {\n      // The segment is already cached.\n      if (\n        segment.isPartial &&\n        canNewFetchStrategyProvideMoreContent(\n          segment.fetchStrategy,\n          fetchStrategy\n        )\n      ) {\n        // The cached segment contains dynamic holes, and was prefetched using a less specific strategy than the current one.\n        // This means we're in one of these cases:\n        //   - we have a static prefetch, and we're doing a runtime prefetch\n        //   - we have a static or runtime prefetch, and we're doing a Full prefetch (or a navigation).\n        // In either case, we need to include it in the request to get a more specific (or full) version.\n        spawnedSegment = pingFullSegmentRevalidation(\n          now,\n          route,\n          segment,\n          tree,\n          fetchStrategy\n        )\n      }\n      break\n    }\n    case EntryStatus.Pending:\n    case EntryStatus.Rejected: {\n      // There's either another prefetch currently in progress, or the previous\n      // attempt failed. If the new strategy can provide more content, fetch it again.\n      if (\n        canNewFetchStrategyProvideMoreContent(\n          segment.fetchStrategy,\n          fetchStrategy\n        )\n      ) {\n        spawnedSegment = pingFullSegmentRevalidation(\n          now,\n          route,\n          segment,\n          tree,\n          fetchStrategy\n        )\n      }\n      break\n    }\n    default:\n      segment satisfies never\n  }\n  const requestTreeChildren: Record<string, FlightRouterState> = {}\n  if (tree.slots !== null) {\n    for (const parallelRouteKey in tree.slots) {\n      const childTree = tree.slots[parallelRouteKey]\n      requestTreeChildren[parallelRouteKey] =\n        pingRouteTreeAndIncludeDynamicData(\n          now,\n          task,\n          route,\n          childTree,\n          isInsideRefetchingParent || spawnedSegment !== null,\n          spawnedEntries,\n          fetchStrategy\n        )\n    }\n  }\n\n  if (spawnedSegment !== null) {\n    // Add the pending entry to the result map.\n    spawnedEntries.set(tree.cacheKey, spawnedSegment)\n  }\n\n  // Don't bother to add a refetch marker if one is already present in a parent.\n  const refetchMarker =\n    !isInsideRefetchingParent && spawnedSegment !== null ? 'refetch' : null\n\n  const requestTree: FlightRouterState = [\n    tree.segment,\n    requestTreeChildren,\n    null,\n    refetchMarker,\n    tree.isRootLayout,\n  ]\n  return requestTree\n}\n\nfunction pingRuntimePrefetches(\n  now: number,\n  task: PrefetchTask,\n  route: FulfilledRouteCacheEntry,\n  tree: RouteTree,\n  spawnedRuntimePrefetches: Set<SegmentCacheKey>,\n  spawnedEntries: Map<string, PendingSegmentCacheEntry>\n): FlightRouterState {\n  // Construct a request tree (FlightRouterState) for a runtime prefetch. If\n  // a segment is part of the runtime prefetch, the tree is constructed by\n  // diffing against what's already in the prefetch cache. Otherwise, we send\n  // a regular FlightRouterState with no special markers.\n  //\n  // See pingRouteTreeAndIncludeDynamicData for details.\n  if (spawnedRuntimePrefetches.has(tree.cacheKey)) {\n    // This segment needs a runtime prefetch.\n    return pingRouteTreeAndIncludeDynamicData(\n      now,\n      task,\n      route,\n      tree,\n      false,\n      spawnedEntries,\n      FetchStrategy.PPRRuntime\n    )\n  }\n  let requestTreeChildren: Record<string, FlightRouterState> = {}\n  const slots = tree.slots\n  if (slots !== null) {\n    for (const parallelRouteKey in slots) {\n      const childTree = slots[parallelRouteKey]\n      requestTreeChildren[parallelRouteKey] = pingRuntimePrefetches(\n        now,\n        task,\n        route,\n        childTree,\n        spawnedRuntimePrefetches,\n        spawnedEntries\n      )\n    }\n  }\n\n  // This segment is not part of the runtime prefetch. Clone the base tree.\n  const requestTree: FlightRouterState = [\n    tree.segment,\n    requestTreeChildren,\n    null,\n    null,\n  ]\n  return requestTree\n}\n\nfunction pingStaticSegmentData(\n  now: number,\n  task: PrefetchTask,\n  route: FulfilledRouteCacheEntry,\n  segment: SegmentCacheEntry,\n  routeKey: RouteCacheKey,\n  tree: RouteTree\n): void {\n  switch (segment.status) {\n    case EntryStatus.Empty:\n      // Upgrade to Pending so we know there's already a request in progress\n      spawnPrefetchSubtask(\n        fetchSegmentOnCacheMiss(\n          route,\n          upgradeToPendingSegment(segment, FetchStrategy.PPR),\n          routeKey,\n          tree\n        )\n      )\n      break\n    case EntryStatus.Pending: {\n      // There's already a request in progress. Depending on what kind of\n      // request it is, we may want to revalidate it.\n      switch (segment.fetchStrategy) {\n        case FetchStrategy.PPR:\n        case FetchStrategy.PPRRuntime:\n        case FetchStrategy.Full:\n          // There's already a request in progress. Don't do anything.\n          break\n        case FetchStrategy.LoadingBoundary:\n          // There's a pending request, but because it's using the old\n          // prefetching strategy, we can't be sure if it will be fulfilled by\n          // the response — it might be inside the loading boundary. Perform\n          // a revalidation, but because it's speculative, wait to do it at\n          // background priority.\n          if (background(task)) {\n            // TODO: Instead of speculatively revalidating, consider including\n            // `hasLoading` in the route tree prefetch response.\n            pingPPRSegmentRevalidation(\n              now,\n              task,\n              segment,\n              route,\n              routeKey,\n              tree\n            )\n          }\n          break\n        default:\n          segment.fetchStrategy satisfies never\n      }\n      break\n    }\n    case EntryStatus.Rejected: {\n      // The existing entry in the cache was rejected. Depending on how it\n      // was originally fetched, we may or may not want to revalidate it.\n      switch (segment.fetchStrategy) {\n        case FetchStrategy.PPR:\n        case FetchStrategy.PPRRuntime:\n        case FetchStrategy.Full:\n          // The previous attempt to fetch this entry failed. Don't attempt to\n          // fetch it again until the entry expires.\n          break\n        case FetchStrategy.LoadingBoundary:\n          // There's a rejected entry, but it was fetched using the loading\n          // boundary strategy. So the reason it wasn't returned by the server\n          // might just be because it was inside a loading boundary. Or because\n          // there was a dynamic rewrite. Revalidate it using the per-\n          // segment strategy.\n          //\n          // Because a rejected segment will definitely prevent the segment (and\n          // all of its children) from rendering, we perform this revalidation\n          // immediately instead of deferring it to a background task.\n          pingPPRSegmentRevalidation(now, task, segment, route, routeKey, tree)\n          break\n        default:\n          segment.fetchStrategy satisfies never\n      }\n      break\n    }\n    case EntryStatus.Fulfilled:\n      // Segment is already cached. There's nothing left to prefetch.\n      break\n    default:\n      segment satisfies never\n  }\n\n  // Segments do not have dependent tasks, so once the prefetch is initiated,\n  // there's nothing else for us to do (except write the server data into the\n  // entry, which is handled by `fetchSegmentOnCacheMiss`).\n}\n\nfunction pingPPRSegmentRevalidation(\n  now: number,\n  task: PrefetchTask,\n  currentSegment: SegmentCacheEntry,\n  route: FulfilledRouteCacheEntry,\n  routeKey: RouteCacheKey,\n  tree: RouteTree\n): void {\n  const revalidatingSegment = readOrCreateRevalidatingSegmentEntry(\n    now,\n    currentSegment\n  )\n  switch (revalidatingSegment.status) {\n    case EntryStatus.Empty:\n      // Spawn a prefetch request and upsert the segment into the cache\n      // upon completion.\n      upsertSegmentOnCompletion(\n        task.fetchStrategy,\n        route,\n        tree.cacheKey,\n        spawnPrefetchSubtask(\n          fetchSegmentOnCacheMiss(\n            route,\n            upgradeToPendingSegment(revalidatingSegment, FetchStrategy.PPR),\n            routeKey,\n            tree\n          )\n        )\n      )\n      break\n    case EntryStatus.Pending:\n      // There's already a revalidation in progress.\n      break\n    case EntryStatus.Fulfilled:\n    case EntryStatus.Rejected:\n      // A previous revalidation attempt finished, but we chose not to replace\n      // the existing entry in the cache. Don't try again until or unless the\n      // revalidation entry expires.\n      break\n    default:\n      revalidatingSegment satisfies never\n  }\n}\n\nfunction pingFullSegmentRevalidation(\n  now: number,\n  route: FulfilledRouteCacheEntry,\n  currentSegment: SegmentCacheEntry,\n  tree: RouteTree,\n  fetchStrategy: FetchStrategy.Full | FetchStrategy.PPRRuntime\n): PendingSegmentCacheEntry | null {\n  const revalidatingSegment = readOrCreateRevalidatingSegmentEntry(\n    now,\n    currentSegment\n  )\n  if (revalidatingSegment.status === EntryStatus.Empty) {\n    // During a Full/PPRRuntime prefetch, a single dynamic request is made for all the\n    // segments that we need. So we don't initiate a request here directly. By\n    // returning a pending entry from this function, it signals to the caller\n    // that this segment should be included in the request that's sent to\n    // the server.\n    const pendingSegment = upgradeToPendingSegment(\n      revalidatingSegment,\n      fetchStrategy\n    )\n    upsertSegmentOnCompletion(\n      fetchStrategy,\n      route,\n      tree.cacheKey,\n      waitForSegmentCacheEntry(pendingSegment)\n    )\n    return pendingSegment\n  } else {\n    // There's already a revalidation in progress.\n    const nonEmptyRevalidatingSegment = revalidatingSegment\n    if (\n      canNewFetchStrategyProvideMoreContent(\n        nonEmptyRevalidatingSegment.fetchStrategy,\n        fetchStrategy\n      )\n    ) {\n      // The existing revalidation was fetched using a less specific strategy.\n      // Reset it and start a new revalidation.\n      const emptySegment = resetRevalidatingSegmentEntry(\n        nonEmptyRevalidatingSegment\n      )\n      const pendingSegment = upgradeToPendingSegment(\n        emptySegment,\n        fetchStrategy\n      )\n      upsertSegmentOnCompletion(\n        fetchStrategy,\n        route,\n        tree.cacheKey,\n        waitForSegmentCacheEntry(pendingSegment)\n      )\n      return pendingSegment\n    }\n    switch (nonEmptyRevalidatingSegment.status) {\n      case EntryStatus.Pending:\n        // There's already an in-progress prefetch that includes this segment.\n        return null\n      case EntryStatus.Fulfilled:\n      case EntryStatus.Rejected:\n        // A previous revalidation attempt finished, but we chose not to replace\n        // the existing entry in the cache. Don't try again until or unless the\n        // revalidation entry expires.\n        return null\n      default:\n        nonEmptyRevalidatingSegment satisfies never\n        return null\n    }\n  }\n}\n\nconst noop = () => {}\n\nfunction upsertSegmentOnCompletion(\n  fetchStrategy: FetchStrategy,\n  route: FulfilledRouteCacheEntry,\n  cacheKey: SegmentCacheKey,\n  promise: Promise<FulfilledSegmentCacheEntry | null>\n) {\n  // Wait for a segment to finish loading, then upsert it into the cache\n  promise.then((fulfilled) => {\n    if (fulfilled !== null) {\n      // Received new data. Attempt to replace the existing entry in the cache.\n      const keypath = getSegmentKeypath(fetchStrategy, route, cacheKey)\n      upsertSegmentEntry(Date.now(), keypath, fulfilled)\n    }\n  }, noop)\n}\n\nfunction doesCurrentSegmentMatchCachedSegment(\n  route: FulfilledRouteCacheEntry,\n  currentSegment: Segment,\n  cachedSegment: Segment\n): boolean {\n  if (cachedSegment === PAGE_SEGMENT_KEY) {\n    // In the FlightRouterState stored by the router, the page segment has the\n    // rendered search params appended to the name of the segment. In the\n    // prefetch cache, however, this is stored separately. So, when comparing\n    // the router's current FlightRouterState to the cached FlightRouterState,\n    // we need to make sure we compare both parts of the segment.\n    // TODO: This is not modeled clearly. We use the same type,\n    // FlightRouterState, for both the CacheNode tree _and_ the prefetch cache\n    // _and_ the server response format, when conceptually those are three\n    // different things and treated in different ways. We should encode more of\n    // this information into the type design so mistakes are less likely.\n    return (\n      currentSegment ===\n      addSearchParamsIfPageSegment(\n        PAGE_SEGMENT_KEY,\n        Object.fromEntries(new URLSearchParams(route.renderedSearch))\n      )\n    )\n  }\n  // Non-page segments are compared using the same function as the server\n  return matchSegment(cachedSegment, currentSegment)\n}\n\n// -----------------------------------------------------------------------------\n// The remainder of the module is a MinHeap implementation. Try not to put any\n// logic below here unless it's related to the heap algorithm. We can extract\n// this to a separate module if/when we need multiple kinds of heaps.\n// -----------------------------------------------------------------------------\n\nfunction compareQueuePriority(a: PrefetchTask, b: PrefetchTask) {\n  // Since the queue is a MinHeap, this should return a positive number if b is\n  // higher priority than a, and a negative number if a is higher priority\n  // than b.\n\n  // `priority` is an integer, where higher numbers are higher priority.\n  const priorityDiff = b.priority - a.priority\n  if (priorityDiff !== 0) {\n    return priorityDiff\n  }\n\n  // If the priority is the same, check which phase the prefetch is in — is it\n  // prefetching the route tree, or the segments? Route trees are prioritized.\n  const phaseDiff = b.phase - a.phase\n  if (phaseDiff !== 0) {\n    return phaseDiff\n  }\n\n  // Finally, check the insertion order. `sortId` is an incrementing counter\n  // assigned to prefetches. We want to process the newest prefetches first.\n  return b.sortId - a.sortId\n}\n\nfunction heapPush(heap: Array<PrefetchTask>, node: PrefetchTask): void {\n  const index = heap.length\n  heap.push(node)\n  node._heapIndex = index\n  heapSiftUp(heap, node, index)\n}\n\nfunction heapPeek(heap: Array<PrefetchTask>): PrefetchTask | null {\n  return heap.length === 0 ? null : heap[0]\n}\n\nfunction heapPop(heap: Array<PrefetchTask>): PrefetchTask | null {\n  if (heap.length === 0) {\n    return null\n  }\n  const first = heap[0]\n  first._heapIndex = -1\n  const last = heap.pop() as PrefetchTask\n  if (last !== first) {\n    heap[0] = last\n    last._heapIndex = 0\n    heapSiftDown(heap, last, 0)\n  }\n  return first\n}\n\nfunction heapDelete(heap: Array<PrefetchTask>, node: PrefetchTask): void {\n  const index = node._heapIndex\n  if (index !== -1) {\n    node._heapIndex = -1\n    if (heap.length !== 0) {\n      const last = heap.pop() as PrefetchTask\n      if (last !== node) {\n        heap[index] = last\n        last._heapIndex = index\n        heapSiftDown(heap, last, index)\n      }\n    }\n  }\n}\n\nfunction heapResift(heap: Array<PrefetchTask>, node: PrefetchTask): void {\n  const index = node._heapIndex\n  if (index !== -1) {\n    if (index === 0) {\n      heapSiftDown(heap, node, 0)\n    } else {\n      const parentIndex = (index - 1) >>> 1\n      const parent = heap[parentIndex]\n      if (compareQueuePriority(parent, node) > 0) {\n        // The parent is larger. Sift up.\n        heapSiftUp(heap, node, index)\n      } else {\n        // The parent is smaller (or equal). Sift down.\n        heapSiftDown(heap, node, index)\n      }\n    }\n  }\n}\n\nfunction heapSiftUp(\n  heap: Array<PrefetchTask>,\n  node: PrefetchTask,\n  i: number\n): void {\n  let index = i\n  while (index > 0) {\n    const parentIndex = (index - 1) >>> 1\n    const parent = heap[parentIndex]\n    if (compareQueuePriority(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node\n      node._heapIndex = parentIndex\n      heap[index] = parent\n      parent._heapIndex = index\n\n      index = parentIndex\n    } else {\n      // The parent is smaller. Exit.\n      return\n    }\n  }\n}\n\nfunction heapSiftDown(\n  heap: Array<PrefetchTask>,\n  node: PrefetchTask,\n  i: number\n): void {\n  let index = i\n  const length = heap.length\n  const halfLength = length >>> 1\n  while (index < halfLength) {\n    const leftIndex = (index + 1) * 2 - 1\n    const left = heap[leftIndex]\n    const rightIndex = leftIndex + 1\n    const right = heap[rightIndex]\n\n    // If the left or right node is smaller, swap with the smaller of those.\n    if (compareQueuePriority(left, node) < 0) {\n      if (rightIndex < length && compareQueuePriority(right, left) < 0) {\n        heap[index] = right\n        right._heapIndex = index\n        heap[rightIndex] = node\n        node._heapIndex = rightIndex\n\n        index = rightIndex\n      } else {\n        heap[index] = left\n        left._heapIndex = index\n        heap[leftIndex] = node\n        node._heapIndex = leftIndex\n\n        index = leftIndex\n      }\n    } else if (rightIndex < length && compareQueuePriority(right, node) < 0) {\n      heap[index] = right\n      right._heapIndex = index\n      heap[rightIndex] = node\n      node._heapIndex = rightIndex\n\n      index = rightIndex\n    } else {\n      // Neither child is smaller. Exit.\n      return\n    }\n  }\n}\n","import type { FlightRouterState } from '../../../shared/lib/app-router-types'\nimport { createPrefetchURL } from '../app-router-utils'\nimport { createCacheKey } from './cache-key'\nimport { schedulePrefetchTask } from './scheduler'\nimport {\n  PrefetchPriority,\n  type PrefetchTaskFetchStrategy,\n} from '../segment-cache'\n\n/**\n * Entrypoint for prefetching a URL into the Segment Cache.\n * @param href - The URL to prefetch. Typically this will come from a <Link>,\n * or router.prefetch. It must be validated before we attempt to prefetch it.\n * @param nextUrl - A special header used by the server for interception routes.\n * Roughly corresponds to the current URL.\n * @param treeAtTimeOfPrefetch - The FlightRouterState at the time the prefetch\n * was requested. This is only used when PPR is disabled.\n * @param fetchStrategy - Whether to prefetch dynamic data, in addition to\n * static data. This is used by `<Link prefetch={true}>`.\n * @param onInvalidate - A callback that will be called when the prefetch cache\n * When called, it signals to the listener that the data associated with the\n * prefetch may have been invalidated from the cache. This is not a live\n * subscription — it's called at most once per `prefetch` call. The only\n * supported use case is to trigger a new prefetch inside the listener, if\n * desired. It also may be called even in cases where the associated data is\n * still cached. Prefetching is a poll-based (pull) operation, not an event-\n * based (push) one. Rather than subscribe to specific cache entries, you\n * occasionally poll the prefetch cache to check if anything is missing.\n */\nexport function prefetch(\n  href: string,\n  nextUrl: string | null,\n  treeAtTimeOfPrefetch: FlightRouterState,\n  fetchStrategy: PrefetchTaskFetchStrategy,\n  onInvalidate: null | (() => void)\n) {\n  const url = createPrefetchURL(href)\n  if (url === null) {\n    // This href should not be prefetched.\n    return\n  }\n  const cacheKey = createCacheKey(url.href, nextUrl)\n  schedulePrefetchTask(\n    cacheKey,\n    treeAtTimeOfPrefetch,\n    fetchStrategy,\n    PrefetchPriority.Default,\n    onInvalidate\n  )\n}\n","import type { Segment } from '../../../shared/lib/app-router-types'\nimport { PAGE_SEGMENT_KEY } from '../../../shared/lib/segment'\n\nexport function createRouterCacheKey(\n  segment: Segment,\n  withoutSearchParameters: boolean = false\n) {\n  // if the segment is an array, it means it's a dynamic segment\n  // for example, ['lang', 'en', 'd']. We need to convert it to a string to store it as a cache node key.\n  if (Array.isArray(segment)) {\n    return `${segment[0]}|${segment[1]}|${segment[2]}`\n  }\n\n  // Page segments might have search parameters, ie __PAGE__?foo=bar\n  // When `withoutSearchParameters` is true, we only want to return the page segment\n  if (withoutSearchParameters && segment.startsWith(PAGE_SEGMENT_KEY)) {\n    return PAGE_SEGMENT_KEY\n  }\n\n  return segment\n}\n","import type { FlightRouterState } from '../../../shared/lib/app-router-types'\n\nexport function isNavigatingToNewRootLayout(\n  currentTree: FlightRouterState,\n  nextTree: FlightRouterState\n): boolean {\n  // Compare segments\n  const currentTreeSegment = currentTree[0]\n  const nextTreeSegment = nextTree[0]\n\n  // If any segment is different before we find the root layout, the root layout has changed.\n  // E.g. /same/(group1)/layout.js -> /same/(group2)/layout.js\n  // First segment is 'same' for both, keep looking. (group1) changed to (group2) before the root layout was found, it must have changed.\n  if (Array.isArray(currentTreeSegment) && Array.isArray(nextTreeSegment)) {\n    // Compare dynamic param name and type but ignore the value, different values would not affect the current root layout\n    // /[name] - /slug1 and /slug2, both values (slug1 & slug2) still has the same layout /[name]/layout.js\n    if (\n      currentTreeSegment[0] !== nextTreeSegment[0] ||\n      currentTreeSegment[2] !== nextTreeSegment[2]\n    ) {\n      return true\n    }\n  } else if (currentTreeSegment !== nextTreeSegment) {\n    return true\n  }\n\n  // Current tree root layout found\n  if (currentTree[4]) {\n    // If the next tree doesn't have the root layout flag, it must have changed.\n    return !nextTree[4]\n  }\n  // Current tree didn't have its root layout here, must have changed.\n  if (nextTree[4]) {\n    return true\n  }\n  // We can't assume it's `parallelRoutes.children` here in case the root layout is `app/@something/layout.js`\n  // But it's not possible to be more than one parallelRoutes before the root layout is found\n  // TODO-APP: change to traverse all parallel routes\n  const currentTreeChild = Object.values(currentTree[1])[0]\n  const nextTreeChild = Object.values(nextTree[1])[0]\n  if (!currentTreeChild || !nextTreeChild) return true\n  return isNavigatingToNewRootLayout(currentTreeChild, nextTreeChild)\n}\n","import type {\n  CacheNodeSeedData,\n  FlightRouterState,\n  FlightSegmentPath,\n  Segment,\n} from '../../../shared/lib/app-router-types'\nimport type {\n  CacheNode,\n  ChildSegmentMap,\n  ReadyCacheNode,\n} from '../../../shared/lib/app-router-types'\nimport type {\n  HeadData,\n  LoadingModuleData,\n} from '../../../shared/lib/app-router-types'\nimport { DEFAULT_SEGMENT_KEY } from '../../../shared/lib/segment'\nimport { matchSegment } from '../match-segments'\nimport { createHrefFromUrl } from './create-href-from-url'\nimport { createRouterCacheKey } from './create-router-cache-key'\nimport type { FetchServerResponseResult } from './fetch-server-response'\nimport { isNavigatingToNewRootLayout } from './is-navigating-to-new-root-layout'\nimport { DYNAMIC_STALETIME_MS } from './reducers/navigate-reducer'\n\n// This is yet another tree type that is used to track pending promises that\n// need to be fulfilled once the dynamic data is received. The terminal nodes of\n// this tree represent the new Cache Node trees that were created during this\n// request. We can't use the Cache Node tree or Route State tree directly\n// because those include reused nodes, too. This tree is discarded as soon as\n// the navigation response is received.\ntype SPANavigationTask = {\n  // The router state that corresponds to the tree that this Task represents.\n  route: FlightRouterState\n  // The CacheNode that corresponds to the tree that this Task represents. If\n  // `children` is null (i.e. if this is a terminal task node), then `node`\n  // represents a brand new Cache Node tree, which way or may not need to be\n  // filled with dynamic data from the server.\n  node: CacheNode | null\n  // The tree sent to the server during the dynamic request. This is the\n  // same as `route`, except with the `refetch` marker set on dynamic segments.\n  // If all the segments are static, then this will be null, and no server\n  // request is required.\n  dynamicRequestTree: FlightRouterState | null\n  children: Map<string, SPANavigationTask> | null\n}\n\n// A special type used to bail out and trigger a full-page navigation.\ntype MPANavigationTask = {\n  // MPA tasks are distinguised from SPA tasks by having a null `route`.\n  route: null\n  node: null\n  dynamicRequestTree: null\n  children: null\n}\n\nconst MPA_NAVIGATION_TASK: MPANavigationTask = {\n  route: null,\n  node: null,\n  dynamicRequestTree: null,\n  children: null,\n}\n\nexport type Task = SPANavigationTask | MPANavigationTask\n\n// Creates a new Cache Node tree (i.e. copy-on-write) that represents the\n// optimistic result of a navigation, using both the current Cache Node tree and\n// data that was prefetched prior to navigation.\n//\n// At the moment we call this function, we haven't yet received the navigation\n// response from the server. It could send back something completely different\n// from the tree that was prefetched — due to rewrites, default routes, parallel\n// routes, etc.\n//\n// But in most cases, it will return the same tree that we prefetched, just with\n// the dynamic holes filled in. So we optimistically assume this will happen,\n// and accept that the real result could be arbitrarily different.\n//\n// We'll reuse anything that was already in the previous tree, since that's what\n// the server does.\n//\n// New segments (ones that don't appear in the old tree) are assigned an\n// unresolved promise. The data for these promises will be fulfilled later, when\n// the navigation response is received.\n//\n// The tree can be rendered immediately after it is created (that's why this is\n// a synchronous function). Any new trees that do not have prefetch data will\n// suspend during rendering, until the dynamic data streams in.\n//\n// Returns a Task object, which contains both the updated Cache Node and a path\n// to the pending subtrees that need to be resolved by the navigation response.\n//\n// A return value of `null` means there were no changes, and the previous tree\n// can be reused without initiating a server request.\nexport function startPPRNavigation(\n  navigatedAt: number,\n  oldUrl: URL,\n  oldCacheNode: CacheNode,\n  oldRouterState: FlightRouterState,\n  newRouterState: FlightRouterState,\n  prefetchData: CacheNodeSeedData | null,\n  prefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  isSamePageNavigation: boolean,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): Task | null {\n  const segmentPath: Array<FlightSegmentPath> = []\n  return updateCacheNodeOnNavigation(\n    navigatedAt,\n    oldUrl,\n    oldCacheNode,\n    oldRouterState,\n    newRouterState,\n    false,\n    prefetchData,\n    prefetchHead,\n    isPrefetchHeadPartial,\n    isSamePageNavigation,\n    segmentPath,\n    scrollableSegmentsResult\n  )\n}\n\nfunction updateCacheNodeOnNavigation(\n  navigatedAt: number,\n  oldUrl: URL,\n  oldCacheNode: CacheNode,\n  oldRouterState: FlightRouterState,\n  newRouterState: FlightRouterState,\n  didFindRootLayout: boolean,\n  prefetchData: CacheNodeSeedData | null,\n  prefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  isSamePageNavigation: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): Task | null {\n  // Diff the old and new trees to reuse the shared layouts.\n  const oldRouterStateChildren = oldRouterState[1]\n  const newRouterStateChildren = newRouterState[1]\n  const prefetchDataChildren = prefetchData !== null ? prefetchData[1] : null\n\n  if (!didFindRootLayout) {\n    // We're currently traversing the part of the tree that was also part of\n    // the previous route. If we discover a root layout, then we don't need to\n    // trigger an MPA navigation. See beginRenderingNewRouteTree for context.\n    const isRootLayout = newRouterState[4] === true\n    if (isRootLayout) {\n      // Found a matching root layout.\n      didFindRootLayout = true\n    }\n  }\n\n  const oldParallelRoutes = oldCacheNode.parallelRoutes\n\n  // Clone the current set of segment children, even if they aren't active in\n  // the new tree.\n  // TODO: We currently retain all the inactive segments indefinitely, until\n  // there's an explicit refresh, or a parent layout is lazily refreshed. We\n  // rely on this for popstate navigations, which update the Router State Tree\n  // but do not eagerly perform a data fetch, because they expect the segment\n  // data to already be in the Cache Node tree. For highly static sites that\n  // are mostly read-only, this may happen only rarely, causing memory to\n  // leak. We should figure out a better model for the lifetime of inactive\n  // segments, so we can maintain instant back/forward navigations without\n  // leaking memory indefinitely.\n  const prefetchParallelRoutes = new Map(oldParallelRoutes)\n\n  // As we diff the trees, we may sometimes modify (copy-on-write, not mutate)\n  // the Route Tree that was returned by the server — for example, in the case\n  // of default parallel routes, we preserve the currently active segment. To\n  // avoid mutating the original tree, we clone the router state children along\n  // the return path.\n  let patchedRouterStateChildren: {\n    [parallelRouteKey: string]: FlightRouterState\n  } = {}\n  let taskChildren = null\n\n  // Most navigations require a request to fetch additional data from the\n  // server, either because the data was not already prefetched, or because the\n  // target route contains dynamic data that cannot be prefetched.\n  //\n  // However, if the target route is fully static, and it's already completely\n  // loaded into the segment cache, then we can skip the server request.\n  //\n  // This starts off as `false`, and is set to `true` if any of the child\n  // routes requires a dynamic request.\n  let needsDynamicRequest = false\n  // As we traverse the children, we'll construct a FlightRouterState that can\n  // be sent to the server to request the dynamic data. If it turns out that\n  // nothing in the subtree is dynamic (i.e. needsDynamicRequest is false at the\n  // end), then this will be discarded.\n  // TODO: We can probably optimize the format of this data structure to only\n  // include paths that are dynamic. Instead of reusing the\n  // FlightRouterState type.\n  let dynamicRequestTreeChildren: {\n    [parallelRouteKey: string]: FlightRouterState\n  } = {}\n\n  for (let parallelRouteKey in newRouterStateChildren) {\n    const newRouterStateChild: FlightRouterState =\n      newRouterStateChildren[parallelRouteKey]\n    const oldRouterStateChild: FlightRouterState | void =\n      oldRouterStateChildren[parallelRouteKey]\n    const oldSegmentMapChild = oldParallelRoutes.get(parallelRouteKey)\n    const prefetchDataChild: CacheNodeSeedData | void | null =\n      prefetchDataChildren !== null\n        ? prefetchDataChildren[parallelRouteKey]\n        : null\n\n    const newSegmentChild = newRouterStateChild[0]\n    const newSegmentPathChild = segmentPath.concat([\n      parallelRouteKey,\n      newSegmentChild,\n    ])\n    const newSegmentKeyChild = createRouterCacheKey(newSegmentChild)\n\n    const oldSegmentChild =\n      oldRouterStateChild !== undefined ? oldRouterStateChild[0] : undefined\n\n    const oldCacheNodeChild =\n      oldSegmentMapChild !== undefined\n        ? oldSegmentMapChild.get(newSegmentKeyChild)\n        : undefined\n\n    let taskChild: Task | null\n    if (newSegmentChild === DEFAULT_SEGMENT_KEY) {\n      // This is another kind of leaf segment — a default route.\n      //\n      // Default routes have special behavior. When there's no matching segment\n      // for a parallel route, Next.js preserves the currently active segment\n      // during a client navigation — but not for initial render. The server\n      // leaves it to the client to account for this. So we need to handle\n      // it here.\n      if (oldRouterStateChild !== undefined) {\n        // Reuse the existing Router State for this segment. We spawn a \"task\"\n        // just to keep track of the updated router state; unlike most, it's\n        // already fulfilled and won't be affected by the dynamic response.\n        taskChild = reuseActiveSegmentInDefaultSlot(oldUrl, oldRouterStateChild)\n      } else {\n        // There's no currently active segment. Switch to the \"create\" path.\n        taskChild = beginRenderingNewRouteTree(\n          navigatedAt,\n          oldRouterStateChild,\n          newRouterStateChild,\n          oldCacheNodeChild,\n          didFindRootLayout,\n          prefetchDataChild !== undefined ? prefetchDataChild : null,\n          prefetchHead,\n          isPrefetchHeadPartial,\n          newSegmentPathChild,\n          scrollableSegmentsResult\n        )\n      }\n    } else if (\n      isSamePageNavigation &&\n      // Check if this is a page segment.\n      // TODO: We're not consistent about how we do this check. Some places\n      // check if the segment starts with PAGE_SEGMENT_KEY, but most seem to\n      // check if there any any children, which is why I'm doing it here. We\n      // should probably encode an empty children set as `null` though. Either\n      // way, we should update all the checks to be consistent.\n      Object.keys(newRouterStateChild[1]).length === 0\n    ) {\n      // We special case navigations to the exact same URL as the current\n      // location. It's a common UI pattern for apps to refresh when you click a\n      // link to the current page. So when this happens, we refresh the dynamic\n      // data in the page segments.\n      //\n      // Note that this does not apply if the any part of the hash or search\n      // query has changed. This might feel a bit weird but it makes more sense\n      // when you consider that the way to trigger this behavior is to click\n      // the same link multiple times.\n      //\n      // TODO: We should probably refresh the *entire* route when this case\n      // occurs, not just the page segments. Essentially treating it the same as\n      // a refresh() triggered by an action, which is the more explicit way of\n      // modeling the UI pattern described above.\n      //\n      // Also note that this only refreshes the dynamic data, not static/\n      // cached data. If the page segment is fully static and prefetched, the\n      // request is skipped. (This is also how refresh() works.)\n      taskChild = beginRenderingNewRouteTree(\n        navigatedAt,\n        oldRouterStateChild,\n        newRouterStateChild,\n        oldCacheNodeChild,\n        didFindRootLayout,\n        prefetchDataChild !== undefined ? prefetchDataChild : null,\n        prefetchHead,\n        isPrefetchHeadPartial,\n        newSegmentPathChild,\n        scrollableSegmentsResult\n      )\n    } else if (\n      oldRouterStateChild !== undefined &&\n      oldSegmentChild !== undefined &&\n      matchSegment(newSegmentChild, oldSegmentChild)\n    ) {\n      if (\n        oldCacheNodeChild !== undefined &&\n        oldRouterStateChild !== undefined\n      ) {\n        // This segment exists in both the old and new trees. Recursively update\n        // the children.\n        taskChild = updateCacheNodeOnNavigation(\n          navigatedAt,\n          oldUrl,\n          oldCacheNodeChild,\n          oldRouterStateChild,\n          newRouterStateChild,\n          didFindRootLayout,\n          prefetchDataChild,\n          prefetchHead,\n          isPrefetchHeadPartial,\n          isSamePageNavigation,\n          newSegmentPathChild,\n          scrollableSegmentsResult\n        )\n      } else {\n        // There's no existing Cache Node for this segment. Switch to the\n        // \"create\" path.\n        taskChild = beginRenderingNewRouteTree(\n          navigatedAt,\n          oldRouterStateChild,\n          newRouterStateChild,\n          oldCacheNodeChild,\n          didFindRootLayout,\n          prefetchDataChild !== undefined ? prefetchDataChild : null,\n          prefetchHead,\n          isPrefetchHeadPartial,\n          newSegmentPathChild,\n          scrollableSegmentsResult\n        )\n      }\n    } else {\n      // This is a new tree. Switch to the \"create\" path.\n      taskChild = beginRenderingNewRouteTree(\n        navigatedAt,\n        oldRouterStateChild,\n        newRouterStateChild,\n        oldCacheNodeChild,\n        didFindRootLayout,\n        prefetchDataChild !== undefined ? prefetchDataChild : null,\n        prefetchHead,\n        isPrefetchHeadPartial,\n        newSegmentPathChild,\n        scrollableSegmentsResult\n      )\n    }\n\n    if (taskChild !== null) {\n      // Recursively propagate up the child tasks.\n\n      if (taskChild.route === null) {\n        // One of the child tasks discovered a change to the root layout.\n        // Immediately unwind from this recursive traversal.\n        return MPA_NAVIGATION_TASK\n      }\n\n      if (taskChildren === null) {\n        taskChildren = new Map()\n      }\n      taskChildren.set(parallelRouteKey, taskChild)\n      const newCacheNodeChild = taskChild.node\n      if (newCacheNodeChild !== null) {\n        const newSegmentMapChild: ChildSegmentMap = new Map(oldSegmentMapChild)\n        newSegmentMapChild.set(newSegmentKeyChild, newCacheNodeChild)\n        prefetchParallelRoutes.set(parallelRouteKey, newSegmentMapChild)\n      }\n\n      // The child tree's route state may be different from the prefetched\n      // route sent by the server. We need to clone it as we traverse back up\n      // the tree.\n      const taskChildRoute = taskChild.route\n      patchedRouterStateChildren[parallelRouteKey] = taskChildRoute\n\n      const dynamicRequestTreeChild = taskChild.dynamicRequestTree\n      if (dynamicRequestTreeChild !== null) {\n        // Something in the child tree is dynamic.\n        needsDynamicRequest = true\n        dynamicRequestTreeChildren[parallelRouteKey] = dynamicRequestTreeChild\n      } else {\n        dynamicRequestTreeChildren[parallelRouteKey] = taskChildRoute\n      }\n    } else {\n      // The child didn't change. We can use the prefetched router state.\n      patchedRouterStateChildren[parallelRouteKey] = newRouterStateChild\n      dynamicRequestTreeChildren[parallelRouteKey] = newRouterStateChild\n    }\n  }\n\n  if (taskChildren === null) {\n    // No new tasks were spawned.\n    return null\n  }\n\n  const newCacheNode: ReadyCacheNode = {\n    lazyData: null,\n    rsc: oldCacheNode.rsc,\n    // We intentionally aren't updating the prefetchRsc field, since this node\n    // is already part of the current tree, because it would be weird for\n    // prefetch data to be newer than the final data. It probably won't ever be\n    // observable anyway, but it could happen if the segment is unmounted then\n    // mounted again, because LayoutRouter will momentarily switch to rendering\n    // prefetchRsc, via useDeferredValue.\n    prefetchRsc: oldCacheNode.prefetchRsc,\n    head: oldCacheNode.head,\n    prefetchHead: oldCacheNode.prefetchHead,\n    loading: oldCacheNode.loading,\n\n    // Everything is cloned except for the children, which we computed above.\n    parallelRoutes: prefetchParallelRoutes,\n\n    navigatedAt,\n  }\n\n  return {\n    // Return a cloned copy of the router state with updated children.\n    route: patchRouterStateWithNewChildren(\n      newRouterState,\n      patchedRouterStateChildren\n    ),\n    node: newCacheNode,\n    dynamicRequestTree: needsDynamicRequest\n      ? patchRouterStateWithNewChildren(\n          newRouterState,\n          dynamicRequestTreeChildren\n        )\n      : null,\n    children: taskChildren,\n  }\n}\n\nfunction beginRenderingNewRouteTree(\n  navigatedAt: number,\n  oldRouterState: FlightRouterState | void,\n  newRouterState: FlightRouterState,\n  existingCacheNode: CacheNode | void,\n  didFindRootLayout: boolean,\n  prefetchData: CacheNodeSeedData | null,\n  possiblyPartialPrefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): Task {\n  if (!didFindRootLayout) {\n    // The route tree changed before we reached a layout. (The highest-level\n    // layout in a route tree is referred to as the \"root\" layout.) This could\n    // mean that we're navigating between two different root layouts. When this\n    // happens, we perform a full-page (MPA-style) navigation.\n    //\n    // However, the algorithm for deciding where to start rendering a route\n    // (i.e. the one performed in order to reach this function) is stricter\n    // than the one used to detect a change in the root layout. So just because\n    // we're re-rendering a segment outside of the root layout does not mean we\n    // should trigger a full-page navigation.\n    //\n    // Specifically, we handle dynamic parameters differently: two segments are\n    // considered the same even if their parameter values are different.\n    //\n    // Refer to isNavigatingToNewRootLayout for details.\n    //\n    // Note that we only have to perform this extra traversal if we didn't\n    // already discover a root layout in the part of the tree that is unchanged.\n    // In the common case, this branch is skipped completely.\n    if (\n      oldRouterState === undefined ||\n      isNavigatingToNewRootLayout(oldRouterState, newRouterState)\n    ) {\n      // The root layout changed. Perform a full-page navigation.\n      return MPA_NAVIGATION_TASK\n    }\n  }\n  return createCacheNodeOnNavigation(\n    navigatedAt,\n    newRouterState,\n    existingCacheNode,\n    prefetchData,\n    possiblyPartialPrefetchHead,\n    isPrefetchHeadPartial,\n    segmentPath,\n    scrollableSegmentsResult\n  )\n}\n\nfunction createCacheNodeOnNavigation(\n  navigatedAt: number,\n  routerState: FlightRouterState,\n  existingCacheNode: CacheNode | void,\n  prefetchData: CacheNodeSeedData | null,\n  possiblyPartialPrefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): SPANavigationTask {\n  // Same traversal as updateCacheNodeNavigation, but we switch to this path\n  // once we reach the part of the tree that was not in the previous route. We\n  // don't need to diff against the old tree, we just need to create a new one.\n\n  // The head is assigned to every leaf segment delivered by the server. Based\n  // on corresponding logic in fill-lazy-items-till-leaf-with-head.ts\n  const routerStateChildren = routerState[1]\n  const isLeafSegment = Object.keys(routerStateChildren).length === 0\n\n  // Even we're rendering inside the \"new\" part of the target tree, we may have\n  // a locally cached segment that we can reuse. This may come from either 1)\n  // the CacheNode tree, which lives in React state and is populated by previous\n  // navigations; or 2) the prefetch cache, which is a separate cache that is\n  // populated by prefetches.\n  let rsc: React.ReactNode\n  let loading: LoadingModuleData | Promise<LoadingModuleData>\n  let head: HeadData | null\n  let cacheNodeNavigatedAt: number\n  if (\n    existingCacheNode !== undefined &&\n    // DYNAMIC_STALETIME_MS defaults to 0, but it can be increased using\n    // the experimental.staleTimes.dynamic config. When set, we'll avoid\n    // refetching dynamic data if it was fetched within the given threshold.\n    existingCacheNode.navigatedAt + DYNAMIC_STALETIME_MS > navigatedAt\n  ) {\n    // We have an existing CacheNode for this segment, and it's not stale. We\n    // should reuse it rather than request a new one.\n    rsc = existingCacheNode.rsc\n    loading = existingCacheNode.loading\n    head = existingCacheNode.head\n\n    // Don't update the navigatedAt timestamp, since we're reusing stale data.\n    cacheNodeNavigatedAt = existingCacheNode.navigatedAt\n  } else if (prefetchData !== null) {\n    // There's no existing CacheNode for this segment, but we do have prefetch\n    // data. If the prefetch data is fully static (i.e. does not contain any\n    // dynamic holes), we don't need to request it from the server.\n    rsc = prefetchData[0]\n    loading = prefetchData[2]\n    head = isLeafSegment ? possiblyPartialPrefetchHead : null\n    // Even though we're accessing the data from the prefetch cache, this is\n    // conceptually a new segment, not a reused one. So we should update the\n    // navigatedAt timestamp.\n    cacheNodeNavigatedAt = navigatedAt\n    const isPrefetchRscPartial = prefetchData[3]\n    if (\n      // Check if the segment data is partial\n      isPrefetchRscPartial ||\n      // Check if the head is partial (only relevant if this is a leaf segment)\n      (isPrefetchHeadPartial && isLeafSegment)\n    ) {\n      // We only have partial data from this segment. Like missing segments, we\n      // must request the full data from the server.\n      return spawnPendingTask(\n        navigatedAt,\n        routerState,\n        prefetchData,\n        possiblyPartialPrefetchHead,\n        isPrefetchHeadPartial,\n        segmentPath,\n        scrollableSegmentsResult\n      )\n    } else {\n      // The prefetch data is fully static, so we can omit it from the\n      // navigation request.\n    }\n  } else {\n    // There's no prefetch for this segment. Everything from this point will be\n    // requested from the server, even if there are static children below it.\n    // Create a terminal task node that will later be fulfilled by\n    // server response.\n    return spawnPendingTask(\n      navigatedAt,\n      routerState,\n      null,\n      possiblyPartialPrefetchHead,\n      isPrefetchHeadPartial,\n      segmentPath,\n      scrollableSegmentsResult\n    )\n  }\n\n  // We already have a full segment we can render, so we don't need to request a\n  // new one from the server. Keep traversing down the tree until we reach\n  // something that requires a dynamic request.\n  const prefetchDataChildren = prefetchData !== null ? prefetchData[1] : null\n  const taskChildren = new Map()\n  const existingCacheNodeChildren =\n    existingCacheNode !== undefined ? existingCacheNode.parallelRoutes : null\n  const cacheNodeChildren = new Map(existingCacheNodeChildren)\n  let dynamicRequestTreeChildren: {\n    [parallelRouteKey: string]: FlightRouterState\n  } = {}\n  let needsDynamicRequest = false\n  if (isLeafSegment) {\n    // The segment path of every leaf segment (i.e. page) is collected into\n    // a result array. This is used by the LayoutRouter to scroll to ensure that\n    // new pages are visible after a navigation.\n    // TODO: We should use a string to represent the segment path instead of\n    // an array. We already use a string representation for the path when\n    // accessing the Segment Cache, so we can use the same one.\n    scrollableSegmentsResult.push(segmentPath)\n  } else {\n    for (let parallelRouteKey in routerStateChildren) {\n      const routerStateChild: FlightRouterState =\n        routerStateChildren[parallelRouteKey]\n      const prefetchDataChild: CacheNodeSeedData | void | null =\n        prefetchDataChildren !== null\n          ? prefetchDataChildren[parallelRouteKey]\n          : null\n      const existingSegmentMapChild =\n        existingCacheNodeChildren !== null\n          ? existingCacheNodeChildren.get(parallelRouteKey)\n          : undefined\n      const segmentChild = routerStateChild[0]\n      const segmentPathChild = segmentPath.concat([\n        parallelRouteKey,\n        segmentChild,\n      ])\n      const segmentKeyChild = createRouterCacheKey(segmentChild)\n\n      const existingCacheNodeChild =\n        existingSegmentMapChild !== undefined\n          ? existingSegmentMapChild.get(segmentKeyChild)\n          : undefined\n\n      const taskChild = createCacheNodeOnNavigation(\n        navigatedAt,\n        routerStateChild,\n        existingCacheNodeChild,\n        prefetchDataChild,\n        possiblyPartialPrefetchHead,\n        isPrefetchHeadPartial,\n        segmentPathChild,\n        scrollableSegmentsResult\n      )\n      taskChildren.set(parallelRouteKey, taskChild)\n      const dynamicRequestTreeChild = taskChild.dynamicRequestTree\n      if (dynamicRequestTreeChild !== null) {\n        // Something in the child tree is dynamic.\n        needsDynamicRequest = true\n        dynamicRequestTreeChildren[parallelRouteKey] = dynamicRequestTreeChild\n      } else {\n        dynamicRequestTreeChildren[parallelRouteKey] = routerStateChild\n      }\n      const newCacheNodeChild = taskChild.node\n      if (newCacheNodeChild !== null) {\n        const newSegmentMapChild: ChildSegmentMap = new Map()\n        newSegmentMapChild.set(segmentKeyChild, newCacheNodeChild)\n        cacheNodeChildren.set(parallelRouteKey, newSegmentMapChild)\n      }\n    }\n  }\n\n  return {\n    // Since we're inside a new route tree, unlike the\n    // `updateCacheNodeOnNavigation` path, the router state on the children\n    // tasks is always the same as the router state we pass in. So we don't need\n    // to clone/modify it.\n    route: routerState,\n    node: {\n      lazyData: null,\n      // Since this segment is already full, we don't need to use the\n      // `prefetchRsc` field.\n      rsc,\n      prefetchRsc: null,\n      head,\n      prefetchHead: null,\n      loading,\n      parallelRoutes: cacheNodeChildren,\n      navigatedAt: cacheNodeNavigatedAt,\n    },\n    dynamicRequestTree: needsDynamicRequest\n      ? patchRouterStateWithNewChildren(routerState, dynamicRequestTreeChildren)\n      : null,\n    children: taskChildren,\n  }\n}\n\nfunction patchRouterStateWithNewChildren(\n  baseRouterState: FlightRouterState,\n  newChildren: { [parallelRouteKey: string]: FlightRouterState }\n): FlightRouterState {\n  const clone: FlightRouterState = [baseRouterState[0], newChildren]\n  // Based on equivalent logic in apply-router-state-patch-to-tree, but should\n  // confirm whether we need to copy all of these fields. Not sure the server\n  // ever sends, e.g. the refetch marker.\n  if (2 in baseRouterState) {\n    clone[2] = baseRouterState[2]\n  }\n  if (3 in baseRouterState) {\n    clone[3] = baseRouterState[3]\n  }\n  if (4 in baseRouterState) {\n    clone[4] = baseRouterState[4]\n  }\n  return clone\n}\n\nfunction spawnPendingTask(\n  navigatedAt: number,\n  routerState: FlightRouterState,\n  prefetchData: CacheNodeSeedData | null,\n  prefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): SPANavigationTask {\n  // Create a task that will later be fulfilled by data from the server.\n\n  // Clone the prefetched route tree and the `refetch` marker to it. We'll send\n  // this to the server so it knows where to start rendering.\n  const dynamicRequestTree = patchRouterStateWithNewChildren(\n    routerState,\n    routerState[1]\n  )\n  dynamicRequestTree[3] = 'refetch'\n\n  const newTask: Task = {\n    route: routerState,\n\n    // Corresponds to the part of the route that will be rendered on the server.\n    node: createPendingCacheNode(\n      navigatedAt,\n      routerState,\n      prefetchData,\n      prefetchHead,\n      isPrefetchHeadPartial,\n      segmentPath,\n      scrollableSegmentsResult\n    ),\n    // Because this is non-null, and it gets propagated up through the parent\n    // tasks, the root task will know that it needs to perform a server request.\n    dynamicRequestTree,\n    children: null,\n  }\n  return newTask\n}\n\nfunction reuseActiveSegmentInDefaultSlot(\n  oldUrl: URL,\n  oldRouterState: FlightRouterState\n): Task {\n  // This is a \"default\" segment. These are never sent by the server during a\n  // soft navigation; instead, the client reuses whatever segment was already\n  // active in that slot on the previous route. This means if we later need to\n  // refresh the segment, it will have to be refetched from the previous route's\n  // URL. We store it in the Flight Router State.\n  //\n  // TODO: We also mark the segment with a \"refresh\" marker but I think we can\n  // get rid of that eventually by making sure we only add URLs to page segments\n  // that are reused. Then the presence of the URL alone is enough.\n  let reusedRouterState\n\n  const oldRefreshMarker = oldRouterState[3]\n  if (oldRefreshMarker === 'refresh') {\n    // This segment was already reused from an even older route. Keep its\n    // existing URL and refresh marker.\n    reusedRouterState = oldRouterState\n  } else {\n    // This segment was not previously reused, and it's not on the new route.\n    // So it must have been delivered in the old route.\n    reusedRouterState = patchRouterStateWithNewChildren(\n      oldRouterState,\n      oldRouterState[1]\n    )\n    reusedRouterState[2] = createHrefFromUrl(oldUrl)\n    reusedRouterState[3] = 'refresh'\n  }\n\n  return {\n    route: reusedRouterState,\n    node: null,\n    dynamicRequestTree: null,\n    children: null,\n  }\n}\n\n// Writes a dynamic server response into the tree created by\n// updateCacheNodeOnNavigation. All pending promises that were spawned by the\n// navigation will be resolved, either with dynamic data from the server, or\n// `null` to indicate that the data is missing.\n//\n// A `null` value will trigger a lazy fetch during render, which will then patch\n// up the tree using the same mechanism as the non-PPR implementation\n// (serverPatchReducer).\n//\n// Usually, the server will respond with exactly the subset of data that we're\n// waiting for — everything below the nearest shared layout. But technically,\n// the server can return anything it wants.\n//\n// This does _not_ create a new tree; it modifies the existing one in place.\n// Which means it must follow the Suspense rules of cache safety.\nexport function listenForDynamicRequest(\n  task: SPANavigationTask,\n  responsePromise: Promise<FetchServerResponseResult>\n) {\n  responsePromise.then(\n    (result: FetchServerResponseResult) => {\n      if (typeof result === 'string') {\n        // Happens when navigating to page in `pages` from `app`. We shouldn't\n        // get here because should have already handled this during\n        // the prefetch.\n        return\n      }\n      const { flightData, debugInfo } = result\n      for (const normalizedFlightData of flightData) {\n        const {\n          segmentPath,\n          tree: serverRouterState,\n          seedData: dynamicData,\n          head: dynamicHead,\n        } = normalizedFlightData\n\n        if (!dynamicData) {\n          // This shouldn't happen. PPR should always send back a response.\n          // However, `FlightDataPath` is a shared type and the pre-PPR handling of\n          // this might return null.\n          continue\n        }\n\n        writeDynamicDataIntoPendingTask(\n          task,\n          segmentPath,\n          serverRouterState,\n          dynamicData,\n          dynamicHead,\n          debugInfo\n        )\n      }\n\n      // Now that we've exhausted all the data we received from the server, if\n      // there are any remaining pending tasks in the tree, abort them now.\n      // If there's any missing data, it will trigger a lazy fetch.\n      abortTask(task, null, debugInfo)\n    },\n    (error: any) => {\n      // This will trigger an error during render\n      abortTask(task, error, null)\n    }\n  )\n}\n\nfunction writeDynamicDataIntoPendingTask(\n  rootTask: SPANavigationTask,\n  segmentPath: FlightSegmentPath,\n  serverRouterState: FlightRouterState,\n  dynamicData: CacheNodeSeedData,\n  dynamicHead: HeadData,\n  debugInfo: Array<any> | null\n) {\n  // The data sent by the server represents only a subtree of the app. We need\n  // to find the part of the task tree that matches the server response, and\n  // fulfill it using the dynamic data.\n  //\n  // segmentPath represents the parent path of subtree. It's a repeating pattern\n  // of parallel route key and segment:\n  //\n  //   [string, Segment, string, Segment, string, Segment, ...]\n  //\n  // Iterate through the path and finish any tasks that match this payload.\n  let task = rootTask\n  for (let i = 0; i < segmentPath.length; i += 2) {\n    const parallelRouteKey: string = segmentPath[i]\n    const segment: Segment = segmentPath[i + 1]\n    const taskChildren = task.children\n    if (taskChildren !== null) {\n      const taskChild = taskChildren.get(parallelRouteKey)\n      if (taskChild !== undefined) {\n        const taskSegment = taskChild.route[0]\n        if (matchSegment(segment, taskSegment)) {\n          // Found a match for this task. Keep traversing down the task tree.\n          task = taskChild\n          continue\n        }\n      }\n    }\n    // We didn't find a child task that matches the server data. Exit. We won't\n    // abort the task, though, because a different FlightDataPath may be able to\n    // fulfill it (see loop in listenForDynamicRequest). We only abort tasks\n    // once we've run out of data.\n    return\n  }\n\n  finishTaskUsingDynamicDataPayload(\n    task,\n    serverRouterState,\n    dynamicData,\n    dynamicHead,\n    debugInfo\n  )\n}\n\nfunction finishTaskUsingDynamicDataPayload(\n  task: SPANavigationTask,\n  serverRouterState: FlightRouterState,\n  dynamicData: CacheNodeSeedData,\n  dynamicHead: HeadData,\n  debugInfo: Array<any> | null\n) {\n  if (task.dynamicRequestTree === null) {\n    // Everything in this subtree is already complete. Bail out.\n    return\n  }\n\n  // dynamicData may represent a larger subtree than the task. Before we can\n  // finish the task, we need to line them up.\n  const taskChildren = task.children\n  const taskNode = task.node\n  if (taskChildren === null) {\n    // We've reached the leaf node of the pending task. The server data tree\n    // lines up the pending Cache Node tree. We can now switch to the\n    // normal algorithm.\n    if (taskNode !== null) {\n      finishPendingCacheNode(\n        taskNode,\n        task.route,\n        serverRouterState,\n        dynamicData,\n        dynamicHead,\n        debugInfo\n      )\n      // Set this to null to indicate that this task is now complete.\n      task.dynamicRequestTree = null\n    }\n    return\n  }\n  // The server returned more data than we need to finish the task. Skip over\n  // the extra segments until we reach the leaf task node.\n  const serverChildren = serverRouterState[1]\n  const dynamicDataChildren = dynamicData[1]\n\n  for (const parallelRouteKey in serverRouterState) {\n    const serverRouterStateChild: FlightRouterState =\n      serverChildren[parallelRouteKey]\n    const dynamicDataChild: CacheNodeSeedData | null | void =\n      dynamicDataChildren[parallelRouteKey]\n\n    const taskChild = taskChildren.get(parallelRouteKey)\n    if (taskChild !== undefined) {\n      const taskSegment = taskChild.route[0]\n      if (\n        matchSegment(serverRouterStateChild[0], taskSegment) &&\n        dynamicDataChild !== null &&\n        dynamicDataChild !== undefined\n      ) {\n        // Found a match for this task. Keep traversing down the task tree.\n        return finishTaskUsingDynamicDataPayload(\n          taskChild,\n          serverRouterStateChild,\n          dynamicDataChild,\n          dynamicHead,\n          debugInfo\n        )\n      }\n    }\n    // We didn't find a child task that matches the server data. We won't abort\n    // the task, though, because a different FlightDataPath may be able to\n    // fulfill it (see loop in listenForDynamicRequest). We only abort tasks\n    // once we've run out of data.\n  }\n}\n\nfunction createPendingCacheNode(\n  navigatedAt: number,\n  routerState: FlightRouterState,\n  prefetchData: CacheNodeSeedData | null,\n  prefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): ReadyCacheNode {\n  const routerStateChildren = routerState[1]\n  const prefetchDataChildren = prefetchData !== null ? prefetchData[1] : null\n\n  const parallelRoutes = new Map()\n  for (let parallelRouteKey in routerStateChildren) {\n    const routerStateChild: FlightRouterState =\n      routerStateChildren[parallelRouteKey]\n    const prefetchDataChild: CacheNodeSeedData | null | void =\n      prefetchDataChildren !== null\n        ? prefetchDataChildren[parallelRouteKey]\n        : null\n\n    const segmentChild = routerStateChild[0]\n    const segmentPathChild = segmentPath.concat([\n      parallelRouteKey,\n      segmentChild,\n    ])\n    const segmentKeyChild = createRouterCacheKey(segmentChild)\n\n    const newCacheNodeChild = createPendingCacheNode(\n      navigatedAt,\n      routerStateChild,\n      prefetchDataChild === undefined ? null : prefetchDataChild,\n      prefetchHead,\n      isPrefetchHeadPartial,\n      segmentPathChild,\n      scrollableSegmentsResult\n    )\n\n    const newSegmentMapChild: ChildSegmentMap = new Map()\n    newSegmentMapChild.set(segmentKeyChild, newCacheNodeChild)\n    parallelRoutes.set(parallelRouteKey, newSegmentMapChild)\n  }\n\n  // The head is assigned to every leaf segment delivered by the server. Based\n  // on corresponding logic in fill-lazy-items-till-leaf-with-head.ts\n  const isLeafSegment = parallelRoutes.size === 0\n\n  if (isLeafSegment) {\n    // The segment path of every leaf segment (i.e. page) is collected into\n    // a result array. This is used by the LayoutRouter to scroll to ensure that\n    // new pages are visible after a navigation.\n    // TODO: We should use a string to represent the segment path instead of\n    // an array. We already use a string representation for the path when\n    // accessing the Segment Cache, so we can use the same one.\n    scrollableSegmentsResult.push(segmentPath)\n  }\n\n  const maybePrefetchRsc = prefetchData !== null ? prefetchData[0] : null\n  return {\n    lazyData: null,\n    parallelRoutes: parallelRoutes,\n\n    prefetchRsc: maybePrefetchRsc !== undefined ? maybePrefetchRsc : null,\n    prefetchHead: isLeafSegment ? prefetchHead : [null, null],\n\n    // Create a deferred promise. This will be fulfilled once the dynamic\n    // response is received from the server.\n    rsc: createDeferredRsc() as React.ReactNode,\n    head: isLeafSegment ? (createDeferredRsc() as React.ReactNode) : null,\n\n    // TODO: Technically, a loading boundary could contain dynamic data. We must\n    // have separate `loading` and `prefetchLoading` fields to handle this, like\n    // we do for the segment data and head.\n    loading:\n      prefetchData !== null\n        ? (prefetchData[2] ?? null)\n        : // If we don't have a prefetch, then we don't know if there's a loading component.\n          // We'll fulfill it based on the dynamic response, just like `rsc` and `head`.\n          createDeferredRsc<LoadingModuleData>(),\n\n    navigatedAt,\n  }\n}\n\nfunction finishPendingCacheNode(\n  cacheNode: CacheNode,\n  taskState: FlightRouterState,\n  serverState: FlightRouterState,\n  dynamicData: CacheNodeSeedData,\n  dynamicHead: HeadData,\n  debugInfo: Array<any> | null\n): void {\n  // Writes a dynamic response into an existing Cache Node tree. This does _not_\n  // create a new tree, it updates the existing tree in-place. So it must follow\n  // the Suspense rules of cache safety — it can resolve pending promises, but\n  // it cannot overwrite existing data. It can add segments to the tree (because\n  // a missing segment will cause the layout router to suspend).\n  // but it cannot delete them.\n  //\n  // We must resolve every promise in the tree, or else it will suspend\n  // indefinitely. If we did not receive data for a segment, we will resolve its\n  // data promise to `null` to trigger a lazy fetch during render.\n  const taskStateChildren = taskState[1]\n  const serverStateChildren = serverState[1]\n  const dataChildren = dynamicData[1]\n\n  // The router state that we traverse the tree with (taskState) is the same one\n  // that we used to construct the pending Cache Node tree. That way we're sure\n  // to resolve all the pending promises.\n  const parallelRoutes = cacheNode.parallelRoutes\n  for (let parallelRouteKey in taskStateChildren) {\n    const taskStateChild: FlightRouterState =\n      taskStateChildren[parallelRouteKey]\n    const serverStateChild: FlightRouterState | void =\n      serverStateChildren[parallelRouteKey]\n    const dataChild: CacheNodeSeedData | null | void =\n      dataChildren[parallelRouteKey]\n\n    const segmentMapChild = parallelRoutes.get(parallelRouteKey)\n    const taskSegmentChild = taskStateChild[0]\n    const taskSegmentKeyChild = createRouterCacheKey(taskSegmentChild)\n\n    const cacheNodeChild =\n      segmentMapChild !== undefined\n        ? segmentMapChild.get(taskSegmentKeyChild)\n        : undefined\n\n    if (cacheNodeChild !== undefined) {\n      if (\n        serverStateChild !== undefined &&\n        matchSegment(taskSegmentChild, serverStateChild[0])\n      ) {\n        if (dataChild !== undefined && dataChild !== null) {\n          // This is the happy path. Recursively update all the children.\n          finishPendingCacheNode(\n            cacheNodeChild,\n            taskStateChild,\n            serverStateChild,\n            dataChild,\n            dynamicHead,\n            debugInfo\n          )\n        } else {\n          // The server never returned data for this segment. Trigger a lazy\n          // fetch during render. This shouldn't happen because the Route Tree\n          // and the Seed Data tree sent by the server should always be the same\n          // shape when part of the same server response.\n          abortPendingCacheNode(taskStateChild, cacheNodeChild, null, debugInfo)\n        }\n      } else {\n        // The server never returned data for this segment. Trigger a lazy\n        // fetch during render.\n        abortPendingCacheNode(taskStateChild, cacheNodeChild, null, debugInfo)\n      }\n    } else {\n      // The server response matches what was expected to receive, but there's\n      // no matching Cache Node in the task tree. This is a bug in the\n      // implementation because we should have created a node for every\n      // segment in the tree that's associated with this task.\n    }\n  }\n\n  // Use the dynamic data from the server to fulfill the deferred RSC promise\n  // on the Cache Node.\n  const rsc = cacheNode.rsc\n  const dynamicSegmentData = dynamicData[0]\n  if (rsc === null) {\n    // This is a lazy cache node. We can overwrite it. This is only safe\n    // because we know that the LayoutRouter suspends if `rsc` is `null`.\n    cacheNode.rsc = dynamicSegmentData\n  } else if (isDeferredRsc(rsc)) {\n    // This is a deferred RSC promise. We can fulfill it with the data we just\n    // received from the server. If it was already resolved by a different\n    // navigation, then this does nothing because we can't overwrite data.\n    rsc.resolve(dynamicSegmentData, debugInfo)\n  } else {\n    // This is not a deferred RSC promise, nor is it empty, so it must have\n    // been populated by a different navigation. We must not overwrite it.\n  }\n\n  // If we navigated without a prefetch, then `loading` will be a deferred promise too.\n  // Fulfill it using the dynamic response so that we can display the loading boundary.\n  const loading = cacheNode.loading\n  if (isDeferredRsc(loading)) {\n    const dynamicLoading = dynamicData[2]\n    loading.resolve(dynamicLoading, debugInfo)\n  }\n\n  // Check if this is a leaf segment. If so, it will have a `head` property with\n  // a pending promise that needs to be resolved with the dynamic head from\n  // the server.\n  const head = cacheNode.head\n  if (isDeferredRsc(head)) {\n    head.resolve(dynamicHead, debugInfo)\n  }\n}\n\nexport function abortTask(\n  task: SPANavigationTask,\n  error: any,\n  debugInfo: Array<any> | null\n): void {\n  const cacheNode = task.node\n  if (cacheNode === null) {\n    // This indicates the task is already complete.\n    return\n  }\n\n  const taskChildren = task.children\n  if (taskChildren === null) {\n    // Reached the leaf task node. This is the root of a pending cache\n    // node tree.\n    abortPendingCacheNode(task.route, cacheNode, error, debugInfo)\n  } else {\n    // This is an intermediate task node. Keep traversing until we reach a\n    // task node with no children. That will be the root of the cache node tree\n    // that needs to be resolved.\n    for (const taskChild of taskChildren.values()) {\n      abortTask(taskChild, error, debugInfo)\n    }\n  }\n\n  // Set this to null to indicate that this task is now complete.\n  task.dynamicRequestTree = null\n}\n\nfunction abortPendingCacheNode(\n  routerState: FlightRouterState,\n  cacheNode: CacheNode,\n  error: any,\n  debugInfo: Array<any> | null\n): void {\n  // For every pending segment in the tree, resolve its `rsc` promise to `null`\n  // to trigger a lazy fetch during render.\n  //\n  // Or, if an error object is provided, it will error instead.\n  const routerStateChildren = routerState[1]\n  const parallelRoutes = cacheNode.parallelRoutes\n  for (let parallelRouteKey in routerStateChildren) {\n    const routerStateChild: FlightRouterState =\n      routerStateChildren[parallelRouteKey]\n    const segmentMapChild = parallelRoutes.get(parallelRouteKey)\n    if (segmentMapChild === undefined) {\n      // This shouldn't happen because we're traversing the same tree that was\n      // used to construct the cache nodes in the first place.\n      continue\n    }\n    const segmentChild = routerStateChild[0]\n    const segmentKeyChild = createRouterCacheKey(segmentChild)\n    const cacheNodeChild = segmentMapChild.get(segmentKeyChild)\n    if (cacheNodeChild !== undefined) {\n      abortPendingCacheNode(routerStateChild, cacheNodeChild, error, debugInfo)\n    } else {\n      // This shouldn't happen because we're traversing the same tree that was\n      // used to construct the cache nodes in the first place.\n    }\n  }\n\n  const rsc = cacheNode.rsc\n  if (isDeferredRsc(rsc)) {\n    if (error === null) {\n      // This will trigger a lazy fetch during render.\n      rsc.resolve(null, debugInfo)\n    } else {\n      // This will trigger an error during rendering.\n      rsc.reject(error, debugInfo)\n    }\n  }\n\n  const loading = cacheNode.loading\n  if (isDeferredRsc(loading)) {\n    loading.resolve(null, debugInfo)\n  }\n\n  // Check if this is a leaf segment. If so, it will have a `head` property with\n  // a pending promise that needs to be resolved. If an error was provided, we\n  // will not resolve it with an error, since this is rendered at the root of\n  // the app. We want the segment to error, not the entire app.\n  const head = cacheNode.head\n  if (isDeferredRsc(head)) {\n    head.resolve(null, debugInfo)\n  }\n}\n\nexport function updateCacheNodeOnPopstateRestoration(\n  oldCacheNode: CacheNode,\n  routerState: FlightRouterState\n): ReadyCacheNode {\n  // A popstate navigation reads data from the local cache. It does not issue\n  // new network requests (unless the cache entries have been evicted). So, we\n  // update the cache to drop the prefetch data for any segment whose dynamic\n  // data was already received. This prevents an unnecessary flash back to PPR\n  // state during a back/forward navigation.\n  //\n  // This function clones the entire cache node tree and sets the `prefetchRsc`\n  // field to `null` to prevent it from being rendered. We can't mutate the node\n  // in place because this is a concurrent data structure.\n\n  const routerStateChildren = routerState[1]\n  const oldParallelRoutes = oldCacheNode.parallelRoutes\n  const newParallelRoutes = new Map(oldParallelRoutes)\n  for (let parallelRouteKey in routerStateChildren) {\n    const routerStateChild: FlightRouterState =\n      routerStateChildren[parallelRouteKey]\n    const segmentChild = routerStateChild[0]\n    const segmentKeyChild = createRouterCacheKey(segmentChild)\n    const oldSegmentMapChild = oldParallelRoutes.get(parallelRouteKey)\n    if (oldSegmentMapChild !== undefined) {\n      const oldCacheNodeChild = oldSegmentMapChild.get(segmentKeyChild)\n      if (oldCacheNodeChild !== undefined) {\n        const newCacheNodeChild = updateCacheNodeOnPopstateRestoration(\n          oldCacheNodeChild,\n          routerStateChild\n        )\n        const newSegmentMapChild = new Map(oldSegmentMapChild)\n        newSegmentMapChild.set(segmentKeyChild, newCacheNodeChild)\n        newParallelRoutes.set(parallelRouteKey, newSegmentMapChild)\n      }\n    }\n  }\n\n  // Only show prefetched data if the dynamic data is still pending.\n  //\n  // Tehnically, what we're actually checking is whether the dynamic network\n  // response was received. But since it's a streaming response, this does not\n  // mean that all the dynamic data has fully streamed in. It just means that\n  // _some_ of the dynamic data was received. But as a heuristic, we assume that\n  // the rest dynamic data will stream in quickly, so it's still better to skip\n  // the prefetch state.\n  const rsc = oldCacheNode.rsc\n  const shouldUsePrefetch = isDeferredRsc(rsc) && rsc.status === 'pending'\n\n  return {\n    lazyData: null,\n    rsc,\n    head: oldCacheNode.head,\n\n    prefetchHead: shouldUsePrefetch ? oldCacheNode.prefetchHead : [null, null],\n    prefetchRsc: shouldUsePrefetch ? oldCacheNode.prefetchRsc : null,\n    loading: oldCacheNode.loading,\n\n    // These are the cloned children we computed above\n    parallelRoutes: newParallelRoutes,\n\n    navigatedAt: oldCacheNode.navigatedAt,\n  }\n}\n\nconst DEFERRED = Symbol()\n\ntype PendingDeferredRsc<T> = Promise<T> & {\n  status: 'pending'\n  resolve: (value: T, debugInfo: Array<any> | null) => void\n  reject: (error: any, debugInfo: Array<any> | null) => void\n  tag: Symbol\n  _debugInfo: Array<any>\n}\n\ntype FulfilledDeferredRsc<T> = Promise<T> & {\n  status: 'fulfilled'\n  value: T\n  resolve: (value: T, debugInfo: Array<any> | null) => void\n  reject: (error: any, debugInfo: Array<any> | null) => void\n  tag: Symbol\n  _debugInfo: Array<any>\n}\n\ntype RejectedDeferredRsc<T> = Promise<T> & {\n  status: 'rejected'\n  reason: any\n  resolve: (value: T, debugInfo: Array<any> | null) => void\n  reject: (error: any, debugInfo: Array<any> | null) => void\n  tag: Symbol\n  _debugInfo: Array<any>\n}\n\ntype DeferredRsc<T extends React.ReactNode = React.ReactNode> =\n  | PendingDeferredRsc<T>\n  | FulfilledDeferredRsc<T>\n  | RejectedDeferredRsc<T>\n\n// This type exists to distinguish a DeferredRsc from a Flight promise. It's a\n// compromise to avoid adding an extra field on every Cache Node, which would be\n// awkward because the pre-PPR parts of codebase would need to account for it,\n// too. We can remove it once type Cache Node type is more settled.\nfunction isDeferredRsc(value: any): value is DeferredRsc {\n  return value && typeof value === 'object' && value.tag === DEFERRED\n}\n\nfunction createDeferredRsc<\n  T extends React.ReactNode = React.ReactNode,\n>(): PendingDeferredRsc<T> {\n  // Create an unresolved promise that represents data derived from a Flight\n  // response. The promise will be resolved later as soon as we start receiving\n  // data from the server, i.e. as soon as the Flight client decodes and returns\n  // the top-level response object.\n\n  // The `_debugInfo` field contains profiling information. Promises that are\n  // created by Flight already have this info added by React; for any derived\n  // promise created by the router, we need to transfer the Flight debug info\n  // onto the derived promise.\n  //\n  // The debug info represents the latency between the start of the navigation\n  // and the start of rendering. (It does not represent the time it takes for\n  // whole stream to finish.)\n  const debugInfo: Array<any> = []\n\n  let resolve: any\n  let reject: any\n  const pendingRsc = new Promise<T>((res, rej) => {\n    resolve = res\n    reject = rej\n  }) as PendingDeferredRsc<T>\n  pendingRsc.status = 'pending'\n  pendingRsc.resolve = (value: T, responseDebugInfo: Array<any> | null) => {\n    if (pendingRsc.status === 'pending') {\n      const fulfilledRsc: FulfilledDeferredRsc<T> = pendingRsc as any\n      fulfilledRsc.status = 'fulfilled'\n      fulfilledRsc.value = value\n      if (responseDebugInfo !== null) {\n        // Transfer the debug info to the derived promise.\n        debugInfo.push.apply(debugInfo, responseDebugInfo)\n      }\n      resolve(value)\n    }\n  }\n  pendingRsc.reject = (error: any, responseDebugInfo: Array<any> | null) => {\n    if (pendingRsc.status === 'pending') {\n      const rejectedRsc: RejectedDeferredRsc<T> = pendingRsc as any\n      rejectedRsc.status = 'rejected'\n      rejectedRsc.reason = error\n      if (responseDebugInfo !== null) {\n        // Transfer the debug info to the derived promise.\n        debugInfo.push.apply(debugInfo, responseDebugInfo)\n      }\n      reject(error)\n    }\n  }\n  pendingRsc.tag = DEFERRED\n  pendingRsc._debugInfo = debugInfo\n\n  return pendingRsc\n}\n","import type {\n  CacheNodeSeedData,\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../../shared/lib/app-router-types'\nimport type { CacheNode } from '../../../shared/lib/app-router-types'\nimport type {\n  HeadData,\n  LoadingModuleData,\n} from '../../../shared/lib/app-router-types'\nimport type { NormalizedFlightData } from '../../flight-data-helpers'\nimport { fetchServerResponse } from '../router-reducer/fetch-server-response'\nimport {\n  startPPRNavigation,\n  listenForDynamicRequest,\n  type Task as PPRNavigationTask,\n} from '../router-reducer/ppr-navigations'\nimport { createHrefFromUrl } from '../router-reducer/create-href-from-url'\nimport {\n  EntryStatus,\n  readRouteCacheEntry,\n  readSegmentCacheEntry,\n  waitForSegmentCacheEntry,\n  requestOptimisticRouteCacheEntry,\n  type RouteTree,\n  type FulfilledRouteCacheEntry,\n} from './cache'\nimport { createCacheKey } from './cache-key'\nimport { addSearchParamsIfPageSegment } from '../../../shared/lib/segment'\nimport { NavigationResultTag } from '../segment-cache'\n\ntype MPANavigationResult = {\n  tag: NavigationResultTag.MPA\n  data: string\n}\n\ntype NoOpNavigationResult = {\n  tag: NavigationResultTag.NoOp\n  data: {\n    canonicalUrl: string\n    shouldScroll: boolean\n  }\n}\n\ntype SuccessfulNavigationResult = {\n  tag: NavigationResultTag.Success\n  data: {\n    flightRouterState: FlightRouterState\n    cacheNode: CacheNode\n    canonicalUrl: string\n    renderedSearch: string\n    scrollableSegments: Array<FlightSegmentPath>\n    shouldScroll: boolean\n    hash: string\n  }\n}\n\ntype AsyncNavigationResult = {\n  tag: NavigationResultTag.Async\n  data: Promise<\n    MPANavigationResult | NoOpNavigationResult | SuccessfulNavigationResult\n  >\n}\n\nexport type NavigationResult =\n  | MPANavigationResult\n  | SuccessfulNavigationResult\n  | NoOpNavigationResult\n  | AsyncNavigationResult\n\n/**\n * Navigate to a new URL, using the Segment Cache to construct a response.\n *\n * To allow for synchronous navigations whenever possible, this is not an async\n * function. It returns a promise only if there's no matching prefetch in\n * the cache. Otherwise it returns an immediate result and uses Suspense/RSC to\n * stream in any missing data.\n */\nexport function navigate(\n  url: URL,\n  currentUrl: URL,\n  currentCacheNode: CacheNode,\n  currentFlightRouterState: FlightRouterState,\n  nextUrl: string | null,\n  shouldScroll: boolean,\n  accumulation: { collectedDebugInfo?: Array<unknown> }\n): NavigationResult {\n  const now = Date.now()\n  const href = url.href\n\n  // We special case navigations to the exact same URL as the current location.\n  // It's a common UI pattern for apps to refresh when you click a link to the\n  // current page. So when this happens, we refresh the dynamic data in the page\n  // segments.\n  //\n  // Note that this does not apply if the any part of the hash or search query\n  // has changed. This might feel a bit weird but it makes more sense when you\n  // consider that the way to trigger this behavior is to click the same link\n  // multiple times.\n  //\n  // TODO: We should probably refresh the *entire* route when this case occurs,\n  // not just the page segments. Essentially treating it the same as a refresh()\n  // triggered by an action, which is the more explicit way of modeling the UI\n  // pattern described above.\n  //\n  // Also note that this only refreshes the dynamic data, not static/ cached\n  // data. If the page segment is fully static and prefetched, the request is\n  // skipped. (This is also how refresh() works.)\n  const isSamePageNavigation =\n    // TODO: This is not the only place we read from the location, but we should\n    // consider storing the current URL in the router state instead of reading\n    // from the location object. In practice I don't think this matters much\n    // since we keep them in sync anyway, but having two sources of truth can\n    // lead to subtle bugs and race conditions.\n    href === window.location.href\n\n  const cacheKey = createCacheKey(href, nextUrl)\n  const route = readRouteCacheEntry(now, cacheKey)\n  if (route !== null && route.status === EntryStatus.Fulfilled) {\n    // We have a matching prefetch.\n    const snapshot = readRenderSnapshotFromCache(now, route, route.tree)\n    const prefetchFlightRouterState = snapshot.flightRouterState\n    const prefetchSeedData = snapshot.seedData\n    const prefetchHead = route.head\n    const isPrefetchHeadPartial = route.isHeadPartial\n    const newCanonicalUrl = route.canonicalUrl\n    const renderedSearch = route.renderedSearch\n    return navigateUsingPrefetchedRouteTree(\n      now,\n      url,\n      currentUrl,\n      nextUrl,\n      isSamePageNavigation,\n      currentCacheNode,\n      currentFlightRouterState,\n      prefetchFlightRouterState,\n      prefetchSeedData,\n      prefetchHead,\n      isPrefetchHeadPartial,\n      newCanonicalUrl,\n      renderedSearch,\n      shouldScroll,\n      url.hash\n    )\n  }\n\n  // There was no matching route tree in the cache. Let's see if we can\n  // construct an \"optimistic\" route tree.\n  //\n  // Do not construct an optimistic route tree if there was a cache hit, but\n  // the entry has a rejected status, since it may have been rejected due to a\n  // rewrite or redirect based on the search params.\n  //\n  // TODO: There are multiple reasons a prefetch might be rejected; we should\n  // track them explicitly and choose what to do here based on that.\n  if (route === null || route.status !== EntryStatus.Rejected) {\n    const optimisticRoute = requestOptimisticRouteCacheEntry(now, url, nextUrl)\n    if (optimisticRoute !== null) {\n      // We have an optimistic route tree. Proceed with the normal flow.\n      const snapshot = readRenderSnapshotFromCache(\n        now,\n        optimisticRoute,\n        optimisticRoute.tree\n      )\n      const prefetchFlightRouterState = snapshot.flightRouterState\n      const prefetchSeedData = snapshot.seedData\n      const prefetchHead = optimisticRoute.head\n      const isPrefetchHeadPartial = optimisticRoute.isHeadPartial\n      const newCanonicalUrl = optimisticRoute.canonicalUrl\n      const newRenderedSearch = optimisticRoute.renderedSearch\n      return navigateUsingPrefetchedRouteTree(\n        now,\n        url,\n        currentUrl,\n        nextUrl,\n        isSamePageNavigation,\n        currentCacheNode,\n        currentFlightRouterState,\n        prefetchFlightRouterState,\n        prefetchSeedData,\n        prefetchHead,\n        isPrefetchHeadPartial,\n        newCanonicalUrl,\n        newRenderedSearch,\n        shouldScroll,\n        url.hash\n      )\n    }\n  }\n\n  // There's no matching prefetch for this route in the cache.\n  let collectedDebugInfo = accumulation.collectedDebugInfo ?? []\n  if (accumulation.collectedDebugInfo === undefined) {\n    collectedDebugInfo = accumulation.collectedDebugInfo = []\n  }\n  return {\n    tag: NavigationResultTag.Async,\n    data: navigateDynamicallyWithNoPrefetch(\n      now,\n      url,\n      currentUrl,\n      nextUrl,\n      isSamePageNavigation,\n      currentCacheNode,\n      currentFlightRouterState,\n      shouldScroll,\n      url.hash,\n      collectedDebugInfo\n    ),\n  }\n}\n\nfunction navigateUsingPrefetchedRouteTree(\n  now: number,\n  url: URL,\n  currentUrl: URL,\n  nextUrl: string | null,\n  isSamePageNavigation: boolean,\n  currentCacheNode: CacheNode,\n  currentFlightRouterState: FlightRouterState,\n  prefetchFlightRouterState: FlightRouterState,\n  prefetchSeedData: CacheNodeSeedData | null,\n  prefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  canonicalUrl: string,\n  renderedSearch: string,\n  shouldScroll: boolean,\n  hash: string\n): SuccessfulNavigationResult | NoOpNavigationResult | MPANavigationResult {\n  // Recursively construct a prefetch tree by reading from the Segment Cache. To\n  // maintain compatibility, we output the same data structures as the old\n  // prefetching implementation: FlightRouterState and CacheNodeSeedData.\n  // TODO: Eventually updateCacheNodeOnNavigation (or the equivalent) should\n  // read from the Segment Cache directly. It's only structured this way for now\n  // so we can share code with the old prefetching implementation.\n  const scrollableSegments: Array<FlightSegmentPath> = []\n  const task = startPPRNavigation(\n    now,\n    currentUrl,\n    currentCacheNode,\n    currentFlightRouterState,\n    prefetchFlightRouterState,\n    prefetchSeedData,\n    prefetchHead,\n    isPrefetchHeadPartial,\n    isSamePageNavigation,\n    scrollableSegments\n  )\n  if (task !== null) {\n    const dynamicRequestTree = task.dynamicRequestTree\n    if (dynamicRequestTree !== null) {\n      const promiseForDynamicServerResponse = fetchServerResponse(\n        new URL(canonicalUrl, url.origin),\n        {\n          flightRouterState: dynamicRequestTree,\n          nextUrl,\n        }\n      )\n      listenForDynamicRequest(task, promiseForDynamicServerResponse)\n    } else {\n      // The prefetched tree does not contain dynamic holes — it's\n      // fully static. We can skip the dynamic request.\n    }\n    return navigationTaskToResult(\n      task,\n      currentCacheNode,\n      canonicalUrl,\n      renderedSearch,\n      scrollableSegments,\n      shouldScroll,\n      hash\n    )\n  }\n  // The server sent back an empty tree patch. There's nothing to update, except\n  // possibly the URL.\n  return {\n    tag: NavigationResultTag.NoOp,\n    data: {\n      canonicalUrl,\n      shouldScroll,\n    },\n  }\n}\n\nfunction navigationTaskToResult(\n  task: PPRNavigationTask,\n  currentCacheNode: CacheNode,\n  canonicalUrl: string,\n  renderedSearch: string,\n  scrollableSegments: Array<FlightSegmentPath>,\n  shouldScroll: boolean,\n  hash: string\n): SuccessfulNavigationResult | MPANavigationResult {\n  const flightRouterState = task.route\n  if (flightRouterState === null) {\n    // When no router state is provided, it signals that we should perform an\n    // MPA navigation.\n    return {\n      tag: NavigationResultTag.MPA,\n      data: canonicalUrl,\n    }\n  }\n  const newCacheNode = task.node\n  return {\n    tag: NavigationResultTag.Success,\n    data: {\n      flightRouterState,\n      cacheNode: newCacheNode !== null ? newCacheNode : currentCacheNode,\n      canonicalUrl,\n      renderedSearch,\n      scrollableSegments,\n      shouldScroll,\n      hash,\n    },\n  }\n}\n\nfunction readRenderSnapshotFromCache(\n  now: number,\n  route: FulfilledRouteCacheEntry,\n  tree: RouteTree\n): { flightRouterState: FlightRouterState; seedData: CacheNodeSeedData } {\n  let childRouterStates: { [parallelRouteKey: string]: FlightRouterState } = {}\n  let childSeedDatas: {\n    [parallelRouteKey: string]: CacheNodeSeedData | null\n  } = {}\n  const slots = tree.slots\n  if (slots !== null) {\n    for (const parallelRouteKey in slots) {\n      const childTree = slots[parallelRouteKey]\n      const childResult = readRenderSnapshotFromCache(now, route, childTree)\n      childRouterStates[parallelRouteKey] = childResult.flightRouterState\n      childSeedDatas[parallelRouteKey] = childResult.seedData\n    }\n  }\n\n  let rsc: React.ReactNode | null = null\n  let loading: LoadingModuleData | Promise<LoadingModuleData> = null\n  let isPartial: boolean = true\n\n  const segmentEntry = readSegmentCacheEntry(now, route, tree.cacheKey)\n  if (segmentEntry !== null) {\n    switch (segmentEntry.status) {\n      case EntryStatus.Fulfilled: {\n        // Happy path: a cache hit\n        rsc = segmentEntry.rsc\n        loading = segmentEntry.loading\n        isPartial = segmentEntry.isPartial\n        break\n      }\n      case EntryStatus.Pending: {\n        // We haven't received data for this segment yet, but there's already\n        // an in-progress request. Since it's extremely likely to arrive\n        // before the dynamic data response, we might as well use it.\n        const promiseForFulfilledEntry = waitForSegmentCacheEntry(segmentEntry)\n        rsc = promiseForFulfilledEntry.then((entry) =>\n          entry !== null ? entry.rsc : null\n        )\n        loading = promiseForFulfilledEntry.then((entry) =>\n          entry !== null ? entry.loading : null\n        )\n        // Since we don't know yet whether the segment is partial or fully\n        // static, we must assume it's partial; we can't skip the\n        // dynamic request.\n        isPartial = true\n        break\n      }\n      case EntryStatus.Empty:\n      case EntryStatus.Rejected:\n        break\n      default:\n        segmentEntry satisfies never\n    }\n  }\n\n  // The navigation implementation expects the search params to be\n  // included in the segment. However, the Segment Cache tracks search\n  // params separately from the rest of the segment key. So we need to\n  // add them back here.\n  //\n  // See corresponding comment in convertFlightRouterStateToTree.\n  //\n  // TODO: What we should do instead is update the navigation diffing\n  // logic to compare search params explicitly. This is a temporary\n  // solution until more of the Segment Cache implementation has settled.\n  const segment = addSearchParamsIfPageSegment(\n    tree.segment,\n    Object.fromEntries(new URLSearchParams(route.renderedSearch))\n  )\n\n  // We don't need this information in a render snapshot, so this can just be a placeholder.\n  const hasRuntimePrefetch = false\n\n  return {\n    flightRouterState: [\n      segment,\n      childRouterStates,\n      null,\n      null,\n      tree.isRootLayout,\n    ],\n    seedData: [rsc, childSeedDatas, loading, isPartial, hasRuntimePrefetch],\n  }\n}\n\nasync function navigateDynamicallyWithNoPrefetch(\n  now: number,\n  url: URL,\n  currentUrl: URL,\n  nextUrl: string | null,\n  isSamePageNavigation: boolean,\n  currentCacheNode: CacheNode,\n  currentFlightRouterState: FlightRouterState,\n  shouldScroll: boolean,\n  hash: string,\n  collectedDebugInfo: Array<unknown>\n): Promise<\n  MPANavigationResult | SuccessfulNavigationResult | NoOpNavigationResult\n> {\n  // Runs when a navigation happens but there's no cached prefetch we can use.\n  // Don't bother to wait for a prefetch response; go straight to a full\n  // navigation that contains both static and dynamic data in a single stream.\n  // (This is unlike the old navigation implementation, which instead blocks\n  // the dynamic request until a prefetch request is received.)\n  //\n  // To avoid duplication of logic, we're going to pretend that the tree\n  // returned by the dynamic request is, in fact, a prefetch tree. Then we can\n  // use the same server response to write the actual data into the CacheNode\n  // tree. So it's the same flow as the \"happy path\" (prefetch, then\n  // navigation), except we use a single server response for both stages.\n\n  const promiseForDynamicServerResponse = fetchServerResponse(url, {\n    flightRouterState: currentFlightRouterState,\n    nextUrl,\n  })\n  const result = await promiseForDynamicServerResponse\n  if (typeof result === 'string') {\n    // This is an MPA navigation.\n    const newUrl = result\n    return {\n      tag: NavigationResultTag.MPA,\n      data: newUrl,\n    }\n  }\n\n  const {\n    flightData,\n    canonicalUrl,\n    renderedSearch,\n    debugInfo: debugInfoFromResponse,\n  } = result\n  if (debugInfoFromResponse !== null) {\n    collectedDebugInfo.push(...debugInfoFromResponse)\n  }\n\n  // Since the response format of dynamic requests and prefetches is slightly\n  // different, we'll need to massage the data a bit. Create FlightRouterState\n  // tree that simulates what we'd receive as the result of a prefetch.\n  const prefetchFlightRouterState = simulatePrefetchTreeUsingDynamicTreePatch(\n    currentFlightRouterState,\n    flightData\n  )\n\n  // In our simulated prefetch payload, we pretend that there's no seed data\n  // nor a prefetch head.\n  const prefetchSeedData = null\n  const prefetchHead = null\n  const isPrefetchHeadPartial = true\n\n  // Now we proceed exactly as we would for normal navigation.\n  const scrollableSegments: Array<FlightSegmentPath> = []\n  const task = startPPRNavigation(\n    now,\n    currentUrl,\n    currentCacheNode,\n    currentFlightRouterState,\n    prefetchFlightRouterState,\n    prefetchSeedData,\n    prefetchHead,\n    isPrefetchHeadPartial,\n    isSamePageNavigation,\n    scrollableSegments\n  )\n  if (task !== null) {\n    // In this case, we've already sent the dynamic request, so we don't\n    // actually use the request tree created by `startPPRNavigation`,\n    // except to check if it contains dynamic holes.\n    //\n    // This is almost always true, but it could be false if all the segment data\n    // was present in the cache, but the route tree was not. E.g. navigating\n    // to a URL that was not prefetched but rewrites to a different URL\n    // that was.\n    const hasDynamicHoles = task.dynamicRequestTree !== null\n    if (hasDynamicHoles) {\n      listenForDynamicRequest(task, promiseForDynamicServerResponse)\n    } else {\n      // The prefetched tree does not contain dynamic holes — it's\n      // fully static. We don't need to process the server response further.\n    }\n    return navigationTaskToResult(\n      task,\n      currentCacheNode,\n      createHrefFromUrl(canonicalUrl),\n      renderedSearch,\n      scrollableSegments,\n      shouldScroll,\n      hash\n    )\n  }\n  // The server sent back an empty tree patch. There's nothing to update, except\n  // possibly the URL.\n  return {\n    tag: NavigationResultTag.NoOp,\n    data: {\n      canonicalUrl: createHrefFromUrl(canonicalUrl),\n      shouldScroll,\n    },\n  }\n}\n\nfunction simulatePrefetchTreeUsingDynamicTreePatch(\n  currentTree: FlightRouterState,\n  flightData: Array<NormalizedFlightData>\n): FlightRouterState {\n  // Takes the current FlightRouterState and applies the router state patch\n  // received from the server, to create a full FlightRouterState tree that we\n  // can pretend was returned by a prefetch.\n  //\n  // (It sounds similar to what applyRouterStatePatch does, but it doesn't need\n  // to handle stuff like interception routes or diffing since that will be\n  // handled later.)\n  let baseTree = currentTree\n  for (const { segmentPath, tree: treePatch } of flightData) {\n    // If the server sends us multiple tree patches, we only need to clone the\n    // base tree when applying the first patch. After the first patch, we can\n    // apply the remaining patches in place without copying.\n    const canMutateInPlace = baseTree !== currentTree\n    baseTree = simulatePrefetchTreeUsingDynamicTreePatchImpl(\n      baseTree,\n      treePatch,\n      segmentPath,\n      canMutateInPlace,\n      0\n    )\n  }\n\n  return baseTree\n}\n\nfunction simulatePrefetchTreeUsingDynamicTreePatchImpl(\n  baseRouterState: FlightRouterState,\n  patch: FlightRouterState,\n  segmentPath: FlightSegmentPath,\n  canMutateInPlace: boolean,\n  index: number\n) {\n  if (index === segmentPath.length) {\n    // We reached the part of the tree that we need to patch.\n    return patch\n  }\n\n  // segmentPath represents the parent path of subtree. It's a repeating\n  // pattern of parallel route key and segment:\n  //\n  //   [string, Segment, string, Segment, string, Segment, ...]\n  //\n  // This path tells us which part of the base tree to apply the tree patch.\n  //\n  // NOTE: In the case of a fully dynamic request with no prefetch, we receive\n  // the FlightRouterState patch in the same request as the dynamic data.\n  // Therefore we don't need to worry about diffing the segment values; we can\n  // assume the server sent us a correct result.\n  const updatedParallelRouteKey: string = segmentPath[index]\n  // const segment: Segment = segmentPath[index + 1] <-- Not used, see note above\n\n  const baseChildren = baseRouterState[1]\n  const newChildren: { [parallelRouteKey: string]: FlightRouterState } = {}\n  for (const parallelRouteKey in baseChildren) {\n    if (parallelRouteKey === updatedParallelRouteKey) {\n      const childBaseRouterState = baseChildren[parallelRouteKey]\n      newChildren[parallelRouteKey] =\n        simulatePrefetchTreeUsingDynamicTreePatchImpl(\n          childBaseRouterState,\n          patch,\n          segmentPath,\n          canMutateInPlace,\n          // Advance the index by two and keep cloning until we reach\n          // the end of the segment path.\n          index + 2\n        )\n    } else {\n      // This child is not being patched. Copy it over as-is.\n      newChildren[parallelRouteKey] = baseChildren[parallelRouteKey]\n    }\n  }\n\n  if (canMutateInPlace) {\n    // We can mutate the base tree in place, because the base tree is already\n    // a clone.\n    baseRouterState[1] = newChildren\n    return baseRouterState\n  }\n\n  // Clone all the fields except the children.\n  //\n  // Based on equivalent logic in apply-router-state-patch-to-tree, but should\n  // confirm whether we need to copy all of these fields. Not sure the server\n  // ever sends, e.g. the refetch marker.\n  const clone: FlightRouterState = [baseRouterState[0], newChildren]\n  if (2 in baseRouterState) {\n    clone[2] = baseRouterState[2]\n  }\n  if (3 in baseRouterState) {\n    clone[3] = baseRouterState[3]\n  }\n  if (4 in baseRouterState) {\n    clone[4] = baseRouterState[4]\n  }\n  return clone\n}\n","/**\n * Entry point to the Segment Cache implementation.\n *\n * All code related to the Segment Cache lives `segment-cache-impl` directory.\n * Callers access it through this indirection.\n *\n * This is to ensure the code is dead code eliminated from the bundle if the\n * flag is disabled.\n *\n * TODO: This is super tedious. Since experimental flags are an essential part\n * of our workflow, we should establish a better pattern for dead code\n * elimination. Ideally it would be done at the bundler level, like how React's\n * build process works. In the React repo, you don't even need to add any extra\n * configuration per experiment — if the code is not reachable, it gets stripped\n * from the build automatically by Rollup. Or, shorter term, we could stub out\n * experimental modules at build time by updating the build config, i.e. a more\n * automated version of what I'm doing manually in this file.\n */\n\nexport type { NavigationResult } from './segment-cache-impl/navigation'\nexport type { PrefetchTask } from './segment-cache-impl/scheduler'\nexport type { NormalizedSearch } from './segment-cache-impl/cache-key'\n\nconst notEnabled: any = () => {\n  throw new Error(\n    'Segment Cache experiment is not enabled. This is a bug in Next.js.'\n  )\n}\n\nexport const prefetch: typeof import('./segment-cache-impl/prefetch').prefetch =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/prefetch') as typeof import('./segment-cache-impl/prefetch')\n        ).prefetch(...args)\n      }\n    : notEnabled\n\nexport const navigate: typeof import('./segment-cache-impl/navigation').navigate =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/navigation') as typeof import('./segment-cache-impl/navigation')\n        ).navigate(...args)\n      }\n    : notEnabled\n\nexport const revalidateEntireCache: typeof import('./segment-cache-impl/cache').revalidateEntireCache =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/cache') as typeof import('./segment-cache-impl/cache')\n        ).revalidateEntireCache(...args)\n      }\n    : notEnabled\n\nexport const getCurrentCacheVersion: typeof import('./segment-cache-impl/cache').getCurrentCacheVersion =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/cache') as typeof import('./segment-cache-impl/cache')\n        ).getCurrentCacheVersion(...args)\n      }\n    : notEnabled\n\nexport const schedulePrefetchTask: typeof import('./segment-cache-impl/scheduler').schedulePrefetchTask =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/scheduler') as typeof import('./segment-cache-impl/scheduler')\n        ).schedulePrefetchTask(...args)\n      }\n    : notEnabled\n\nexport const cancelPrefetchTask: typeof import('./segment-cache-impl/scheduler').cancelPrefetchTask =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/scheduler') as typeof import('./segment-cache-impl/scheduler')\n        ).cancelPrefetchTask(...args)\n      }\n    : notEnabled\n\nexport const reschedulePrefetchTask: typeof import('./segment-cache-impl/scheduler').reschedulePrefetchTask =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/scheduler') as typeof import('./segment-cache-impl/scheduler')\n        ).reschedulePrefetchTask(...args)\n      }\n    : notEnabled\n\nexport const isPrefetchTaskDirty: typeof import('./segment-cache-impl/scheduler').isPrefetchTaskDirty =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/scheduler') as typeof import('./segment-cache-impl/scheduler')\n        ).isPrefetchTaskDirty(...args)\n      }\n    : notEnabled\n\nexport const createCacheKey: typeof import('./segment-cache-impl/cache-key').createCacheKey =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/cache-key') as typeof import('./segment-cache-impl/cache-key')\n        ).createCacheKey(...args)\n      }\n    : notEnabled\n\n/**\n * Below are public constants. They're small enough that we don't need to\n * DCE them.\n */\n\nexport const enum NavigationResultTag {\n  MPA,\n  Success,\n  NoOp,\n  Async,\n}\n\n/**\n * The priority of the prefetch task. Higher numbers are higher priority.\n */\nexport const enum PrefetchPriority {\n  /**\n   * Assigned to the most recently hovered/touched link. Special network\n   * bandwidth is reserved for this task only. There's only ever one Intent-\n   * priority task at a time; when a new Intent task is scheduled, the previous\n   * one is bumped down to Default.\n   */\n  Intent = 2,\n  /**\n   * The default priority for prefetch tasks.\n   */\n  Default = 1,\n  /**\n   * Assigned to tasks when they spawn non-blocking background work, like\n   * revalidating a partially cached entry to see if more data is available.\n   */\n  Background = 0,\n}\n\nexport const enum FetchStrategy {\n  // Deliberately ordered so we can easily compare two segments\n  // and determine if one segment is \"more specific\" than another\n  // (i.e. if it's likely that it contains more data)\n  LoadingBoundary = 0,\n  PPR = 1,\n  PPRRuntime = 2,\n  Full = 3,\n}\n\n/**\n * A subset of fetch strategies used for prefetch tasks.\n * A prefetch task can't know if it should use `PPR` or `LoadingBoundary`\n * until we complete the initial tree prefetch request, so we use `PPR` to signal both cases\n * and adjust it based on the route when actually fetching.\n * */\nexport type PrefetchTaskFetchStrategy =\n  | FetchStrategy.PPR\n  | FetchStrategy.PPRRuntime\n  | FetchStrategy.Full\n","import type { FlightRouterState } from '../../shared/lib/app-router-types'\nimport type { AppRouterInstance } from '../../shared/lib/app-router-context.shared-runtime'\nimport {\n  FetchStrategy,\n  isPrefetchTaskDirty,\n  type PrefetchTaskFetchStrategy,\n} from './segment-cache'\nimport { createCacheKey } from './segment-cache'\nimport {\n  type PrefetchTask,\n  PrefetchPriority,\n  schedulePrefetchTask as scheduleSegmentPrefetchTask,\n  cancelPrefetchTask,\n  reschedulePrefetchTask,\n} from './segment-cache'\nimport { startTransition } from 'react'\nimport { PrefetchKind } from './router-reducer/router-reducer-types'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\ntype LinkElement = HTMLAnchorElement | SVGAElement\n\ntype Element = LinkElement | HTMLFormElement\n\n// Properties that are shared between Link and Form instances. We use the same\n// shape for both to prevent a polymorphic de-opt in the VM.\ntype LinkOrFormInstanceShared = {\n  router: AppRouterInstance\n  fetchStrategy: PrefetchTaskFetchStrategy\n\n  isVisible: boolean\n\n  // The most recently initiated prefetch task. It may or may not have\n  // already completed. The same prefetch task object can be reused across\n  // multiple prefetches of the same link.\n  prefetchTask: PrefetchTask | null\n}\n\nexport type FormInstance = LinkOrFormInstanceShared & {\n  prefetchHref: string\n  setOptimisticLinkStatus: null\n}\n\ntype PrefetchableLinkInstance = LinkOrFormInstanceShared & {\n  prefetchHref: string\n  setOptimisticLinkStatus: (status: { pending: boolean }) => void\n}\n\ntype NonPrefetchableLinkInstance = LinkOrFormInstanceShared & {\n  prefetchHref: null\n  setOptimisticLinkStatus: (status: { pending: boolean }) => void\n}\n\ntype PrefetchableInstance = PrefetchableLinkInstance | FormInstance\n\nexport type LinkInstance =\n  | PrefetchableLinkInstance\n  | NonPrefetchableLinkInstance\n\n// Tracks the most recently navigated link instance. When null, indicates\n// the current navigation was not initiated by a link click.\nlet linkForMostRecentNavigation: LinkInstance | null = null\n\n// Status object indicating link is pending\nexport const PENDING_LINK_STATUS = { pending: true }\n\n// Status object indicating link is idle\nexport const IDLE_LINK_STATUS = { pending: false }\n\n// Updates the loading state when navigating between links\n// - Resets the previous link's loading state\n// - Sets the new link's loading state\n// - Updates tracking of current navigation\nexport function setLinkForCurrentNavigation(link: LinkInstance | null) {\n  startTransition(() => {\n    linkForMostRecentNavigation?.setOptimisticLinkStatus(IDLE_LINK_STATUS)\n    link?.setOptimisticLinkStatus(PENDING_LINK_STATUS)\n    linkForMostRecentNavigation = link\n  })\n}\n\n// Unmounts the current link instance from navigation tracking\nexport function unmountLinkForCurrentNavigation(link: LinkInstance) {\n  if (linkForMostRecentNavigation === link) {\n    linkForMostRecentNavigation = null\n  }\n}\n\n// Use a WeakMap to associate a Link instance with its DOM element. This is\n// used by the IntersectionObserver to track the link's visibility.\nconst prefetchable:\n  | WeakMap<Element, PrefetchableInstance>\n  | Map<Element, PrefetchableInstance> =\n  typeof WeakMap === 'function' ? new WeakMap() : new Map()\n\n// A Set of the currently visible links. We re-prefetch visible links after a\n// cache invalidation, or when the current URL changes. It's a separate data\n// structure from the WeakMap above because only the visible links need to\n// be enumerated.\nconst prefetchableAndVisible: Set<PrefetchableInstance> = new Set()\n\n// A single IntersectionObserver instance shared by all <Link> components.\nconst observer: IntersectionObserver | null =\n  typeof IntersectionObserver === 'function'\n    ? new IntersectionObserver(handleIntersect, {\n        rootMargin: '200px',\n      })\n    : null\n\nfunction observeVisibility(element: Element, instance: PrefetchableInstance) {\n  const existingInstance = prefetchable.get(element)\n  if (existingInstance !== undefined) {\n    // This shouldn't happen because each <Link> component should have its own\n    // anchor tag instance, but it's defensive coding to avoid a memory leak in\n    // case there's a logical error somewhere else.\n    unmountPrefetchableInstance(element)\n  }\n  // Only track prefetchable links that have a valid prefetch URL\n  prefetchable.set(element, instance)\n  if (observer !== null) {\n    observer.observe(element)\n  }\n}\n\nfunction coercePrefetchableUrl(href: string): URL | null {\n  if (typeof window !== 'undefined') {\n    const { createPrefetchURL } =\n      require('./app-router-utils') as typeof import('./app-router-utils')\n\n    try {\n      return createPrefetchURL(href)\n    } catch {\n      // createPrefetchURL sometimes throws an error if an invalid URL is\n      // provided, though I'm not sure if it's actually necessary.\n      // TODO: Consider removing the throw from the inner function, or change it\n      // to reportError. Or maybe the error isn't even necessary for automatic\n      // prefetches, just navigations.\n      const reportErrorFn =\n        typeof reportError === 'function' ? reportError : console.error\n      reportErrorFn(\n        `Cannot prefetch '${href}' because it cannot be converted to a URL.`\n      )\n      return null\n    }\n  } else {\n    return null\n  }\n}\n\nexport function mountLinkInstance(\n  element: LinkElement,\n  href: string,\n  router: AppRouterInstance,\n  fetchStrategy: PrefetchTaskFetchStrategy,\n  prefetchEnabled: boolean,\n  setOptimisticLinkStatus: (status: { pending: boolean }) => void\n): LinkInstance {\n  if (prefetchEnabled) {\n    const prefetchURL = coercePrefetchableUrl(href)\n    if (prefetchURL !== null) {\n      const instance: PrefetchableLinkInstance = {\n        router,\n        fetchStrategy,\n        isVisible: false,\n        prefetchTask: null,\n        prefetchHref: prefetchURL.href,\n        setOptimisticLinkStatus,\n      }\n      // We only observe the link's visibility if it's prefetchable. For\n      // example, this excludes links to external URLs.\n      observeVisibility(element, instance)\n      return instance\n    }\n  }\n  // If the link is not prefetchable, we still create an instance so we can\n  // track its optimistic state (i.e. useLinkStatus).\n  const instance: NonPrefetchableLinkInstance = {\n    router,\n    fetchStrategy,\n    isVisible: false,\n    prefetchTask: null,\n    prefetchHref: null,\n    setOptimisticLinkStatus,\n  }\n  return instance\n}\n\nexport function mountFormInstance(\n  element: HTMLFormElement,\n  href: string,\n  router: AppRouterInstance,\n  fetchStrategy: PrefetchTaskFetchStrategy\n): void {\n  const prefetchURL = coercePrefetchableUrl(href)\n  if (prefetchURL === null) {\n    // This href is not prefetchable, so we don't track it.\n    // TODO: We currently observe/unobserve a form every time its href changes.\n    // For Links, this isn't a big deal because the href doesn't usually change,\n    // but for forms it's extremely common. We should optimize this.\n    return\n  }\n  const instance: FormInstance = {\n    router,\n    fetchStrategy,\n    isVisible: false,\n    prefetchTask: null,\n    prefetchHref: prefetchURL.href,\n    setOptimisticLinkStatus: null,\n  }\n  observeVisibility(element, instance)\n}\n\nexport function unmountPrefetchableInstance(element: Element) {\n  const instance = prefetchable.get(element)\n  if (instance !== undefined) {\n    prefetchable.delete(element)\n    prefetchableAndVisible.delete(instance)\n    const prefetchTask = instance.prefetchTask\n    if (prefetchTask !== null) {\n      cancelPrefetchTask(prefetchTask)\n    }\n  }\n  if (observer !== null) {\n    observer.unobserve(element)\n  }\n}\n\nfunction handleIntersect(entries: Array<IntersectionObserverEntry>) {\n  for (const entry of entries) {\n    // Some extremely old browsers or polyfills don't reliably support\n    // isIntersecting so we check intersectionRatio instead. (Do we care? Not\n    // really. But whatever this is fine.)\n    const isVisible = entry.intersectionRatio > 0\n    onLinkVisibilityChanged(entry.target as HTMLAnchorElement, isVisible)\n  }\n}\n\nexport function onLinkVisibilityChanged(element: Element, isVisible: boolean) {\n  if (process.env.NODE_ENV !== 'production') {\n    // Prefetching on viewport is disabled in development for performance\n    // reasons, because it requires compiling the target page.\n    // TODO: Investigate re-enabling this.\n    return\n  }\n\n  const instance = prefetchable.get(element)\n  if (instance === undefined) {\n    return\n  }\n\n  instance.isVisible = isVisible\n  if (isVisible) {\n    prefetchableAndVisible.add(instance)\n  } else {\n    prefetchableAndVisible.delete(instance)\n  }\n  rescheduleLinkPrefetch(instance, PrefetchPriority.Default)\n}\n\nexport function onNavigationIntent(\n  element: HTMLAnchorElement | SVGAElement,\n  unstable_upgradeToDynamicPrefetch: boolean\n) {\n  const instance = prefetchable.get(element)\n  if (instance === undefined) {\n    return\n  }\n  // Prefetch the link on hover/touchstart.\n  if (instance !== undefined) {\n    if (\n      process.env.__NEXT_DYNAMIC_ON_HOVER &&\n      unstable_upgradeToDynamicPrefetch\n    ) {\n      // Switch to a full prefetch\n      instance.fetchStrategy = FetchStrategy.Full\n    }\n    rescheduleLinkPrefetch(instance, PrefetchPriority.Intent)\n  }\n}\n\nfunction rescheduleLinkPrefetch(\n  instance: PrefetchableInstance,\n  priority: PrefetchPriority.Default | PrefetchPriority.Intent\n) {\n  // Ensures that app-router-instance is not compiled in the server bundle\n  if (typeof window !== 'undefined') {\n    const existingPrefetchTask = instance.prefetchTask\n\n    if (!instance.isVisible) {\n      // Cancel any in-progress prefetch task. (If it already finished then this\n      // is a no-op.)\n      if (existingPrefetchTask !== null) {\n        cancelPrefetchTask(existingPrefetchTask)\n      }\n      // We don't need to reset the prefetchTask to null upon cancellation; an\n      // old task object can be rescheduled with reschedulePrefetchTask. This is a\n      // micro-optimization but also makes the code simpler (don't need to\n      // worry about whether an old task object is stale).\n      return\n    }\n\n    if (!process.env.__NEXT_CLIENT_SEGMENT_CACHE) {\n      // The old prefetch implementation does not have different priority levels.\n      // Just schedule a new prefetch task.\n      prefetchWithOldCacheImplementation(instance)\n      return\n    }\n\n    const { getCurrentAppRouterState } =\n      require('./app-router-instance') as typeof import('./app-router-instance')\n\n    const appRouterState = getCurrentAppRouterState()\n    if (appRouterState !== null) {\n      const treeAtTimeOfPrefetch = appRouterState.tree\n      if (existingPrefetchTask === null) {\n        // Initiate a prefetch task.\n        const nextUrl = appRouterState.nextUrl\n        const cacheKey = createCacheKey(instance.prefetchHref, nextUrl)\n        instance.prefetchTask = scheduleSegmentPrefetchTask(\n          cacheKey,\n          treeAtTimeOfPrefetch,\n          instance.fetchStrategy,\n          priority,\n          null\n        )\n      } else {\n        // We already have an old task object that we can reschedule. This is\n        // effectively the same as canceling the old task and creating a new one.\n        reschedulePrefetchTask(\n          existingPrefetchTask,\n          treeAtTimeOfPrefetch,\n          instance.fetchStrategy,\n          priority\n        )\n      }\n    }\n  }\n}\n\nexport function pingVisibleLinks(\n  nextUrl: string | null,\n  tree: FlightRouterState\n) {\n  // For each currently visible link, cancel the existing prefetch task (if it\n  // exists) and schedule a new one. This is effectively the same as if all the\n  // visible links left and then re-entered the viewport.\n  //\n  // This is called when the Next-Url or the base tree changes, since those\n  // may affect the result of a prefetch task. It's also called after a\n  // cache invalidation.\n  for (const instance of prefetchableAndVisible) {\n    const task = instance.prefetchTask\n    if (task !== null && !isPrefetchTaskDirty(task, nextUrl, tree)) {\n      // The cache has not been invalidated, and none of the inputs have\n      // changed. Bail out.\n      continue\n    }\n    // Something changed. Cancel the existing prefetch task and schedule a\n    // new one.\n    if (task !== null) {\n      cancelPrefetchTask(task)\n    }\n    const cacheKey = createCacheKey(instance.prefetchHref, nextUrl)\n    instance.prefetchTask = scheduleSegmentPrefetchTask(\n      cacheKey,\n      tree,\n      instance.fetchStrategy,\n      PrefetchPriority.Default,\n      null\n    )\n  }\n}\n\nfunction prefetchWithOldCacheImplementation(instance: PrefetchableInstance) {\n  // This is the path used when the Segment Cache is not enabled.\n  if (typeof window === 'undefined') {\n    return\n  }\n\n  const doPrefetch = async () => {\n    // note that `appRouter.prefetch()` is currently sync,\n    // so we have to wrap this call in an async function to be able to catch() errors below.\n\n    let prefetchKind: PrefetchKind\n    switch (instance.fetchStrategy) {\n      case FetchStrategy.PPR: {\n        prefetchKind = PrefetchKind.AUTO\n        break\n      }\n      case FetchStrategy.Full: {\n        prefetchKind = PrefetchKind.FULL\n        break\n      }\n      case FetchStrategy.PPRRuntime: {\n        // We can only get here if Client Segment Cache is off, and in that case\n        // it shouldn't be possible for a link to request a runtime prefetch.\n        throw new InvariantError(\n          'FetchStrategy.PPRRuntime should never be used when `experimental.clientSegmentCache` is disabled'\n        )\n      }\n      default: {\n        instance.fetchStrategy satisfies never\n        // Unreachable, but otherwise typescript will consider the variable unassigned\n        prefetchKind = undefined!\n      }\n    }\n\n    return instance.router.prefetch(instance.prefetchHref, {\n      kind: prefetchKind,\n    })\n  }\n\n  // Prefetch the page if asked (only in the client)\n  // We need to handle a prefetch error here since we may be\n  // loading with priority which can reject but we don't\n  // want to force navigation since this is only a prefetch\n  doPrefetch().catch((err) => {\n    if (process.env.NODE_ENV !== 'production') {\n      // rethrow to show invalid URL errors\n      throw err\n    }\n  })\n}\n","import { parsePath } from './parse-path'\n\n/**\n * Checks if a given path starts with a given prefix. It ensures it matches\n * exactly without containing extra chars. e.g. prefix /docs should replace\n * for /docs, /docs/, /docs/a but not /docsss\n * @param path The path to check.\n * @param prefix The prefix to check against.\n */\nexport function pathHasPrefix(path: string, prefix: string) {\n  if (typeof path !== 'string') {\n    return false\n  }\n\n  const { pathname } = parsePath(path)\n  return pathname === prefix || pathname.startsWith(prefix + '/')\n}\n","import { pathHasPrefix } from '../shared/lib/router/utils/path-has-prefix'\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nexport function hasBasePath(path: string): boolean {\n  return pathHasPrefix(path, basePath)\n}\n","import { isAbsoluteUrl, getLocationOrigin } from '../../utils'\nimport { hasBasePath } from '../../../../client/has-base-path'\n\n/**\n * Detects whether a given url is routable by the Next.js router (browser only).\n */\nexport function isLocalURL(url: string): boolean {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (!isAbsoluteUrl(url)) return true\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = getLocationOrigin()\n    const resolved = new URL(url, locationOrigin)\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname)\n  } catch (_) {\n    return false\n  }\n}\n","let errorOnce = (_: string) => {}\nif (process.env.NODE_ENV !== 'production') {\n  const errors = new Set<string>()\n  errorOnce = (msg: string) => {\n    if (!errors.has(msg)) {\n      console.error(msg)\n    }\n    errors.add(msg)\n  }\n}\n\nexport { errorOnce }\n","'use client'\n\nimport React, { createContext, useContext, useOptimistic, useRef } from 'react'\nimport type { UrlObject } from 'url'\nimport { formatUrl } from '../../shared/lib/router/utils/format-url'\nimport { AppRouterContext } from '../../shared/lib/app-router-context.shared-runtime'\nimport { useMergedRef } from '../use-merged-ref'\nimport { isAbsoluteUrl } from '../../shared/lib/utils'\nimport { addBasePath } from '../add-base-path'\nimport { warnOnce } from '../../shared/lib/utils/warn-once'\nimport type { PENDING_LINK_STATUS } from '../components/links'\nimport {\n  IDLE_LINK_STATUS,\n  mountLinkInstance,\n  onNavigationIntent,\n  unmountLinkForCurrentNavigation,\n  unmountPrefetchableInstance,\n  type LinkInstance,\n} from '../components/links'\nimport { isLocalURL } from '../../shared/lib/router/utils/is-local-url'\nimport {\n  FetchStrategy,\n  type PrefetchTaskFetchStrategy,\n} from '../components/segment-cache'\nimport { errorOnce } from '../../shared/lib/utils/error-once'\n\ntype Url = string | UrlObject\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T]\ntype OptionalKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? K : never\n}[keyof T]\n\ntype OnNavigateEventHandler = (event: { preventDefault: () => void }) => void\n\ntype InternalLinkProps = {\n  /**\n   * **Required**. The path or URL to navigate to. It can also be an object (similar to `URL`).\n   *\n   * @example\n   * ```tsx\n   * // Navigate to /dashboard:\n   * <Link href=\"/dashboard\">Dashboard</Link>\n   *\n   * // Navigate to /about?name=test:\n   * <Link href={{ pathname: '/about', query: { name: 'test' } }}>\n   *   About\n   * </Link>\n   * ```\n   *\n   * @remarks\n   * - For external URLs, use a fully qualified URL such as `https://...`.\n   * - In the App Router, dynamic routes must not include bracketed segments in `href`.\n   */\n  href: Url\n\n  /**\n   * @deprecated v10.0.0: `href` props pointing to a dynamic route are\n   * automatically resolved and no longer require the `as` prop.\n   */\n  as?: Url\n\n  /**\n   * Replace the current `history` state instead of adding a new URL into the stack.\n   *\n   * @defaultValue `false`\n   *\n   * @example\n   * ```tsx\n   * <Link href=\"/about\" replace>\n   *   About (replaces the history state)\n   * </Link>\n   * ```\n   */\n  replace?: boolean\n\n  /**\n   * Whether to override the default scroll behavior. If `true`, Next.js attempts to maintain\n   * the scroll position if the newly navigated page is still visible. If not, it scrolls to the top.\n   *\n   * If `false`, Next.js will not modify the scroll behavior at all.\n   *\n   * @defaultValue `true`\n   *\n   * @example\n   * ```tsx\n   * <Link href=\"/dashboard\" scroll={false}>\n   *   No auto scroll\n   * </Link>\n   * ```\n   */\n  scroll?: boolean\n\n  /**\n   * Update the path of the current page without rerunning data fetching methods\n   * like `getStaticProps`, `getServerSideProps`, or `getInitialProps`.\n   *\n   * @remarks\n   * `shallow` only applies to the Pages Router. For the App Router, see the\n   * [following documentation](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#using-the-native-history-api).\n   *\n   * @defaultValue `false`\n   *\n   * @example\n   * ```tsx\n   * <Link href=\"/blog\" shallow>\n   *   Shallow navigation\n   * </Link>\n   * ```\n   */\n  shallow?: boolean\n\n  /**\n   * Forces `Link` to pass its `href` to the child component. Useful if the child is a custom\n   * component that wraps an `<a>` tag, or if you're using certain styling libraries.\n   *\n   * @defaultValue `false`\n   *\n   * @example\n   * ```tsx\n   * <Link href=\"/dashboard\" passHref legacyBehavior>\n   *   <MyStyledAnchor>Dashboard</MyStyledAnchor>\n   * </Link>\n   * ```\n   */\n  passHref?: boolean\n\n  /**\n   * Prefetch the page in the background.\n   * Any `<Link />` that is in the viewport (initially or through scroll) will be prefetched.\n   * Prefetch can be disabled by passing `prefetch={false}`.\n   *\n   * @remarks\n   * Prefetching is only enabled in production.\n   *\n   * - In the **App Router**:\n   *   - `\"auto\"`, `null`, `undefined` (default): Prefetch behavior depends on static vs dynamic routes:\n   *     - Static routes: fully prefetched\n   *     - Dynamic routes: partial prefetch to the nearest segment with a `loading.js`\n   *   - `true`: Always prefetch the full route and data.\n   *   - `false`: Disable prefetching on both viewport and hover.\n   * - In the **Pages Router**:\n   *   - `true` (default): Prefetches the route and data in the background on viewport or hover.\n   *   - `false`: Prefetch only on hover, not on viewport.\n   *\n   * @defaultValue `true` (Pages Router) or `null` (App Router)\n   *\n   * @example\n   * ```tsx\n   * <Link href=\"/dashboard\" prefetch={false}>\n   *   Dashboard\n   * </Link>\n   * ```\n   */\n  prefetch?: boolean | 'auto' | null | 'unstable_forceStale'\n\n  /**\n   * (unstable) Switch to a full prefetch on hover. Effectively the same as\n   * updating the prefetch prop to `true` in a mouse event.\n   */\n  unstable_dynamicOnHover?: boolean\n\n  /**\n   * The active locale is automatically prepended in the Pages Router. `locale` allows for providing\n   * a different locale, or can be set to `false` to opt out of automatic locale behavior.\n   *\n   * @remarks\n   * Note: locale only applies in the Pages Router and is ignored in the App Router.\n   *\n   * @example\n   * ```tsx\n   * // Use the 'fr' locale:\n   * <Link href=\"/about\" locale=\"fr\">\n   *   About (French)\n   * </Link>\n   *\n   * // Disable locale prefix:\n   * <Link href=\"/about\" locale={false}>\n   *   About (no locale prefix)\n   * </Link>\n   * ```\n   */\n  locale?: string | false\n\n  /**\n   * Enable legacy link behavior.\n   *\n   * @deprecated This will be removed in a future version\n   * @defaultValue `false`\n   * @see https://github.com/vercel/next.js/commit/489e65ed98544e69b0afd7e0cfc3f9f6c2b803b7\n   */\n  legacyBehavior?: boolean\n\n  /**\n   * Optional event handler for when the mouse pointer is moved onto the `<Link>`.\n   */\n  onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement>\n\n  /**\n   * Optional event handler for when the `<Link>` is touched.\n   */\n  onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>\n\n  /**\n   * Optional event handler for when the `<Link>` is clicked.\n   */\n  onClick?: React.MouseEventHandler<HTMLAnchorElement>\n\n  /**\n   * Optional event handler for when the `<Link>` is navigated.\n   */\n  onNavigate?: OnNavigateEventHandler\n}\n\n// TODO-APP: Include the full set of Anchor props\n// adding this to the publicly exported type currently breaks existing apps\n\n// `RouteInferType` is a stub here to avoid breaking `typedRoutes` when the type\n// isn't generated yet. It will be replaced when type generation runs.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type LinkProps<RouteInferType = any> = InternalLinkProps\ntype LinkPropsRequired = RequiredKeys<LinkProps>\ntype LinkPropsOptional = OptionalKeys<Omit<InternalLinkProps, 'locale'>>\n\nfunction isModifiedEvent(event: React.MouseEvent): boolean {\n  const eventTarget = event.currentTarget as HTMLAnchorElement | SVGAElement\n  const target = eventTarget.getAttribute('target')\n  return (\n    (target && target !== '_self') ||\n    event.metaKey ||\n    event.ctrlKey ||\n    event.shiftKey ||\n    event.altKey || // triggers resource download\n    (event.nativeEvent && event.nativeEvent.which === 2)\n  )\n}\n\nfunction linkClicked(\n  e: React.MouseEvent,\n  href: string,\n  as: string,\n  linkInstanceRef: React.RefObject<LinkInstance | null>,\n  replace?: boolean,\n  scroll?: boolean,\n  onNavigate?: OnNavigateEventHandler\n): void {\n  if (typeof window !== 'undefined') {\n    const { nodeName } = e.currentTarget\n\n    // anchors inside an svg have a lowercase nodeName\n    const isAnchorNodeName = nodeName.toUpperCase() === 'A'\n    if (\n      (isAnchorNodeName && isModifiedEvent(e)) ||\n      e.currentTarget.hasAttribute('download')\n    ) {\n      // ignore click for browser’s default behavior\n      return\n    }\n\n    if (!isLocalURL(href)) {\n      if (replace) {\n        // browser default behavior does not replace the history state\n        // so we need to do it manually\n        e.preventDefault()\n        location.replace(href)\n      }\n\n      // ignore click for browser’s default behavior\n      return\n    }\n\n    e.preventDefault()\n\n    if (onNavigate) {\n      let isDefaultPrevented = false\n\n      onNavigate({\n        preventDefault: () => {\n          isDefaultPrevented = true\n        },\n      })\n\n      if (isDefaultPrevented) {\n        return\n      }\n    }\n\n    const { dispatchNavigateAction } =\n      require('../components/app-router-instance') as typeof import('../components/app-router-instance')\n\n    React.startTransition(() => {\n      dispatchNavigateAction(\n        as || href,\n        replace ? 'replace' : 'push',\n        scroll ?? true,\n        linkInstanceRef.current\n      )\n    })\n  }\n}\n\nfunction formatStringOrUrl(urlObjOrString: UrlObject | string): string {\n  if (typeof urlObjOrString === 'string') {\n    return urlObjOrString\n  }\n\n  return formatUrl(urlObjOrString)\n}\n\n/**\n * A React component that extends the HTML `<a>` element to provide\n * [prefetching](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching)\n * and client-side navigation. This is the primary way to navigate between routes in Next.js.\n *\n * @remarks\n * - Prefetching is only enabled in production.\n *\n * @see https://nextjs.org/docs/app/api-reference/components/link\n */\nexport default function LinkComponent(\n  props: LinkProps & {\n    children: React.ReactNode\n    ref: React.Ref<HTMLAnchorElement>\n  }\n) {\n  const [linkStatus, setOptimisticLinkStatus] = useOptimistic(IDLE_LINK_STATUS)\n\n  let children: React.ReactNode\n\n  const linkInstanceRef = useRef<LinkInstance | null>(null)\n\n  const {\n    href: hrefProp,\n    as: asProp,\n    children: childrenProp,\n    prefetch: prefetchProp = null,\n    passHref,\n    replace,\n    shallow,\n    scroll,\n    onClick,\n    onMouseEnter: onMouseEnterProp,\n    onTouchStart: onTouchStartProp,\n    legacyBehavior = false,\n    onNavigate,\n    ref: forwardedRef,\n    unstable_dynamicOnHover,\n    ...restProps\n  } = props\n\n  children = childrenProp\n\n  if (\n    legacyBehavior &&\n    (typeof children === 'string' || typeof children === 'number')\n  ) {\n    children = <a>{children}</a>\n  }\n\n  const router = React.useContext(AppRouterContext)\n\n  const prefetchEnabled = prefetchProp !== false\n\n  const fetchStrategy =\n    prefetchProp !== false\n      ? getFetchStrategyFromPrefetchProp(prefetchProp)\n      : // TODO: it makes no sense to assign a fetchStrategy when prefetching is disabled.\n        FetchStrategy.PPR\n\n  if (process.env.NODE_ENV !== 'production') {\n    function createPropError(args: {\n      key: string\n      expected: string\n      actual: string\n    }) {\n      return new Error(\n        `Failed prop type: The prop \\`${args.key}\\` expects a ${args.expected} in \\`<Link>\\`, but got \\`${args.actual}\\` instead.` +\n          (typeof window !== 'undefined'\n            ? \"\\nOpen your browser's console to view the Component stack trace.\"\n            : '')\n      )\n    }\n\n    // TypeScript trick for type-guarding:\n    const requiredPropsGuard: Record<LinkPropsRequired, true> = {\n      href: true,\n    } as const\n    const requiredProps: LinkPropsRequired[] = Object.keys(\n      requiredPropsGuard\n    ) as LinkPropsRequired[]\n    requiredProps.forEach((key: LinkPropsRequired) => {\n      if (key === 'href') {\n        if (\n          props[key] == null ||\n          (typeof props[key] !== 'string' && typeof props[key] !== 'object')\n        ) {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: props[key] === null ? 'null' : typeof props[key],\n          })\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        const _: never = key\n      }\n    })\n\n    // TypeScript trick for type-guarding:\n    const optionalPropsGuard: Record<LinkPropsOptional, true> = {\n      as: true,\n      replace: true,\n      scroll: true,\n      shallow: true,\n      passHref: true,\n      prefetch: true,\n      unstable_dynamicOnHover: true,\n      onClick: true,\n      onMouseEnter: true,\n      onTouchStart: true,\n      legacyBehavior: true,\n      onNavigate: true,\n    } as const\n    const optionalProps: LinkPropsOptional[] = Object.keys(\n      optionalPropsGuard\n    ) as LinkPropsOptional[]\n    optionalProps.forEach((key: LinkPropsOptional) => {\n      const valType = typeof props[key]\n\n      if (key === 'as') {\n        if (props[key] && valType !== 'string' && valType !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: valType,\n          })\n        }\n      } else if (\n        key === 'onClick' ||\n        key === 'onMouseEnter' ||\n        key === 'onTouchStart' ||\n        key === 'onNavigate'\n      ) {\n        if (props[key] && valType !== 'function') {\n          throw createPropError({\n            key,\n            expected: '`function`',\n            actual: valType,\n          })\n        }\n      } else if (\n        key === 'replace' ||\n        key === 'scroll' ||\n        key === 'shallow' ||\n        key === 'passHref' ||\n        key === 'legacyBehavior' ||\n        key === 'unstable_dynamicOnHover'\n      ) {\n        if (props[key] != null && valType !== 'boolean') {\n          throw createPropError({\n            key,\n            expected: '`boolean`',\n            actual: valType,\n          })\n        }\n      } else if (key === 'prefetch') {\n        if (\n          props[key] != null &&\n          valType !== 'boolean' &&\n          props[key] !== 'auto' &&\n          props[key] !== 'unstable_forceStale'\n        ) {\n          throw createPropError({\n            key,\n            expected: '`boolean | \"auto\" | \"unstable_forceStale\"`',\n            actual: valType,\n          })\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        const _: never = key\n      }\n    })\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.locale) {\n      warnOnce(\n        'The `locale` prop is not supported in `next/link` while using the `app` router. Read more about app router internalization: https://nextjs.org/docs/app/building-your-application/routing/internationalization'\n      )\n    }\n    if (!asProp) {\n      let href: string | undefined\n      if (typeof hrefProp === 'string') {\n        href = hrefProp\n      } else if (\n        typeof hrefProp === 'object' &&\n        typeof hrefProp.pathname === 'string'\n      ) {\n        href = hrefProp.pathname\n      }\n\n      if (href) {\n        const hasDynamicSegment = href\n          .split('/')\n          .some((segment) => segment.startsWith('[') && segment.endsWith(']'))\n\n        if (hasDynamicSegment) {\n          throw new Error(\n            `Dynamic href \\`${href}\\` found in <Link> while using the \\`/app\\` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href`\n          )\n        }\n      }\n    }\n  }\n\n  const { href, as } = React.useMemo(() => {\n    const resolvedHref = formatStringOrUrl(hrefProp)\n    return {\n      href: resolvedHref,\n      as: asProp ? formatStringOrUrl(asProp) : resolvedHref,\n    }\n  }, [hrefProp, asProp])\n\n  // This will return the first child, if multiple are provided it will throw an error\n  let child: any\n  if (legacyBehavior) {\n    if ((children as any)?.$$typeof === Symbol.for('react.lazy')) {\n      throw new Error(\n        `\\`<Link legacyBehavior>\\` received a direct child that is either a Server Component, or JSX that was loaded with React.lazy(). This is not supported. Either remove legacyBehavior, or make the direct child a Client Component that renders the Link's \\`<a>\\` tag.`\n      )\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      if (onClick) {\n        console.warn(\n          `\"onClick\" was passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link`\n        )\n      }\n      if (onMouseEnterProp) {\n        console.warn(\n          `\"onMouseEnter\" was passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link`\n        )\n      }\n      try {\n        child = React.Children.only(children)\n      } catch (err) {\n        if (!children) {\n          throw new Error(\n            `No children were passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but one child is required https://nextjs.org/docs/messages/link-no-children`\n          )\n        }\n        throw new Error(\n          `Multiple children were passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children` +\n            (typeof window !== 'undefined'\n              ? \" \\nOpen your browser's console to view the Component stack trace.\"\n              : '')\n        )\n      }\n    } else {\n      child = React.Children.only(children)\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if ((children as any)?.type === 'a') {\n        throw new Error(\n          'Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor'\n        )\n      }\n    }\n  }\n\n  const childRef: any = legacyBehavior\n    ? child && typeof child === 'object' && child.ref\n    : forwardedRef\n\n  // Use a callback ref to attach an IntersectionObserver to the anchor tag on\n  // mount. In the future we will also use this to keep track of all the\n  // currently mounted <Link> instances, e.g. so we can re-prefetch them after\n  // a revalidation or refresh.\n  const observeLinkVisibilityOnMount = React.useCallback(\n    (element: HTMLAnchorElement | SVGAElement) => {\n      if (router !== null) {\n        linkInstanceRef.current = mountLinkInstance(\n          element,\n          href,\n          router,\n          fetchStrategy,\n          prefetchEnabled,\n          setOptimisticLinkStatus\n        )\n      }\n\n      return () => {\n        if (linkInstanceRef.current) {\n          unmountLinkForCurrentNavigation(linkInstanceRef.current)\n          linkInstanceRef.current = null\n        }\n        unmountPrefetchableInstance(element)\n      }\n    },\n    [prefetchEnabled, href, router, fetchStrategy, setOptimisticLinkStatus]\n  )\n\n  const mergedRef = useMergedRef(observeLinkVisibilityOnMount, childRef)\n\n  const childProps: {\n    onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>\n    onMouseEnter: React.MouseEventHandler<HTMLAnchorElement>\n    onClick: React.MouseEventHandler<HTMLAnchorElement>\n    href?: string\n    ref?: any\n  } = {\n    ref: mergedRef,\n    onClick(e) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!e) {\n          throw new Error(\n            `Component rendered inside next/link has to pass click event to \"onClick\" prop.`\n          )\n        }\n      }\n\n      if (!legacyBehavior && typeof onClick === 'function') {\n        onClick(e)\n      }\n\n      if (\n        legacyBehavior &&\n        child.props &&\n        typeof child.props.onClick === 'function'\n      ) {\n        child.props.onClick(e)\n      }\n\n      if (!router) {\n        return\n      }\n      if (e.defaultPrevented) {\n        return\n      }\n      linkClicked(e, href, as, linkInstanceRef, replace, scroll, onNavigate)\n    },\n    onMouseEnter(e) {\n      if (!legacyBehavior && typeof onMouseEnterProp === 'function') {\n        onMouseEnterProp(e)\n      }\n\n      if (\n        legacyBehavior &&\n        child.props &&\n        typeof child.props.onMouseEnter === 'function'\n      ) {\n        child.props.onMouseEnter(e)\n      }\n\n      if (!router) {\n        return\n      }\n      if (!prefetchEnabled || process.env.NODE_ENV === 'development') {\n        return\n      }\n\n      const upgradeToDynamicPrefetch = unstable_dynamicOnHover === true\n      onNavigationIntent(\n        e.currentTarget as HTMLAnchorElement | SVGAElement,\n        upgradeToDynamicPrefetch\n      )\n    },\n    onTouchStart: process.env.__NEXT_LINK_NO_TOUCH_START\n      ? undefined\n      : function onTouchStart(e) {\n          if (!legacyBehavior && typeof onTouchStartProp === 'function') {\n            onTouchStartProp(e)\n          }\n\n          if (\n            legacyBehavior &&\n            child.props &&\n            typeof child.props.onTouchStart === 'function'\n          ) {\n            child.props.onTouchStart(e)\n          }\n\n          if (!router) {\n            return\n          }\n          if (!prefetchEnabled) {\n            return\n          }\n\n          const upgradeToDynamicPrefetch = unstable_dynamicOnHover === true\n          onNavigationIntent(\n            e.currentTarget as HTMLAnchorElement | SVGAElement,\n            upgradeToDynamicPrefetch\n          )\n        },\n  }\n\n  // If the url is absolute, we can bypass the logic to prepend the basePath.\n  if (isAbsoluteUrl(as)) {\n    childProps.href = as\n  } else if (\n    !legacyBehavior ||\n    passHref ||\n    (child.type === 'a' && !('href' in child.props))\n  ) {\n    childProps.href = addBasePath(as)\n  }\n\n  let link: React.ReactNode\n\n  if (legacyBehavior) {\n    if (process.env.NODE_ENV === 'development') {\n      errorOnce(\n        '`legacyBehavior` is deprecated and will be removed in a future ' +\n          'release. A codemod is available to upgrade your components:\\n\\n' +\n          'npx @next/codemod@latest new-link .\\n\\n' +\n          'Learn more: https://nextjs.org/docs/app/building-your-application/upgrading/codemods#remove-a-tags-from-link-components'\n      )\n    }\n    link = React.cloneElement(child, childProps)\n  } else {\n    link = (\n      <a {...restProps} {...childProps}>\n        {children}\n      </a>\n    )\n  }\n\n  return (\n    <LinkStatusContext.Provider value={linkStatus}>\n      {link}\n    </LinkStatusContext.Provider>\n  )\n}\n\nconst LinkStatusContext = createContext<\n  typeof PENDING_LINK_STATUS | typeof IDLE_LINK_STATUS\n>(IDLE_LINK_STATUS)\n\nexport const useLinkStatus = () => {\n  return useContext(LinkStatusContext)\n}\n\nfunction getFetchStrategyFromPrefetchProp(\n  prefetchProp: Exclude<LinkProps['prefetch'], undefined | false>\n): PrefetchTaskFetchStrategy {\n  if (\n    process.env.__NEXT_CACHE_COMPONENTS &&\n    process.env.__NEXT_CLIENT_SEGMENT_CACHE\n  ) {\n    // In the new implementation:\n    // - `prefetch={true}` is a runtime prefetch\n    //   (includes cached IO + params + cookies, with dynamic holes for uncached IO).\n    // - `unstable_forceStale` is a \"full\" prefetch\n    //   (forces inclusion of all dynamic data, i.e. the old behavior of `prefetch={true}`)\n    if (prefetchProp === true) {\n      return FetchStrategy.PPRRuntime\n    }\n    if (prefetchProp === 'unstable_forceStale') {\n      return FetchStrategy.Full\n    }\n\n    // `null` or `\"auto\"`: this is the default \"auto\" mode, where we will prefetch partially if the link is in the viewport.\n    // This will also include invalid prop values that don't match the types specified here.\n    // (although those should've been filtered out by prop validation in dev)\n    prefetchProp satisfies null | 'auto'\n    // In `clientSegmentCache`, we default to PPR, and we'll discover whether or not the route supports it with the initial prefetch.\n    // If we're not using `clientSegmentCache`, this will be converted into a `PrefetchKind.AUTO`.\n    return FetchStrategy.PPR\n  } else {\n    return prefetchProp === null || prefetchProp === 'auto'\n      ? // In `clientSegmentCache`, we default to PPR, and we'll discover whether or not the route supports it with the initial prefetch.\n        // If we're not using `clientSegmentCache`, this will be converted into a `PrefetchKind.AUTO`.\n        FetchStrategy.PPR\n      : // In the old implementation without runtime prefetches, `prefetch={true}` forces all dynamic data to be prefetched.\n        // To preserve backwards-compatibility, anything other than `false`, `null`, or `\"auto\"` results in a full prefetch.\n        // (although invalid values should've been filtered out by prop validation in dev)\n        FetchStrategy.Full\n  }\n}\n","import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1 p-4\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-4 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-4 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","'use client'\n\nimport { ChangeEvent, useEffect, useMemo, useRef, useState } from 'react'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport { useRouter } from 'next/navigation'\nimport { useSearchParams } from 'next/navigation'\nimport { useAuth } from '@/lib/auth/AuthContext'\nimport { FurfieldLogo } from '@/components/FurfieldLogo'\nimport { createClient } from '@/lib/supabase/client'\n\ninterface StandardizedHeaderProps {\n  title?: string\n  subtitle?: string\n  homeRoute?: string\n}\n\nexport type { StandardizedHeaderProps }\n\nexport function StandardizedHeader({ \n  title = 'Platform Administration', \n  subtitle = 'Platform Management Portal',\n  homeRoute = '/'\n}: StandardizedHeaderProps) {\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const { user, logout } = useAuth()\n  const [uploading, setUploading] = useState(false)\n  const [menuError, setMenuError] = useState<string | null>(null)\n  const [userName, setUserName] = useState<string | null>(null)\n  const [userRole, setUserRole] = useState<string>('Platform Admin')\n  const [userAvatar, setUserAvatar] = useState<string | null>(null)\n  const [profileLoaded, setProfileLoaded] = useState(false)\n  const fileInputRef = useRef<HTMLInputElement>(null)\n  \n    // Debug user changes\n  useEffect(() => {\n    const timestamp = new Date().toISOString()\n    console.log(`[${timestamp}] [StandardizedHeader] User changed:`, user)\n    console.log(`[${timestamp}] [StandardizedHeader] User id:`, user?.id)\n    console.log(`[${timestamp}] [StandardizedHeader] User email:`, user?.email)\n    \n    // If user is not authenticated and we're not in the process of restoring session,\n    // redirect to auth service after a short delay to allow session restoration to complete\n    const hasTokens = searchParams.get('access_token') && searchParams.get('refresh_token')\n    console.log(`[${timestamp}] [StandardizedHeader] Redirect check:`, { user: !!user, hasTokens })\n    \n    // For debugging: don't redirect, just show placeholders\n    // if (!user && !hasTokens) {\n    //   console.log(`[${timestamp}] [StandardizedHeader] No user and no tokens, will redirect to auth service in 2 seconds...`)\n    //   setTimeout(() => {\n    //     // Double-check that we still don't have a user\n    //     console.log(`[${new Date().toISOString()}] [StandardizedHeader] Timeout check - user:`, !!user)\n    //     if (!user) {\n    //       console.log(`[${new Date().toISOString()}] [StandardizedHeader] Still no user after delay, redirecting to auth service...`)\n    //       window.location.href = `http://localhost:6800?t=${Date.now()}`\n    //     } else {\n    //       console.log(`[${new Date().toISOString()}] [StandardizedHeader] User found after delay, skipping redirect`)\n    //     }\n    //   }, 2000)\n    // } else if (!user && hasTokens) {\n    //   console.log(`[${timestamp}] [StandardizedHeader] No user but tokens present, waiting for session restoration...`)\n    // } else if (user) {\n    //   console.log(`[${timestamp}] [StandardizedHeader] User authenticated, no redirect needed`)\n    // }\n  }, [user, searchParams])\n\n  useEffect(() => {\n    if (user) {\n      setProfileLoaded(false)\n    }\n  }, [user?.id])\n\n  // Helper function to capitalize names properly\n  const capitalizeName = (name: string) => {\n    return name\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ')\n  }\n\n  const userId = user?.id ?? \"guest\"\n  const fullName = `${user?.firstName || ''} ${user?.lastName || ''}`.trim()\n  const rawDisplayName = userName || fullName || user?.email || userId || \"Guest\"\n  const displayName = capitalizeName(rawDisplayName)\n  const initials = displayName\n    .split(' ')\n    .map(word => word.charAt(0))\n    .join('')\n    .toUpperCase()\n    .slice(0, 2)\n  const avatarUrl = userAvatar || user?.avatarUrl || null\n  \n  const roleDisplayName = userRole || user?.role || 'Platform Admin'\n\n  console.log('[StandardizedHeader] Computed values:', {\n    userId,\n    userName,\n    rawDisplayName,\n    displayName,\n    initials,\n    avatarUrl,\n    roleDisplayName\n  })\n\n  // Fetch complete user profile from database\n  useEffect(() => {\n    async function fetchUserProfile() {\n      console.log('[StandardizedHeader] ===== STARTING PROFILE FETCH =====')\n      console.log('[StandardizedHeader] useEffect triggered, user:', user)\n      console.log('[StandardizedHeader] user?.id:', user?.id)\n      console.log('[StandardizedHeader] user?.email:', user?.email)\n      console.log('[StandardizedHeader] profileLoaded:', profileLoaded)\n\n      if (!user?.id || profileLoaded) {\n        console.log('[StandardizedHeader] ===== SKIPPING PROFILE FETCH =====')\n        console.log('[StandardizedHeader] Reason:', !user?.id ? 'no user id' : 'already loaded')\n        return\n      }\n\n      console.log('[StandardizedHeader] ===== FETCHING PROFILE =====')\n      try {\n        console.log('[profile] Fetching user profile for user_id:', user.id)\n        setProfileLoaded(true)\n\n        const supabase = createClient()\n        console.log('[profile] Created supabase client')\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const { data: profile, error: profileError } = await (supabase as any)\n          .schema('public')\n          .from('profiles')\n          .select('first_name, last_name, user_platform_id')\n          .eq('user_id', user.id)\n          .single()\n\n        console.log('[profile] ===== QUERY RESULTS =====')\n        console.log('[profile] Profile data:', profile)\n        console.log('[profile] Profile error:', profileError)\n\n        if (profileError) {\n          console.error('[profile] ===== PROFILE QUERY ERROR =====')\n          console.error('Error fetching user profile:', {\n            message: profileError.message,\n            code: profileError.code,\n            details: profileError.details,\n            hint: profileError.hint\n          })\n          setProfileLoaded(false) // Allow retry\n          return\n        }\n\n        if (profile) {\n          console.log('[profile] ===== PROFILE FOUND =====')\n          console.log('[profile] Raw profile:', profile)\n          \n          // Combine first_name + last_name\n          const fullName = `${profile.first_name || ''} ${profile.last_name || ''}`.trim()\n          console.log('[profile] Computed fullName:', fullName)\n          \n          if (fullName) {\n            setUserName(fullName)\n            console.log('[profile] Display name set to:', fullName)\n          } else {\n            console.log('[profile] No name found in profile')\n          }\n\n          // Fetch user's actual role\n          if (profile.user_platform_id) {\n            console.log('[profile] ===== FETCHING ROLE =====')\n            console.log('[profile] user_platform_id:', profile.user_platform_id)\n            const userPlatformId = profile.user_platform_id\n            \n            // Get role assignments\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const { data: roleAssignments, error: roleError } = await (supabase as any)\n              .schema('public')\n              .from('user_to_role_assignment')\n              .select('platform_role_id')\n              .eq('user_platform_id', userPlatformId)\n\n            console.log('[profile] Role assignments query result:', { roleAssignments, roleError })\n\n            if (roleError || !roleAssignments || roleAssignments.length === 0) {\n              console.log('[profile] No role assignments found, using default')\n              return\n            }\n\n            // Get role details\n            const roleIds = roleAssignments.map((r: { platform_role_id: number }) => r.platform_role_id)\n            console.log('[profile] Role IDs:', roleIds)\n            \n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const { data: roles, error: rolesError } = await (supabase as any)\n              .schema('public')\n              .from('platform_roles')\n              .select('role_name, display_name, privilege_level')\n              .in('id', roleIds)\n              .order('privilege_level', { ascending: true })\n\n            console.log('[profile] Roles query result:', { roles, rolesError })\n\n            if (rolesError || !roles || roles.length === 0) {\n              console.log('[profile] Could not fetch role details, using default')\n              return\n            }\n\n            // Use the role with highest privilege (lowest number)\n            const primaryRole = roles[0]\n            const roleDisplay = primaryRole.display_name || primaryRole.role_name\n            setUserRole(roleDisplay)\n            console.log('[profile] ===== PLATFORM ROLE SET =====')\n            console.log('[profile] Role set to:', roleDisplay, 'from role:', primaryRole)\n\n            // Step 6: Check hospital-specific role assignments for additional context\n            console.log('[profile] ===== CHECKING HOSPITAL ROLE ASSIGNMENTS =====')\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const { data: hospitalAssignments, error: hospitalError } = await (supabase as any)\n              .schema('public')\n              .from('employee_to_hospital_role_assignment')\n              .select('hospital_id, role_id, assignment_status, hospital_name')\n              .eq('user_platform_id', userPlatformId)\n              .eq('assignment_status', 'active')\n\n            console.log('[profile] Hospital assignments:', hospitalAssignments)\n            console.log('[profile] Hospital assignments error:', hospitalError)\n\n            if (hospitalAssignments && hospitalAssignments.length > 0) {\n              console.log('[profile] ===== HOSPITAL ASSIGNMENTS FOUND =====')\n              console.log('[profile] User has', hospitalAssignments.length, 'active hospital assignments')\n              // Could store hospital assignments for later use in component state if needed\n            } else {\n              console.log('[profile] ===== NO HOSPITAL ASSIGNMENTS =====')\n            }\n\n            console.log('[profile] ===== COMPLETE PRIVILEGE VALIDATION CHAIN =====')\n            console.log('[profile] 1. auth.id →', user.id)\n            console.log('[profile] 2. profiles.user_id → profile found')\n            console.log('[profile] 3. profiles.user_platform_id →', userPlatformId)\n            console.log('[profile] 4. user_to_role_assignment.platform_role_id →', roleIds)\n            console.log('[profile] 5. platform_roles.id →', primaryRole.role_name)\n            console.log('[profile] 6. employee_to_hospital_role_assignment.user_platform_id →', hospitalAssignments?.length || 0, 'assignments')\n          } else {\n            console.log('[profile] No user_platform_id found')\n          }\n        } else {\n          console.log('[profile] ===== NO PROFILE FOUND IN DATABASE =====')\n          console.log('[profile] User ID searched:', user.id)\n          console.log('[profile] Auth user data:', {\n            id: user?.id,\n            email: user?.email,\n            firstName: user?.firstName,\n            lastName: user?.lastName,\n            role: user?.role\n          })\n          setProfileLoaded(true)\n        }\n      } catch (error) {\n        console.error('[profile] ===== EXCEPTION =====')\n        console.error('Exception fetching user profile:', error)\n        setProfileLoaded(false) // Allow retry on error\n      }\n      console.log('[StandardizedHeader] ===== PROFILE FETCH COMPLETE =====')\n    }\n\n    fetchUserProfile()\n  }, [user?.id, profileLoaded])\n\n  async function handleSignOut() {\n    try {\n      console.log('[StandardizedHeader] handleSignOut clicked')\n      \n      // Call the logout function from AuthContext\n      console.log('[StandardizedHeader] Calling logout()')\n      logout()\n      console.log('[StandardizedHeader] logout() completed')\n\n      // Clear all local storage and session storage\n      console.log('[StandardizedHeader] Clearing storage')\n      localStorage.clear()\n      sessionStorage.clear()\n      \n      // Also clear cookies by setting them to expire\n      try {\n        console.log('[StandardizedHeader] Clearing cookies')\n        document.cookie.split(';').forEach((c: string) => {\n          const cookieName = c.split('=')[0].trim()\n          if (cookieName) {\n            const expireDate = new Date('Thu, 01 Jan 1970 00:00:00 GMT').toUTCString()\n            document.cookie = cookieName + '=;expires=' + expireDate + ';path=/'\n          }\n        })\n        console.log('[StandardizedHeader] Cookies cleared')\n      } catch (e) {\n        console.error('[StandardizedHeader] Error clearing cookies:', e)\n        // Cookie clearing might fail, but that's ok\n      }\n\n      window.dispatchEvent(new Event('storage'))\n      console.log('[StandardizedHeader] Storage event dispatched')\n\n      // Redirect to auth service login page and stay there\n      console.log('[StandardizedHeader] Redirecting to auth service')\n      window.location.href = 'http://localhost:6800'\n    } catch (error) {\n      console.error('[StandardizedHeader] Error signing out:', error)\n      // Force redirect even if there's an error\n      localStorage.clear()\n      sessionStorage.clear()\n      window.location.href = 'http://localhost:6800'\n    }\n  }\n\n  function handleAvatarClick() {\n    if (uploading) {\n      return\n    }\n\n    setMenuError(null)\n    fileInputRef.current?.click()\n  }\n\n  async function handleAvatarUpload(event: ChangeEvent<HTMLInputElement>) {\n    const file = event.target.files?.[0]\n    if (!file || !user) {\n      event.target.value = ''\n      return\n    }\n\n    setUploading(true)\n    setMenuError(null)\n\n    try {\n      const supabase = createClient()\n      const fileExt = file.name.split('.').pop() ?? 'png'\n      const filePath = `${user.id}/${Date.now()}.${fileExt}`\n\n      const { error: uploadError } = await supabase.storage.from('profile-icons').upload(filePath, file, {\n        upsert: true,\n        cacheControl: '3600',\n      })\n\n      if (uploadError) {\n        throw uploadError\n      }\n\n      const { data: publicUrlData } = supabase.storage.from('profile-icons').getPublicUrl(filePath)\n      const publicUrl = publicUrlData.publicUrl\n\n      // Update auth metadata only (avatar stored in user_metadata)\n      const { error: updateError } = await supabase.auth.updateUser({\n        data: { avatar_url: publicUrl }\n      })\n\n      if (updateError) {\n        throw updateError\n      }\n\n  console.log('[profile] Avatar uploaded and updated:', publicUrl)\n\n      setMenuError(null)\n    } catch (error) {\n      console.error('Upload failed:', error)\n      setMenuError('Failed to upload image. Please try again.')\n    } finally {\n      setUploading(false)\n      event.target.value = ''\n    }\n  }\n\n  return (\n    <header className=\"relative z-10 w-full bg-white/90 shadow-sm backdrop-blur\">\n      <div className=\"absolute inset-0 bg-gradient-to-r from-sky-200/40 via-white to-amber-200/40\" aria-hidden=\"true\" />\n\n      <div className=\"relative mx-auto flex h-16 max-w-6xl items-center justify-between gap-4 px-4 sm:px-6\">\n        <Link href={homeRoute} className=\"flex items-center gap-3 text-lg font-semibold text-slate-800\">\n          <FurfieldLogo className=\"rounded-full\" size={52} />\n          <span className=\"hidden sm:inline tracking-wide\">{title}</span>\n        </Link>\n\n        <nav className=\"flex items-center gap-3 sm:gap-4\">\n          {user ? (\n            <>\n              <Link \n                href={homeRoute}\n                className=\"rounded-lg px-3 py-1.5 text-sm font-medium text-slate-700 transition hover:bg-sky-100 hover:text-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-300\"\n              >\n                Home\n              </Link>\n              <div className=\"relative flex flex-col items-end\">\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/png,image/jpeg,image/webp\"\n                className=\"hidden\"\n                onChange={handleAvatarUpload}\n              />\n\n              <div className=\"flex items-center gap-2 sm:gap-3\">\n                <button\n                  type=\"button\"\n                  onClick={handleAvatarClick}\n                  className=\"relative flex h-10 w-10 items-center justify-center overflow-hidden rounded-full border border-white/70 bg-white/80 text-sm font-semibold text-slate-600 shadow transition hover:border-sky-200 focus:outline-none focus:ring-2 focus:ring-sky-300 disabled:cursor-not-allowed disabled:opacity-70\"\n                  aria-label={uploading ? 'Uploading profile image' : 'Upload profile image'}\n                  disabled={uploading}\n                >\n                  {avatarUrl ? (\n                    <Image\n                      src={avatarUrl}\n                      alt=\"Profile avatar\"\n                      width={40}\n                      height={40}\n                      className=\"h-10 w-10 rounded-full object-cover\"\n                      unoptimized\n                    />\n                  ) : (\n                    <div className=\"flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-sky-400 via-sky-500 to-emerald-500 text-base font-semibold text-white shadow-inner\">\n                      {initials}\n                    </div>\n                  )}\n                  {uploading ? (\n                    <div className=\"absolute inset-0 flex items-center justify-center rounded-full bg-white/70 text-[10px] font-semibold uppercase tracking-wide text-slate-500\">\n                      ...\n                    </div>\n                  ) : null}\n                </button>\n\n                <div className=\"flex items-center gap-2 px-3 py-1.5\">\n                  <div className=\"hidden text-sm text-slate-600 sm:flex sm:flex-col\">\n                    <span className=\"font-medium text-slate-700\">\n                      {displayName}\n                    </span>\n                    <span className=\"text-xs text-slate-400\">\n                      {roleDisplayName}\n                    </span>\n                  </div>\n                  <span className=\"text-sm font-medium text-slate-700 sm:hidden\">\n                    {displayName}\n                  </span>\n                </div>\n\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    const target = encodeURIComponent('http://localhost:3000')\n                    window.location.href = `http://localhost:6800?redirect=${target}`\n                  }}\n                  className=\"flex h-10 w-10 items-center justify-center rounded-full text-emerald-600 transition hover:bg-emerald-50 focus:outline-none focus:ring-2 focus:ring-emerald-300\"\n                  title=\"Go to Organization Portal\"\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={2} stroke=\"currentColor\" className=\"h-5 w-5\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M2.25 21h19.5m-18-18v18m10.5-18v18m6-13.5V21M6.75 6.75h.75m-.75 3h.75m-.75 3h.75m3-6h.75m-.75 3h.75m-.75 3h.75M6.75 21v-3.375c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21M3 3h12m-.75 4.5H21m-3.75 3.75h.008v.008h-.008v-.008zm0 3h.008v.008h-.008v-.008zm0 3h.008v.008h-.008v-.008z\" />\n                  </svg>\n                </button>\n\n                <button\n                  type=\"button\"\n                  onClick={handleSignOut}\n                  className=\"flex h-10 w-10 items-center justify-center rounded-full text-slate-600 transition hover:bg-rose-50 hover:text-rose-600 focus:outline-none focus:ring-2 focus:ring-rose-300\"\n                  title=\"Sign out\"\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={2} stroke=\"currentColor\" className=\"h-5 w-5\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15m3 0l3-3m0 0l-3-3m3 3H9\" />\n                  </svg>\n                </button>\n              </div>\n\n              {menuError ? (\n                <p className=\"mt-2 rounded-md bg-rose-50 px-3 py-2 text-xs font-medium text-rose-500 shadow-sm\">\n                  {menuError}\n                </p>\n              ) : null}\n            </div>\n            </>\n          ) : (\n            // Placeholder content for unauthenticated users (guest state)\n            <div className=\"flex items-center gap-2 sm:gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-slate-400 via-slate-500 to-slate-600 text-base font-semibold text-white shadow-inner\">\n                {initials}\n              </div>\n              <div className=\"flex items-center gap-2 px-3 py-1.5\">\n                <div className=\"hidden text-sm text-slate-600 sm:flex sm:flex-col\">\n                  <span className=\"font-medium text-slate-700\">\n                    {displayName}\n                  </span>\n                  <span className=\"text-xs text-slate-400\">\n                    {roleDisplayName}\n                  </span>\n                </div>\n                <span className=\"text-sm font-medium text-slate-700 sm:hidden\">\n                  {displayName}\n                </span>\n              </div>\n              <button\n                type=\"button\"\n                onClick={handleSignOut}\n                className=\"flex h-10 w-10 items-center justify-center rounded-full text-rose-600 transition hover:bg-rose-50 focus:outline-none focus:ring-2 focus:ring-rose-300\"\n                title=\"Sign out\"\n              >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={2} stroke=\"currentColor\" className=\"h-5 w-5\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15m3 0l3-3m0 0l-3-3m3 3H9\" />\n                </svg>\n              </button>\n            </div>\n          )}\n        </nav>\n      </div>\n    </header>\n  )\n}","import Image from 'next/image'\n\ninterface FurfieldLogoProps {\n    className?: string\n    size?: number\n}\n\nexport function FurfieldLogo({ className, size = 52 }: FurfieldLogoProps) {\n    const classes = ['shrink-0', 'object-contain', className].filter(Boolean).join(' ')\n\n    return (\n        <Image\n            src=\"/Furfield-icon small.png\"\n            alt=\"FURFIELD paw logo\"\n            width={size}\n            height={size}\n            className={classes}\n            style={{ width: 'auto', height: 'auto' }}\n            priority\n        />\n    )\n}","import { createClient as createSupabaseClient, type SupabaseClient } from '@supabase/supabase-js'\nimport { Database } from './types'\n\ntype AppSupabaseClient = SupabaseClient<Database>\n\nlet cachedClient: AppSupabaseClient | null = null\n\nexport function createClient(): AppSupabaseClient {\n  if (typeof window === 'undefined') {\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\n    if (!supabaseUrl || !supabaseAnonKey) {\n      throw new Error('Missing Supabase environment variables')\n    }\n\n    return createSupabaseClient<Database>(supabaseUrl, supabaseAnonKey, {\n      auth: {\n        persistSession: false,\n        autoRefreshToken: false,\n        detectSessionInUrl: false,\n      },\n    })\n  }\n\n  if (!cachedClient) {\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\n    if (!supabaseUrl || !supabaseAnonKey) {\n      throw new Error('Missing Supabase environment variables')\n    }\n\n    cachedClient = createSupabaseClient<Database>(supabaseUrl, supabaseAnonKey, {\n      auth: {\n        persistSession: true,\n        autoRefreshToken: true,\n        detectSessionInUrl: true,\n      },\n    })\n  }\n\n  return cachedClient\n}\n\nexport const supabase = createClient()"],"names":["warnOnce","_","process","env","NODE_ENV","warnings","Set","msg","has","console","warn","add","getImageBlurSvg","widthInt","heightInt","blurWidth","blurHeight","blurDataURL","objectFit","std","svgWidth","svgHeight","viewBox","preserveAspectRatio","VALID_LOADERS","imageConfigDefault","deviceSizes","imageSizes","path","loader","loaderFile","domains","disableStaticImages","minimumCacheTTL","formats","maximumRedirects","dangerouslyAllowLocalIP","dangerouslyAllowSVG","contentSecurityPolicy","contentDispositionType","localPatterns","undefined","remotePatterns","qualities","unoptimized","getImgProps","VALID_LOADING_VALUES","INVALID_BACKGROUND_SIZE_VALUES","isStaticRequire","src","default","isStaticImageData","isStaticImport","allImgs","Map","perfObserver","getInt","x","Number","isFinite","NaN","test","parseInt","getWidths","allSizes","width","sizes","viewportWidthRe","percentSizes","match","exec","push","length","smallestRatio","Math","min","widths","filter","s","kind","map","w","find","p","generateImgAttrs","config","quality","srcSet","last","i","join","priority","preload","loading","className","height","fill","style","overrideSrc","onLoad","onLoadingComplete","placeholder","fetchPriority","decoding","layout","objectPosition","lazyBoundary","lazyRoot","rest","_state","imgConf","showAltText","blurComplete","defaultLoader","c","sort","a","b","Error","isDefaultLoader","customImageLoader","obj","opts","layoutToStyle","intrinsic","maxWidth","responsive","layoutToSizes","layoutStyle","layoutSizes","staticSrc","staticImageData","JSON","stringify","ratio","round","isLazy","startsWith","split","endsWith","qualityInt","output","position","isNaN","includes","String","VALID_BLUR_EXT","urlStr","url","URL","err","pathname","search","legacyKey","legacyValue","Object","entries","window","PerformanceObserver","entryList","entry","getEntries","imgSrc","element","lcpImage","get","observe","type","buffered","error","imgStyle","assign","left","top","right","bottom","color","backgroundImage","backgroundSize","placeholderStyle","backgroundPosition","backgroundRepeat","imgAttributes","loadingFinal","fullUrl","e","location","href","set","props","meta","SideEffect","isServer","useClientOnlyLayoutEffect","useLayoutEffect","useClientOnlyEffect","useEffect","headManager","reduceComponentsToState","emitChange","mountedInstances","headElements","Children","toArray","Array","from","Boolean","updateHead","children","delete","_pendingUpdate","module","exports","require","vendored","HeadManagerContext","defaultHead","head","charSet","name","content","onlyReactElement","list","child","React","Fragment","concat","reduce","fragmentList","fragmentChild","METATYPES","unique","keys","tags","metaTypes","metaCategories","h","isUnique","hasKey","key","indexOf","slice","len","metatype","hasOwnProperty","category","categories","reduceComponents","headChildrenElements","reverse","srcMessage","cloneElement","Head","useContext","Effect","ImageConfigContext","RouterContext","findClosestQuality","q","prev","cur","abs","missingValues","NEXT_RUNTIME","hasLocalMatch","parsedSrc","hasRemoteMatch","hostname","encodeURIComponent","NEXT_DEPLOYMENT_ID","__next_img_default","useMergedRef","refA","refB","cleanupA","useRef","cleanupB","useCallback","current","cleanupFnA","cleanupFnB","applyRef","cleanup","Image","configEnv","__NEXT_IMAGE_OPTS","globalThis","__NEXT_IMAGE_IMPORTED","handleLoading","img","onLoadRef","onLoadingCompleteRef","setBlurComplete","sizesInput","decode","Promise","resolve","catch","then","parentElement","isConnected","event","Event","defineProperty","writable","value","prevented","stopped","nativeEvent","currentTarget","target","isDefaultPrevented","isPropagationStopped","persist","preventDefault","stopPropagation","origSrc","searchParams","getAttribute","widthViewportRatio","getBoundingClientRect","innerWidth","getComputedStyle","valid","heightModified","toString","widthModified","getDynamicProps","use","fetchpriority","ImageElement","forwardRef","setShowAltText","onError","forwardedRef","ownRef","complete","ref","data-nimg","ImagePreload","isAppRouter","as","imageSrcSet","crossOrigin","referrerPolicy","ReactDOM","link","rel","pagesRouter","configContext","useMemo","useState","imgMeta","getImageProps","imgProps","searchParamsToUrlQuery","urlQueryToSearchParams","query","existing","isArray","stringifyUrlQueryParam","param","URLSearchParams","item","append","searchParamsList","formatUrl","formatWithValidation","urlObjectKeys","slashedProtocols","urlObj","auth","protocol","hash","host","replace","port","querystring","slashes","forEach","DecodeError","MiddlewareNotFoundError","MissingStaticPage","NormalizeError","PageNotFoundError","SP","ST","WEB_VITALS","execOnce","getDisplayName","getLocationOrigin","getURL","isAbsoluteUrl","isResSent","loadGetInitialProps","normalizeRepeatedSlashes","stringifyError","fn","used","result","args","ABSOLUTE_URL_REGEX","origin","substring","Component","displayName","res","finished","headersSent","urlParts","urlNoQuery","App","ctx","prototype","getInitialProps","message","pageProps","performance","every","method","constructor","page","code","stack","parsePath","hashIndex","queryIndex","hasQuery","addPathPrefix","prefix","removeTrailingSlash","route","normalizePathTrailingSlash","__NEXT_MANUAL_TRAILING_SLASH","__NEXT_TRAILING_SLASH","addBasePath","basePath","__NEXT_ROUTER_BASEPATH","required","__NEXT_MANUAL_CLIENT_BASE_PATH","HTML_LIMITED_BOT_UA_RE","HTML_LIMITED_BOT_UA_RE_STRING","getBotType","isBot","HEADLESS_BROWSER_BOT_UA_RE","source","isDomBotUA","userAgent","isHtmlLimitedBotUA","createPrefetchURL","isExternalURL","navigator","createCacheKey","originalHref","nextUrl","originalUrl","cacheKey","HasLoadingBoundary","matchSegment","existingSegment","segment","ACTION_HEADER","FLIGHT_HEADERS","NEXT_ACTION_NOT_FOUND_HEADER","NEXT_DID_POSTPONE_HEADER","NEXT_HMR_REFRESH_HASH_COOKIE","NEXT_HMR_REFRESH_HEADER","NEXT_HTML_REQUEST_ID_HEADER","NEXT_IS_PRERENDER_HEADER","NEXT_REQUEST_ID_HEADER","NEXT_REWRITTEN_PATH_HEADER","NEXT_REWRITTEN_QUERY_HEADER","NEXT_ROUTER_PREFETCH_HEADER","NEXT_ROUTER_SEGMENT_PREFETCH_HEADER","NEXT_ROUTER_STALE_TIME_HEADER","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_RSC_UNION_QUERY","NEXT_URL","RSC_CONTENT_TYPE_HEADER","RSC_HEADER","ACTION_HMR_REFRESH","ACTION_NAVIGATE","ACTION_REFRESH","ACTION_RESTORE","ACTION_SERVER_ACTION","ACTION_SERVER_PATCH","PrefetchKind","isThenable","promise","dispatchAppRouterAction","useActionQueue","dispatch","action","actionQueue","state","setState","useAppDevRenderingIndicator","appDevRenderingIndicator","stateWithDebugInfo","debugInfo","promiseWithDebugInfo","asyncState","_debugInfo","callServer","actionId","actionArgs","reject","startTransition","findSourceMapURL","filename","document","ROOT_SEGMENT_CACHE_KEY","ROOT_SEGMENT_REQUEST_KEY","appendSegmentCacheKeyPart","appendSegmentRequestKeyPart","convertSegmentPathToStaticExportFilename","createSegmentCacheKeyPart","createSegmentRequestKeyPart","PAGE_SEGMENT_KEY","safeName","encodeToFilesystemAndURLSafeString","paramType","encodedName","parentRequestKey","parallelRouteKey","childRequestKeyPart","slotKey","requestKeyPart","paramValue","safeValue","parentSegmentKey","childCacheKeyPart","simpleParamValueRegex","base64url","btoa","segmentPath","doesStaticSegmentAppearInURL","getCacheKeyForDynamicParam","getParamValueFromCacheKey","getRenderedPathname","getRenderedSearch","parseDynamicParamFromURLPart","urlSearchParamsToParsedUrlQuery","urlToUrlWithoutFlightMarker","response","rewrittenQuery","headers","rewrittenPath","pathnameParts","partIndex","DEFAULT_SEGMENT_KEY","renderedSearch","pageSegmentWithSearchParams","addSearchParamsIfPageSegment","fromEntries","urlWithoutFlightParameters","__NEXT_CONFIG_OUTPUT","paramCacheKey","isCatchAll","createHrefFromUrl","includeHash","createInitialRSCPayloadFromFallbackPrerender","getFlightDataPartsFromPath","getNextFlightSegmentPath","normalizeFlightData","prepareFlightRouterStateForRequest","flightDataPath","flightDataPathLength","tree","seedData","isHeadPartial","pathToSegment","isRootRender","fallbackInitialRSCPayload","renderedPathname","canonicalUrl","originalFlightDataPath","f","originalFlightRouterState","fillInFallbackFlightRouterState","m","G","S","flightRouterState","index","fillInFallbackFlightRouterStateImpl","pathnamePartsIndex","originalSegment","newSegment","doesAppearInURL","paramName","childPathnamePartsIndex","newChildren","childFlightRouterState","newState","flightSegmentPath","flightData","isHmrRefresh","stripClientOnlyDataFromFlightRouterState","parallelRoutes","_url","refreshMarker","isRootLayout","hasLoadingBoundary","cleanedSegment","stripSearchParamsFromPageSegment","cleanedParallelRoutes","childState","shouldPreserveRefreshMarker","getAppBuildId","setAppBuildId","globalBuildId","buildId","djb2Hash","hexHash","str","char","charCodeAt","computeCacheBustingSearchParam","prefetchHeader","segmentPrefetchHeader","stateTreeHeader","nextUrlHeader","setCacheBustingSearchParam","setCacheBustingSearchParamWithHash","uniqueCacheKey","existingSearch","rawQuery","pairs","pair","createFetch","createFromNextReadableStream","fetchServerResponse","createFromReadableStream","createFromReadableStreamBrowser","createFromFetch","createFromFetchBrowser","createDebugChannel","__NEXT_REACT_DEBUG_CHANNEL","doMpaNavigation","abortController","AbortController","addEventListener","abort","options","prefetchKind","AUTO","TEMPORARY","isLegacyPPR","__NEXT_PPR","__NEXT_CACHE_COMPONENTS","shouldImmediatelyDecode","signal","responseUrl","redirected","contentType","interception","postponed","staleTimeHeaderSeconds","staleTime","isFlightResponse","ok","body","TURBOPACK","waitForWebpackRuntimeHotUpdate","flightResponsePromise","flightResponse","flightStream","createUnclosingPrefetchStream","normalizedFlightData","couldBeIntercepted","prerendered","aborted","__NEXT_TEST_MODE","self","__next_r","crypto","getRandomValues","Uint32Array","fetchOptions","credentials","fetchUrl","fetchPromise","fetch","createFromNextFetch","browserResponse","__NEXT_CLIENT_VALIDATE_RSC_REQUEST_HEADERS","MAX_REDIRECTS","n","rscResponse","status","requestHeaders","debugChannel","promiseForResponse","originalFlightStream","reader","getReader","ReadableStream","pull","controller","done","read","enqueue","createTupleMap","rootEntry","parent","hasValue","lastAccessedEntry","lastAccessedKeys","getOrCreateEntry","existingEntry","newEntry","getEntryIfExists","deleteEntry","deletedEntry","parentMap","size","createLRU","maxLruSize","onEviction","didScheduleCleanup","lruSize","put","node","next","ensureCleanupIsScheduled","tail","updateSize","newNodeSize","prevNodeSize","deleteNode","deleted","requestCleanupCallback","ninetyPercentMax","requestIdleCallback","cb","setTimeout","ensureLeadingSlash","normalizeAppPath","normalizeRscURL","segments","isGroupSegment","INTERCEPTION_ROUTE_MARKERS","extractInterceptionRouteInformation","isInterceptionRouteAppPath","interceptingRoute","marker","interceptedRoute","splitInterceptingRoute","computeChangedPath","extractPathFromFlightRouterState","getSelectedParams","removeLeadingSlash","segmentToPathname","normalizeSegments","acc","some","childrenPath","childPath","computeChangedPathImpl","treeA","treeB","segmentA","parallelRoutesA","segmentB","parallelRoutesB","normalizedSegmentA","normalizedSegmentB","parallelRouterKey","changedPath","currentTree","params","parallelRoute","values","isDynamicParameter","segmentValue","handleMutable","isNotUndefined","mutable","shouldScroll","previousNextUrl","patchedTree","pushRef","pendingPush","mpaNavigation","preserveCustomHistoryState","focusAndScrollRef","apply","scrollableSegments","onlyHashChange","hashFragment","decodeURIComponent","segmentPaths","cache","collectedDebugInfo","DYNAMIC_STALETIME_MS","STATIC_STALETIME_MS","generateSegmentsFromPatch","handleExternalUrl","navigateReducer","__NEXT_CLIENT_ROUTER_DYNAMIC_STALETIME","__NEXT_CLIENT_ROUTER_STATIC_STALETIME","flightRouterPatch","childSegment","handleNavigationResult","tag","NavigationResultTag","MPA","newUrl","data","NoOp","newCanonicalUrl","oldUrl","Success","cacheNode","Async","asyncResult","isExternalUrl","navigateType","getElementById","currentUrl","navigateUsingSegmentCache","DOC_PREFETCH_RANGE_HEADER_VALUE","doesExportedHtmlMatchBuildId","insertBuildIdComment","DOCTYPE_PREFIX","MAX_BUILD_ID_LENGTH","escapeBuildId","truncated","originalHtml","partialHtmlDocument","EntryStatus","canNewFetchStrategyProvideMoreContent","convertRouteTreeToFlightRouterState","createDetachedSegmentCacheEntry","fetchRouteOnCacheMiss","fetchSegmentOnCacheMiss","fetchSegmentPrefetchesUsingDynamicRequest","getCurrentCacheVersion","getSegmentKeypath","pingInvalidationListeners","readExactRouteCacheEntry","readOrCreateRevalidatingSegmentEntry","readOrCreateRouteCacheEntry","readOrCreateSegmentCacheEntry","readRouteCacheEntry","readSegmentCacheEntry","requestOptimisticRouteCacheEntry","resetRevalidatingSegmentEntry","revalidateEntireCache","upgradeToPendingSegment","upsertSegmentEntry","waitForSegmentCacheEntry","isOutputExportMode","getStaleTimeMs","staleTimeSeconds","max","routeCacheMap","maxRouteLruSize","routeCacheLru","onRouteLRUEviction","segmentCacheMap","maxSegmentLruSize","segmentCacheLru","onSegmentLRUEviction","invalidationListeners","currentCacheVersion","startRevalidationCooldown","pingVisibleLinks","attachInvalidationListener","task","onInvalidate","notifyInvalidationListener","reportError","tasks","isPrefetchTaskDirty","now","keypath","staleAt","deleteRouteFromCache","nonInterceptedEntry","fetchStrategy","isDynamic","FetchStrategy","Full","PPRRuntime","isPPREnabled","readExactSegmentCacheEntry","entryWithSearchParams","entryWithoutSearchParams","revalidatingEntry","revalidating","upsertedEntry","deleteSegmentFromCache","readRevalidatingSegmentCacheEntry","owner","existingRevalidation","clearRevalidatingSegmentFromOwner","pendingEntry","promiseWithResolvers","createPromiseWithResolvers","blockedTasks","Infinity","TODO_metadataStatus","TODO_isHeadDynamic","requestedUrl","requestedSearch","urlWithoutSearchParams","routeWithNoSearchParams","createPrefetchRequestKey","canonicalUrlForRouteWithNoSearchParams","optimisticCanonicalSearch","optimisticRenderedSearch","optimisticUrl","optimisticCanonicalUrl","optimisticEntry","prevEntry","candidateEntry","isPartial","rejectedEntry","rsc","emptyEntry","PPR","pingBlockedTasks","cancelEntryListeners","revalidatingSegment","pingPrefetchTask","fulfillRouteCacheEntry","isHeadDynamic","fulfilledEntry","fulfillSegmentCacheEntry","segmentCacheEntry","rejectRouteCacheEntry","rejectSegmentCacheEntry","convertRootTreePrefetchToRouteTree","rootTree","rootSegment","convertTreePrefetchToRouteTree","prefetch","requestKey","slots","prefetchSlots","childPrefetch","childParamName","childParamType","childServerSentParamKey","paramKey","childDoesAppearInURL","childParam","childParamValue","childParamKey","childRequestKey","childCacheKey","SegmentHasLoadingBoundary","hasRuntimePrefetch","convertRootFlightRouterStateToRouteTree","convertFlightRouterStateToRouteTree","childRouterState","childTree","SubtreeHasNoLoadingBoundary","routeTree","urlAfterRedirects","htmlResponse","Range","partialHtml","text","Date","fetchPrefetchResponse","addSegmentPathToUrlInOutputExportMode","varyHeader","closed","routeIsPPREnabled","prefetchStream","createPrefetchResponseStream","onResponseSizeUpdate","serverData","staleTimeMs","writeDynamicTreeResponseIntoCache","LoadingBoundary","currentKeypath","expectedEntry","newKeypath","routeKey","normalizedRequestKey","requestUrl","dynamicRequestTree","spawnedEntries","rejectSegmentEntriesIfStillPending","fulfilledEntries","totalBytesReceivedSoFar","averageSize","isResponsePartial","writeDynamicRenderResponseIntoCache","normalizedFlightDataResult","flightDatas","writeSeedDataIntoCache","entriesOwnedByCurrentTask","ownedEntry","possiblyNewEntry","flightRouterStateChildren","seedDataChildren","childSeedData","onStreamClose","totalByteLength","byteLength","staticUrl","routeDir","staticExportFilename","currentStrategy","newStrategy","cancelPrefetchTask","reschedulePrefetchTask","schedulePrefetchTask","scheduleMicrotask","queueMicrotask","taskHeap","inProgressRequests","sortIdCounter","didScheduleMicrotask","mostRecentlyHoveredLink","REVALIDATION_COOLDOWN_MS","revalidationCooldownTimeoutHandle","clearTimeout","ensureWorkIsScheduled","treeAtTimeOfPrefetch","cacheVersion","phase","hasBackgroundWork","spawnedRuntimePrefetches","sortId","isCanceled","_heapIndex","trackMostRecentlyHoveredLink","heapPush","heapDelete","PrefetchPriority","Intent","heapResift","Background","Default","processQueueInMicrotask","hasNetworkBandwidth","spawnPrefetchSubtask","prefetchSubtask","onPrefetchConnectionClosed","heapPeek","exitStatus","pingRoute","heapPop","background","pingRootRouteTree","keyWithoutSearch","routeWithoutSearch","Empty","Pending","Fulfilled","Rejected","pingSharedPartOfCacheComponentsTree","requestTree","pingRuntimePrefetches","needsDynamicRequest","diffRouteTreeAgainstCurrent","oldTree","newTree","pingStaticSegmentData","oldTreeChildren","newTreeChildren","newTreeChild","newTreeChildSegment","oldTreeChild","oldTreeChildSegment","childExitStatus","doesCurrentSegmentMatchCachedSegment","pingNewPartOfCacheComponentsTree","requestTreeChildren","requestTreeChild","subtreeHasLoadingBoundary","pingPPRDisabledRouteTreeUpToLoadingBoundary","pingRouteTreeAndIncludeDynamicData","refetchMarkerContext","refetchMarker","segmentHasLoadingBoundary","isInsideRefetchingParent","spawnedSegment","pingFullSegmentRevalidation","pingPPRSegmentRevalidation","currentSegment","upsertSegmentOnCompletion","pendingSegment","nonEmptyRevalidatingSegment","emptySegment","noop","fulfilled","cachedSegment","compareQueuePriority","priorityDiff","phaseDiff","heap","heapSiftUp","first","pop","heapSiftDown","parentIndex","halfLength","leftIndex","rightIndex","createRouterCacheKey","withoutSearchParameters","isNavigatingToNewRootLayout","nextTree","currentTreeSegment","nextTreeSegment","currentTreeChild","nextTreeChild","abortTask","listenForDynamicRequest","startPPRNavigation","updateCacheNodeOnPopstateRestoration","MPA_NAVIGATION_TASK","navigatedAt","oldCacheNode","oldRouterState","newRouterState","prefetchData","prefetchHead","isPrefetchHeadPartial","isSamePageNavigation","scrollableSegmentsResult","updateCacheNodeOnNavigation","didFindRootLayout","oldRouterStateChildren","newRouterStateChildren","prefetchDataChildren","oldParallelRoutes","prefetchParallelRoutes","patchedRouterStateChildren","taskChildren","dynamicRequestTreeChildren","newRouterStateChild","oldRouterStateChild","oldSegmentMapChild","prefetchDataChild","newSegmentChild","newSegmentPathChild","newSegmentKeyChild","oldSegmentChild","oldCacheNodeChild","taskChild","reuseActiveSegmentInDefaultSlot","beginRenderingNewRouteTree","newCacheNodeChild","newSegmentMapChild","taskChildRoute","dynamicRequestTreeChild","newCacheNode","lazyData","prefetchRsc","patchRouterStateWithNewChildren","existingCacheNode","possiblyPartialPrefetchHead","createCacheNodeOnNavigation","routerState","routerStateChildren","isLeafSegment","cacheNodeNavigatedAt","isPrefetchRscPartial","spawnPendingTask","existingCacheNodeChildren","cacheNodeChildren","routerStateChild","existingSegmentMapChild","segmentChild","segmentPathChild","segmentKeyChild","existingCacheNodeChild","baseRouterState","clone","newTask","createPendingCacheNode","reusedRouterState","oldRefreshMarker","responsePromise","serverRouterState","dynamicData","dynamicHead","writeDynamicDataIntoPendingTask","rootTask","taskSegment","finishTaskUsingDynamicDataPayload","taskNode","finishPendingCacheNode","serverChildren","dynamicDataChildren","serverRouterStateChild","dynamicDataChild","maybePrefetchRsc","createDeferredRsc","taskState","serverState","taskStateChildren","serverStateChildren","dataChildren","taskStateChild","serverStateChild","dataChild","segmentMapChild","taskSegmentChild","taskSegmentKeyChild","cacheNodeChild","abortPendingCacheNode","dynamicSegmentData","isDeferredRsc","dynamicLoading","newParallelRoutes","shouldUsePrefetch","DEFERRED","Symbol","pendingRsc","rej","responseDebugInfo","fulfilledRsc","rejectedRsc","reason","navigate","currentCacheNode","currentFlightRouterState","accumulation","snapshot","readRenderSnapshotFromCache","prefetchFlightRouterState","prefetchSeedData","navigateUsingPrefetchedRouteTree","optimisticRoute","newRenderedSearch","navigateDynamicallyWithNoPrefetch","promiseForDynamicServerResponse","navigationTaskToResult","childRouterStates","childSeedDatas","childResult","segmentEntry","promiseForFulfilledEntry","debugInfoFromResponse","simulatePrefetchTreeUsingDynamicTreePatch","hasDynamicHoles","baseTree","treePatch","canMutateInPlace","simulatePrefetchTreeUsingDynamicTreePatchImpl","patch","updatedParallelRouteKey","baseChildren","childBaseRouterState","notEnabled","__NEXT_CLIENT_SEGMENT_CACHE","IDLE_LINK_STATUS","PENDING_LINK_STATUS","mountFormInstance","mountLinkInstance","onLinkVisibilityChanged","onNavigationIntent","setLinkForCurrentNavigation","unmountLinkForCurrentNavigation","unmountPrefetchableInstance","linkForMostRecentNavigation","pending","setOptimisticLinkStatus","prefetchable","WeakMap","prefetchableAndVisible","observer","IntersectionObserver","handleIntersect","rootMargin","observeVisibility","instance","existingInstance","coercePrefetchableUrl","reportErrorFn","router","prefetchEnabled","prefetchURL","isVisible","prefetchTask","prefetchHref","unobserve","intersectionRatio","rescheduleLinkPrefetch","unstable_upgradeToDynamicPrefetch","__NEXT_DYNAMIC_ON_HOVER","existingPrefetchTask","prefetchWithOldCacheImplementation","getCurrentAppRouterState","appRouterState","scheduleSegmentPrefetchTask","doPrefetch","FULL","InvariantError","pathHasPrefix","hasBasePath","isLocalURL","locationOrigin","resolved","errorOnce","errors","LinkComponent","useLinkStatus","isModifiedEvent","eventTarget","metaKey","ctrlKey","shiftKey","altKey","which","linkClicked","linkInstanceRef","scroll","onNavigate","nodeName","isAnchorNodeName","toUpperCase","hasAttribute","dispatchNavigateAction","formatStringOrUrl","urlObjOrString","linkStatus","useOptimistic","hrefProp","asProp","childrenProp","prefetchProp","passHref","shallow","onClick","onMouseEnter","onMouseEnterProp","onTouchStart","onTouchStartProp","legacyBehavior","unstable_dynamicOnHover","restProps","AppRouterContext","getFetchStrategyFromPrefetchProp","createPropError","expected","actual","requiredPropsGuard","requiredProps","optionalPropsGuard","optionalProps","valType","locale","hasDynamicSegment","resolvedHref","$$typeof","for","only","childRef","observeLinkVisibilityOnMount","mergedRef","childProps","defaultPrevented","upgradeToDynamicPrefetch","__NEXT_LINK_NO_TOUCH_START","LinkStatusContext","Provider","createContext"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67]}